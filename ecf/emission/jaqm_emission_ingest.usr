%comment - ecf user variables
COM = com2
E = p
ECF_VERSION = 4.0.3
ENVIR = para
KEEPDATA:NO = NO
MAG_TRANSFER = ON
PROJ = CMAQ-T2O
QUEUE = prod
SENDDBN:YES = YES
SENDDBN_NTC:YES = YES
%end - ecf user variables
#BSUB -J paqm_emission_ingest
#BSUB -o /com2/output/para/today/aqm_emission_ingest.o%J
#BSUB -e /com2/output/para/today/aqm_emission_ingest.o%J
#BSUB -L /bin/sh
#BSUB -q prod_serv
#BSUB -cwd /tmpnwprd
#BSUB -W 02:30
#BSUB -n 1
#BSUB -R "rusage[mem=2500]" -R "affinity[core]"
##BSUB -P CMAQ-T2O
#BSUB -P CMAQ-T2O

#!/bin/ksh
set -e # stop the shell on first error
#set -u # fail when using an undefined variable
set -x # echo script lines as they are executed


# Defines the variables that are needed for any communication with ECF
export ECF_PORT=31415    # The server port number
export ECF_NODE=g14z1    # The name of ecf host that issued this task
export ECF_NAME=/para12/aqm/emission/jaqm_emission_ingest    # The name of this current task
export ECF_PASS=SuBBfLOb    # A unique password
export ECF_TRYNO=2  # Current try number of the task
export ECF_RID=$$
export ECF_VERSION=4.0.3
export MAG_TRANSFER=ON

# Tell ecFlow we have started
ecflow_client --init=${ECF_RID}

if [ -z "${POST_OUT}" ]
then
   export POST_OUT=/var/lsf/ecflow_post_in.${LSB_BATCH_JID}
fi

cat /dev/null > ${POST_OUT}

echo "ECF_NAME=${ECF_NAME}"   >> ${POST_OUT}
echo "ECF_NODE=${ECF_NODE}"   >> ${POST_OUT}
echo "ECF_PORT=${ECF_PORT}"   >> ${POST_OUT}
echo "ECF_PASS=${ECF_PASS}"   >> ${POST_OUT}
echo "ECF_TRYNO=${ECF_TRYNO}" >> ${POST_OUT}
echo "ECF_RID=${ECF_RID}"     >> ${POST_OUT}

# Define a error handler
ERROR() {
   set +e
   ecflow_client --abort="killed by signal"
   echo "Trap Caught" >>  $POST_OUT
   trap 0                      # Remove the trap
   exit 0                      # End the script
}


# Trap any calls to exit and errors caught by the -e flag
trap ERROR 0


# Trap any signal that may cause the script to fail
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 9 10 12 13 15
export job=${job:-$LSB_JOBNAME} #Can't use $job in filenames!
export jobid=${jobid:-$job.$LSB_JOBID}

export RUN_ENVIR=${RUN_ENVIR:-nco}
export envir=para
export SENDDBN=${SENDDBN:-YES}
export SENDDBN_NTC=${SENDDBN_NTC:-YES}

export COMROOTp1=${COMROOTp1:-/com}
export GESROOTp1=${GESROOTp1:-/nwges}
export COMROOT=${COMROOT:-/com2}
export GESROOT=${GESROOT:-/nwges2}
export DCOMROOT=${DCOMROOT:-/dcom}

#export subhost=`echo ${LSB_SUB_HOST}| cut -c1`

module load prod_util

case $envir in
  prod)
    export jlogfile=${jlogfile:-${COMROOT}/logs/jlogfiles/jlogfile.${jobid}}
    export DATAROOT=${DATAROOT:-/tmpnwprd_p2}
    if [ "$SENDDBN" == "YES" ]; then
       export DBNROOT=/iodprod/dbnet_siphon  # previously set in .bash_profile
    else
       export DBNROOT=${UTILROOT}/fakedbn
    fi
    ;;
  eval)
    export envir=para
    export jlogfile=${jlogfile:-${COMROOT}/logs/${envir}/jlogfile}
    export DATAROOT=${DATAROOT:-/tmpnwprd_p2}
    if [ "$SENDDBN" == "YES" ]; then
       export DBNROOT=${UTILROOT}/para_dbn
       SENDDBN_NTC=NO
    else
       export DBNROOT=${UTILROOT}/fakedbn
    fi
    ;;
  para|test)
    export jlogfile=${jlogfile:-${COMROOT}/logs/${envir}/jlogfile}
    export DATAROOT=${DATAROOT:-/tmpnwprd_p2}
    export DBNROOT=${UTILROOT}/fakedbn
    ;;
  *)
    ecflow_client --abort="ENVIR must be prod, para, eval, or test [envir.h]"
    exit
    ;;
esac

export NWROOT=/nw${envir}2
export NWROOTprod=/nwprod2
export NWROOTp1=/nwprod
export PCOMROOT=${PCOMROOT:-/pcom2/${envir}}
export SENDECF=${SENDECF:-YES}
export SENDCOM=${SENDCOM:-YES}
export KEEPDATA=${KEEPDATA:-NO}

set -x

##############################################
# To SOS- please set it complete if it failed
# DO NOT RERUN.  SPA will take care of failure
#############################################

#########################################
#RUN_DAY=16 as the default
#If rerun is needed, please
#export RUN_DAY=dd, 
#where dd is the day of month to be rerun
#########################################
export RUN_DAY=20

export envir=para

# versions file for AQM CMAQ sets $cmaq_ver
VERSION_FILE=$NWROOT/versions/cmaq.ver
if [ -f $VERSION_FILE ]; then
  . $VERSION_FILE
else
  ecflow_client --msg="***JOB ${ECF_NAME} ERROR: Version File $VERSION_FILE does not exist ***"
  ecflow_client --abort
  exit
fi

$NWROOT/cmaq.${cmaq_ver}/jobs/JAQM_EMISSION_INGEST

if [ $? -ne 0 ]; then
   ecflow_client --msg="***JOB ${ECF_NAME} ERROR RUNNING J-SCRIPT ***"
   ecflow_client --abort
   exit
fi

ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0                    # End the shell
%manual
######################################################################
#
#  PURPOSE:  To execute the job that copy the AQM emission 
#  files from /dcom to /com and validate the file size
#
######################################################################

######################################################################
# Job specific troubleshooting instructions:
#  see generic troubleshoot manual page
#
######################################################################

# include manual page below
%end