IBM XL Fortran Enterprise Edition V10.1 for AIX (5724-M13)  Version 10.01.0000.0002 --- /gpfs/m/nco/ops/nwpara/sorc/aqm_makeprecip_138.fd/w3fi63.f 11/27/06 09:54:23
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
          1 |      SUBROUTINE W3FI63(MSGA,KPDS,KGDS,KBMS,DATA,KPTR,KRET)
          2 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
          3 |C                .      .    .                                       .
          4 |C SUBPROGRAM:  W3FI63        UNPK GRIB FIELD TO GRIB GRID
          5 |C   PRGMMR: FARLEY           ORG: NMC421      DATE:94-11-22
          6 |C
          7 |C ABSTRACT: UNPACK A GRIB (EDITION 1) FIELD TO THE EXACT GRID
          8 |C   SPECIFIED IN THE GRIB MESSAGE, ISOLATE THE BIT MAP, AND MAKE
          9 |C   THE VALUES OF THE PRODUCT DESCRIPTON SECTION (PDS) AND THE
         10 |C   GRID DESCRIPTION SECTION (GDS) AVAILABLE IN RETURN ARRAYS.
         11 |C
         12 |C   WHEN DECODING IS COMPLETED, DATA AT EACH GRID POINT HAS BEEN
         13 |C          RETURNED IN THE UNITS SPECIFIED IN THE GRIB MANUAL.
         14 |C
         15 |C PROGRAM HISTORY LOG:
         16 |C   91-09-13  CAVANAUGH
         17 |C   91-11-12  CAVANAUGH   MODIFIED SIZE OF ECMWF GRIDS 5-8
         18 |C   91-12-22  CAVANAUGH   CORRECTED PROCESSING OF MERCATOR PROJECTIONS
         19 |C                         IN GRID DEFINITION SECTION (GDS) IN
         20 |C                         ROUTINE FI633
         21 |C   92-08-05  CAVANAUGH   CORRECTED MAXIMUM GRID SIZE TO ALLOW FOR
         22 |C                         ONE DEGREE BY ONE DEGREE GLOBAL GRIDS
         23 |C   92-08-27  CAVANAUGH   CORRECTED TYPO ERROR, ADDED CODE TO COMPARE
         24 |C                         TOTAL BYTE SIZE FROM SECTION 0 WITH SUM OF
         25 |C                         SECTION SIZES.
         26 |C   92-10-21  CAVANAUGH   CORRECTIONS WERE MADE (IN FI634) TO REDUCE
         27 |C                         PROCESSING TIME FOR INTERNATIONAL GRIDS.
         28 |C                         REMOVED A TYPOGRAPHICAL ERROR IN FI635.
         29 |C   93-01-07  CAVANAUGH   CORRECTIONS WERE MADE (IN FI635) TO
         30 |C                         FACILITATE USE OF THESE ROUTINES ON A PC.
         31 |C                         A TYPOGRAPHICAL ERROR WAS ALSO CORRECTED
         32 |C   93-01-13  CAVANAUGH   CORRECTIONS WERE MADE (IN FI632) TO
         33 |C                         PROPERLY HANDLE CONDITION WHEN
         34 |C                         TIME RANGE INDICATOR = 10.
         35 |C                         ADDED U.S.GRID 87.
         36 |C   93-02-04  CAVANAUGH   ADDED U.S.GRIDS 85 AND 86
         37 |C   93-02-26  CAVANAUGH   ADDED GRIDS 2, 3, 37 THRU 44,AND
         38 |C                         GRIDS 55, 56, 90, 91, 92, AND 93 TO
         39 |C                         LIST OF U.S. GRIDS.
         40 |C   93-04-07  CAVANAUGH   ADDED GRIDS 67 THRU 77 TO
         41 |C                         LIST OF U.S. GRIDS.
         42 |C   93-04-20  CAVANAUGH   INCREASED MAX SIZE TO ACCOMODATE
         43 |C                         GAUSSIAN GRIDS.
         44 |C   93-05-26  CAVANAUGH   CORRECTED GRID RANGE SELECTION IN FI634
         45 |C                         FOR RANGES 67-71 & 75-77
         46 |C   93-06-08  CAVANAUGH   CORRECTED FI635 TO ACCEPT GRIB MESSAGES
         47 |C                         WITH SECOND ORDER PACKING. ADDED ROUTINE FI636
         48 |C                         TO PROCESS MESSAGES WITH SECOND ORDER PACKING.
         49 |C   93-09-22  CAVANAUGH   MODIFIED TO EXTRACT SUB-CENTER NUMBER FROM
         50 |C                         PDS BYTE 26
         51 |C   93-10-13  CAVANAUGH   MODIFIED FI634 TO CORRECT GRID SIZES FOR
         52 |C                         GRIDS 204 AND 208
         53 |C   93-10-14  CAVANAUGH   INCREASED SIZE OF KGDS TO INCLUDE ENTRIES FOR
         54 |C                         NUMBER OF POINTS IN GRID AND NUMBER OF WORDS
         55 |C                         IN EACH ROW
         56 |C   93-12-08  CAVANAUGH   CORRECTED TEST FOR EDITION NUMBER INSTEAD
         57 |C                         OF VERSION NUMBER
         58 |C   93-12-15  CAVANAUGH   MODIFIED SECOND ORDER POINTERS TO FIRST ORDER
         59 |C                         VALUES AND SECOND ORDER VALUES CORRECTLY
         60 |C                         IN ROUTINE FI636
         61 |C   94-03-02  CAVANAUGH   ADDED CALL TO W3FI83 WITHIN DECODER.  USER
         62 |C                         NO LONGER NEEDS TO MAKE CALL TO THIS ROUTINE
         63 |C   94-04-22  CAVANAUGH   MODIFIED FI635, FI636 TO PROCESS ROW BY ROW
         64 |C                         SECOND ORDER PACKING, ADDED SCALING CORRECTION
         65 |C                         TO FI635, AND CORRECTED TYPOGRAPHICAL ERRORS
         66 |C                         IN COMMENT FIELDS IN FI634
         67 |C   94-05-17  CAVANAUGH   CORRECTED ERROR IN FI633 TO EXTRACT RESOLUTION
         68 |C                         FOR LAMBERT-CONFORMAL GRIDS. ADDED CLARIFYING
         69 |C                         INFORMATION TO DOCBLOCK ENTRIES
         70 |C   94-05-25  CAVANAUGH   ADDED CODE TO PROCESS COLUMN BY COLUMN AS WELL
         71 |C                         AS ROW BY ROW ORDERING OF SECOND ORDER DATA
         72 |C   94-06-27  CAVANAUGH   ADDED PROCESSING FOR GRIDS 45, 94 AND 95.
         73 |C                         INCLUDES CONSTRUCTION OF SECOND ORDER BIT MAPS
         74 |C                         FOR THINNED GRIDS IN FI636.
         75 |C   94-07-08  CAVANAUGH   COMMENTED OUT PRINT OUTS USED FOR DEBUGGING
         76 |C   94-09-08  CAVANAUGH   ADDED GRIDS 220, 221, 223 FOR FNOC
         77 |C   94-11-10  FARLEY      INCREASED MXSIZE FROM 72960 TO 260000
         78 |C                         FOR .5 DEGREE SST ANALYSIS FIELDS
         79 |C   94-12-06  R.E.JONES   CHANGES IN FI632 FOR PDS GREATER THAN 28
         80 |C   95-02-14  R.E.JONES   CORRECT IN FI633 FOR NAVY WAFS GRIB
         81 |C   95-03-20  M.BALDWIN   FI633 MODIFICATION TO GET
         82 |C                         DATA REP TYPES [KGDS(1)] 201 AND 202 TO WORK.
         83 |C   95-04-10  E.ROGERS    ADDED GRIDS 96 AND 97 FOR ETA MODEL IN FI634.
         84 |C   95-04-26  R.E.JONES   FI636 CORECTION FOR 2ND ORDER COMPLEX
         85 |C                         UNPACKING. R
         86 |C   95-05-19  R.E.JONES   ADDED GRID 215, 20 KM AWIPS GRID
         87 |C   95-07-06  R.E.JONES   ADDED GAUSSIAN T62, T126 GRID 98, 126
         88 |C   95-10-19  R.E.JONES   ADDED GRID 216, 45 KM ETA AWIPS ALASKA GRID
         89 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
         90 |C   96-03-07  R.E.JONES   CONTINUE UNPACK WITH KRET ERROR 9 IN FI631.
         91 |C   96-08-19  R.E.JONES   ADDED MERCATOR GRIDS 8 AND 53, AND GRID 196
         92 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
         93 |C   98-06-17  IREDELL     REMOVED ALTERNATE RETURN IN FI637
         94 |C   98-08-31  IREDELL     ELIMINATED NEED FOR MXSIZE
         95 |C   98-09-02  Gilbert     Corrected error in map size for U.S. Grid 92
         96 |C   98-09-08  BALDWIN     ADD DATA REP TYPE [KGDS(1)] 203
         97 |C   01-03-08  ROGERS      CHANGED ETA GRIDS 90-97, ADDED ETA GRIDS
         98 |C                         194, 198. ADDED AWIPS GRIDS 241,242,243,
         99 |C                         245, 246, 247, 248, AND 250
        100 |C   01-03-19  VUONG       ADDED AWIPS GRIDS 238,239,240, AND 244
        101 |C   01-05-03  ROGERS      ADDED GRID 249  (12KM FOR ALASKA)
        102 |C   01-10-10  ROGERS      REDEFINED GRID 218 FOR 12 KM ETA
        103 |C                         REDEFINED GRID 192 FOR NEW 32-KM ETA GRID
        104 |C   02-03-27  VUONG       ADDED RSAS GRID 88 AND AWIPS GRIDS 219, 220,
        105 |C                         223, 224, 225, 226, 227, 228, 229, 230, 231,
        106 |C                         232, 233, 234, 235, 251, AND 252
        107 |C   02-08-06  ROGERS      REDEFINED GRIDS 90-93,97,194,245-250 FOR THE
        108 |C                         8KM HI-RES-WINDOW MODEL AND ADD AWIPS GRID 253
        109 |C 2003-06-30  GILBERT     SET NEW VALUES IN ARRAY KPTR TO PASS BACK ADDITIONAL
        110 |C                         PACKING INFO.
        111 |C                         KPTR(19) - BINARY SCALE FACTOR
        112 |C                         KPTR(20) - NUM BITS USED TO PACK EACH DATUM
        113 |C 2003-06-30  GILBERT     ADDED GRIDS 145 and 146 for CMAQ
        114 |C                         and GRID 175 for AWIPS over GUAM.
        115 |C 2003-07-08  VUONG       ADDED GRIDS 110, 127, 171, 172 AND MODIFIED GRID 170
        116 |C
        117 |C USAGE:    CALL W3FI63(MSGA,KPDS,KGDS,KBMS,DATA,KPTR,KRET)
        118 |C   INPUT ARGUMENT LIST:
        119 |C     MSGA     - GRIB FIELD - "GRIB" THRU "7777"   CHAR*1
        120 |C                   (MESSAGE CAN BE PRECEDED BY JUNK CHARS)
        121 |C
        122 |C   OUTPUT ARGUMENT LIST:
        123 |C     DATA     - ARRAY CONTAINING DATA ELEMENTS
        124 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.  (EDITION 1)
        125 |C          (1)   - ID OF CENTER
        126 |C          (2)   - GENERATING PROCESS ID NUMBER
        127 |C          (3)   - GRID DEFINITION
        128 |C          (4)   - GDS/BMS FLAG (RIGHT ADJ COPY OF OCTET 8)
        129 |C          (5)   - INDICATOR OF PARAMETER
        130 |C          (6)   - TYPE OF LEVEL
        131 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        132 |C          (8)   - YEAR INCLUDING (CENTURY-1)
        133 |C          (9)   - MONTH OF YEAR
        134 |C          (10)  - DAY OF MONTH
        135 |C          (11)  - HOUR OF DAY
        136 |C          (12)  - MINUTE OF HOUR
        137 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        138 |C          (14)  - TIME RANGE 1
        139 |C          (15)  - TIME RANGE 2
        140 |C          (16)  - TIME RANGE FLAG
        141 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        142 |C          (18)  - VERSION NR OF GRIB SPECIFICATION
        143 |C          (19)  - VERSION NR OF PARAMETER TABLE
        144 |C          (20)  - NR MISSING FROM AVERAGE/ACCUMULATION
        145 |C          (21)  - CENTURY OF REFERENCE TIME OF DATA
        146 |C          (22)  - UNITS DECIMAL SCALE FACTOR
        147 |C          (23)  - SUBCENTER NUMBER
        148 |C          (24)  - PDS BYTE 29, FOR NMC ENSEMBLE PRODUCTS
        149 |C                  128 IF FORECAST FIELD ERROR
        150 |C                   64 IF BIAS CORRECTED FCST FIELD
        151 |C                   32 IF SMOOTHED FIELD
        152 |C                  WARNING: CAN BE COMBINATION OF MORE THAN 1
        153 |C          (25)  - PDS BYTE 30, NOT USED
        154 |C       (26-35)  - RESERVED
        155 |C       (36-N)   - CONSECUTIVE BYTES EXTRACTED FROM PROGRAM
        156 |C                  DEFINITION SECTION (PDS) OF GRIB MESSAGE
        157 |C     KGDS     - ARRAY CONTAINING GDS ELEMENTS.
        158 |C          (1)   - DATA REPRESENTATION TYPE
        159 |C          (19)  - NUMBER OF VERTICAL COORDINATE PARAMETERS
        160 |C          (20)  - OCTET NUMBER OF THE LIST OF VERTICAL COORDINATE
        161 |C                  PARAMETERS
        162 |C                  OR
        163 |C                  OCTET NUMBER OF THE LIST OF NUMBERS OF POINTS
        164 |C                  IN EACH ROW
        165 |C                  OR
        166 |C                  255 IF NEITHER ARE PRESENT
        167 |C          (21)  - FOR GRIDS WITH PL, NUMBER OF POINTS IN GRID
        168 |C          (22)  - NUMBER OF WORDS IN EACH ROW
        169 |C       LATITUDE/LONGITUDE GRIDS
        170 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        171 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        172 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        173 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        174 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        175 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
        176 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
        177 |C          (9)   - DI LONGITUDINAL DIRECTION OF INCREMENT
        178 |C          (10)  - DJ LATITUDINAL DIRECTION INCREMENT
        179 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        180 |C       GAUSSIAN  GRIDS
        181 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        182 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        183 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        184 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        185 |C          (6)   - RESOLUTION FLAG  (RIGHT ADJ COPY OF OCTET 17)
        186 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
        187 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
        188 |C          (9)   - DI LONGITUDINAL DIRECTION OF INCREMENT
        189 |C          (10)  - N - NR OF CIRCLES POLE TO EQUATOR
        190 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        191 |C          (12)  - NV - NR OF VERT COORD PARAMETERS
        192 |C          (13)  - PV - OCTET NR OF LIST OF VERT COORD PARAMETERS
        193 |C                             OR
        194 |C                  PL - LOCATION OF THE LIST OF NUMBERS OF POINTS IN
        195 |C                       EACH ROW (IF NO VERT COORD PARAMETERS
        196 |C                       ARE PRESENT
        197 |C                             OR
        198 |C                  255 IF NEITHER ARE PRESENT
        199 |C       POLAR STEREOGRAPHIC GRIDS
        200 |C          (2)   - N(I) NR POINTS ALONG LAT CIRCLE
        201 |C          (3)   - N(J) NR POINTS ALONG LON CIRCLE
        202 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        203 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        204 |C          (6)   - RESOLUTION FLAG  (RIGHT ADJ COPY OF OCTET 17)
        205 |C          (7)   - LOV GRID ORIENTATION
        206 |C          (8)   - DX - X DIRECTION INCREMENT
        207 |C          (9)   - DY - Y DIRECTION INCREMENT
        208 |C          (10)  - PROJECTION CENTER FLAG
        209 |C          (11)  - SCANNING MODE (RIGHT ADJ COPY OF OCTET 28)
        210 |C       SPHERICAL HARMONIC COEFFICIENTS
        211 |C          (2)   - J PENTAGONAL RESOLUTION PARAMETER
        212 |C          (3)   - K      "          "         "
        213 |C          (4)   - M      "          "         "
        214 |C          (5)   - REPRESENTATION TYPE
        215 |C          (6)   - COEFFICIENT STORAGE MODE
        216 |C       MERCATOR GRIDS
        217 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        218 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        219 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        220 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        221 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        222 |C          (7)   - LA(2) LATITUDE OF LAST GRID POINT
        223 |C          (8)   - LO(2) LONGITUDE OF LAST GRID POINT
        224 |C          (9)   - LATIT - LATITUDE OF PROJECTION INTERSECTION
        225 |C          (10)  - RESERVED
        226 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        227 |C          (12)  - LONGITUDINAL DIR GRID LENGTH
        228 |C          (13)  - LATITUDINAL DIR GRID LENGTH
        229 |C       LAMBERT CONFORMAL GRIDS
        230 |C          (2)   - NX NR POINTS ALONG X-AXIS
        231 |C          (3)   - NY NR POINTS ALONG Y-AXIS
        232 |C          (4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
        233 |C          (5)   - LO1 LON OF ORIGIN (LOWER LEFT)
        234 |C          (6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
        235 |C          (7)   - LOV - ORIENTATION OF GRID
        236 |C          (8)   - DX - X-DIR INCREMENT
        237 |C          (9)   - DY - Y-DIR INCREMENT
        238 |C          (10)  - PROJECTION CENTER FLAG
        239 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        240 |C          (12)  - LATIN 1 - FIRST LAT FROM POLE OF SECANT CONE INTER
        241 |C          (13)  - LATIN 2 - SECOND LAT FROM POLE OF SECANT CONE INTER
        242 |C       STAGGERED ARAKAWA ROTATED LAT/LON GRIDS (TYPE 203)
        243 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        244 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        245 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        246 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        247 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        248 |C          (7)   - LA(2) LATITUDE OF CENTER
        249 |C          (8)   - LO(2) LONGITUDE OF CENTER
        250 |C          (9)   - DI LONGITUDINAL DIRECTION OF INCREMENT
        251 |C          (10)  - DJ LATITUDINAL DIRECTION INCREMENT
        252 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        253 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
        254 |C                            (ALWAYS CONSTRUCTED)
        255 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        256 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        257 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        258 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        259 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        260 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        261 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        262 |C          (7)   - VALUE OF CURRENT BYTE
        263 |C          (8)   - BIT POINTER
        264 |C          (9)   - GRIB START BIT NR
        265 |C         (10)   - GRIB/GRID ELEMENT COUNT
        266 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        267 |C         (12)   - BIT MAP FLAG (COPY OF BMS OCTETS 5,6)
        268 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        269 |C         (14)   - BDS FLAGS (RIGHT ADJ COPY OF OCTET 4)
        270 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        271 |C         (16)   - RESERVED
        272 |C         (17)   - RESERVED
        273 |C         (18)   - RESERVED
        274 |C         (19)   - BINARY SCALE FACTOR
        275 |C         (20)   - NUM BITS USED TO PACK EACH DATUM
        276 |C     KRET       - FLAG INDICATING QUALITY OF COMPLETION
        277 |C
        278 |C REMARKS: WHEN DECODING IS COMPLETED, DATA AT EACH GRID POINT HAS BEEN
        279 |C          RETURNED IN THE UNITS SPECIFIED IN THE GRIB MANUAL.
        280 |C
        281 |C          VALUES FOR RETURN FLAG (KRET)
        282 |C     KRET = 0 - NORMAL RETURN, NO ERRORS
        283 |C          = 1 - 'GRIB' NOT FOUND IN FIRST 100 CHARS
        284 |C          = 2 - '7777' NOT IN CORRECT LOCATION
        285 |C          = 3 - UNPACKED FIELD IS LARGER THAN 260000
        286 |C          = 4 - GDS/ GRID NOT ONE OF CURRENTLY ACCEPTED VALUES
        287 |C          = 5 - GRID NOT CURRENTLY AVAIL FOR CENTER INDICATED
        288 |C          = 8 - TEMP GDS INDICATED, BUT GDS FLAG IS OFF
        289 |C          = 9 - GDS INDICATES SIZE MISMATCH WITH STD GRID
        290 |C          =10 - INCORRECT CENTER INDICATOR
        291 |C          =11 - BINARY DATA SECTION (BDS) NOT COMPLETELY PROCESSED.
        292 |C                PROGRAM IS NOT SET TO PROCESS FLAG COMBINATIONS
        293 |C                SHOWN IN OCTETS 4 AND 14.
        294 |C          =12 - BINARY DATA SECTION (BDS) NOT COMPLETELY PROCESSED.
        295 |C                PROGRAM IS NOT SET TO PROCESS FLAG COMBINATIONS
        296 |C
        297 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
        298 |C
        299 |C ATTRIBUTES:
        300 |C   LANGUAGE: FORTRAN 90
        301 |C
        302 |C$$$
        303 |C                                                         4 AUG 1988
        304 |C                               W3FI63
        305 |C
        306 |C
        307 |C                       GRIB UNPACKING ROUTINE
        308 |C
        309 |C
        310 |C       THIS ROUTINE WILL UNPACK A 'GRIB' FIELD TO THE EXACT GRID
        311 |C  TYPE SPECIFIED IN THE MESSAGE, RETURN A BIT MAP AND MAKE THE
        312 |C  VALUES OF THE PRODUCT DEFINITION SEC   (PDS) AND THE GRID
        313 |C  DESCRIPTION SEC   (GDS) AVAILABLE IN RETURN ARRAYS.
        314 |C  SEE "GRIB - THE WMO FORMAT FOR THE STORAGE OF WEATHER PRODUCT
        315 |C  INFORMATION AND THE EXCHANGE OF WEATHER PRODUCT MESSAGES IN
        316 |C  GRIDDED BINARY FORM" DATED JULY 1, 1988 BY JOHN D. STACKPOLE
        317 |C  DOC, NOAA, NWS, NATIONAL METEOROLOGICAL CENTER.
        318 |C
        319 |C       THE CALL TO THE GRIB UNPACKING ROUTINE IS AS FOLLOWS:
        320 |C
        321 |C            CALL W3FI63(MSGA,KPDS,KGDS,LBMS,DATA,KPTR,KRET)
        322 |C
        323 |C  INPUT:
        324 |C
        325 |C       MSGA  = CONTAINS THE GRIB MESSAGE TO BE UNPACKED. CHARACTERS
        326 |C               "GRIB" MAY BEGIN ANYWHERE WITHIN FIRST 100 BYTES.
        327 |C
        328 |C  OUTPUT:
        329 |C
        330 |C       KPDS(100)      INTEGER*4
        331 |C               ARRAY TO CONTAIN THE ELEMENTS OF THE PRODUCT
        332 |C               DEFINITION SEC  .
        333 |C         (VERSION 1)
        334 |C            KPDS(1)  - ID OF CENTER
        335 |C            KPDS(2)  - MODEL IDENTIFICATION (SEE "GRIB" TABLE 1)
        336 |C            KPDS(3)  - GRID IDENTIFICATION (SEE "GRIB" TABLE 2)
        337 |C            KPDS(4)  - GDS/BMS FLAG
        338 |C                           BIT       DEFINITION
        339 |C                            25        0 - GDS OMITTED
        340 |C                                      1 - GDS INCLUDED
        341 |C                            26        0 - BMS OMITTED
        342 |C                                      1 - BMS INCLUDED
        343 |C                        NOTE:- LEFTMOST BIT = 1,
        344 |C                               RIGHTMOST BIT = 32
        345 |C            KPDS(5)  - INDICATOR OF PARAMETER (SEE "GRIB" TABLE 5)
        346 |C            KPDS(6)  - TYPE OF LEVEL (SEE "GRIB" TABLES 6 & 7)
        347 |C            KPDS(7)  - HEIGHT,PRESSURE,ETC  OF LEVEL
        348 |C            KPDS(8)  - YEAR INCLUDING CENTURY
        349 |C            KPDS(9)  - MONTH OF YEAR
        350 |C            KPDS(10) - DAY OF MONTH
        351 |C            KPDS(11) - HOUR OF DAY
        352 |C            KPDS(12) - MINUTE OF HOUR
        353 |C            KPDS(13) - INDICATOR OF FORECAST TIME UNIT (SEE "GRIB"
        354 |C                       TABLE 8)
        355 |C            KPDS(14) - TIME 1               (SEE "GRIB" TABLE 8A)
        356 |C            KPDS(15) - TIME 2               (SEE "GRIB" TABLE 8A)
        357 |C            KPDS(16) - TIME RANGE INDICATOR (SEE "GRIB" TABLE 8A)
        358 |C            KPDS(17) - NUMBER INCLUDED IN AVERAGE
        359 |C            KPDS(18) - EDITION NR OF GRIB SPECIFICATION
        360 |C            KPDS(19) - VERSION NR OF PARAMETER TABLE
        361 |C
        362 |C       KGDS(13)       INTEGER*4
        363 |C             ARRAY CONTAINING GDS ELEMENTS.
        364 |C
        365 |C            KGDS(1)  - DATA REPRESENTATION TYPE
        366 |C
        367 |C         LATITUDE/LONGITUDE GRIDS (SEE "GRIB" TABLE 10)
        368 |C            KGDS(2)  - N(I) NUMBER OF POINTS ON LATITUDE
        369 |C                       CIRCLE
        370 |C            KGDS(3)  - N(J) NUMBER OF POINTS ON LONGITUDE
        371 |C                       CIRCLE
        372 |C            KGDS(4)  - LA(1) LATITUDE OF ORIGIN
        373 |C            KGDS(5)  - LO(1) LONGITUDE OF ORIGIN
        374 |C            KGDS(6)  - RESOLUTION FLAG
        375 |C                           BIT       MEANING
        376 |C                            25       0 - DIRECTION INCREMENTS NOT
        377 |C                                         GIVEN
        378 |C                                     1 - DIRECTION INCREMENTS GIVEN
        379 |C            KGDS(7)  - LA(2) LATITUDE OF EXTREME POINT
        380 |C            KGDS(8)  - LO(2) LONGITUDE OF EXTREME POINT
        381 |C            KGDS(9)  - DI LONGITUDINAL DIRECTION INCREMENT
        382 |C            KGDS(10) - REGULAR LAT/LON GRID
        383 |C                           DJ - LATITUDINAL DIRECTION
        384 |C                                INCREMENT
        385 |C                       GAUSSIAN GRID
        386 |C                           N  - NUMBER OF LATITUDE CIRCLES
        387 |C                                BETWEEN A POLE AND THE EQUATOR
        388 |C            KGDS(11) - SCANNING MODE FLAG
        389 |C                           BIT       MEANING
        390 |C                            25       0 - POINTS ALONG A LATITUDE
        391 |C                                         SCAN FROM WEST TO EAST
        392 |C                                     1 - POINTS ALONG A LATITUDE
        393 |C                                         SCAN FROM EAST TO WEST
        394 |C                            26       0 - POINTS ALONG A MERIDIAN
        395 |C                                         SCAN FROM NORTH TO SOUTH
        396 |C                                     1 - POINTS ALONG A MERIDIAN
        397 |C                                         SCAN FROM SOUTH TO NORTH
        398 |C                            27       0 - POINTS SCAN FIRST ALONG
        399 |C                                         CIRCLES OF LATITUDE, THEN
        400 |C                                         ALONG MERIDIANS
        401 |C                                         (FORTRAN: (I,J))
        402 |C                                     1 - POINTS SCAN FIRST ALONG
        403 |C                                         MERIDIANS THEN ALONG
        404 |C                                         CIRCLES OF LATITUDE
        405 |C                                         (FORTRAN: (J,I))
        406 |C
        407 |C         POLAR STEREOGRAPHIC GRIDS  (SEE GRIB TABLE 12)
        408 |C            KGDS(2)  - N(I) NR POINTS ALONG LAT CIRCLE
        409 |C            KGDS(3)  - N(J) NR POINTS ALONG LON CIRCLE
        410 |C            KGDS(4)  - LA(1) LATITUDE OF ORIGIN
        411 |C            KGDS(5)  - LO(1) LONGITUDE OF ORIGIN
        412 |C            KGDS(6)  - RESERVED
        413 |C            KGDS(7)  - LOV GRID ORIENTATION
        414 |C            KGDS(8)  - DX - X DIRECTION INCREMENT
        415 |C            KGDS(9)  - DY - Y DIRECTION INCREMENT
        416 |C            KGDS(10) - PROJECTION CENTER FLAG
        417 |C            KGDS(11) - SCANNING MODE
        418 |C
        419 |C         SPHERICAL HARMONIC COEFFICIENTS (SEE "GRIB" TABLE 14)
        420 |C            KGDS(2)  - J PENTAGONAL RESOLUTION PARAMETER
        421 |C            KGDS(3)  - K PENTAGONAL RESOLUTION PARAMETER
        422 |C            KGDS(4)  - M PENTAGONAL RESOLUTION PARAMETER
        423 |C            KGDS(5)  - REPRESENTATION TYPE
        424 |C            KGDS(6)  - COEFFICIENT STORAGE MODE
        425 |C
        426 |C       MERCATOR GRIDS
        427 |C            KGDS(2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        428 |C            KGDS(3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        429 |C            KGDS(4)   - LA(1) LATITUDE OF ORIGIN
        430 |C            KGDS(5)   - LO(1) LONGITUDE OF ORIGIN
        431 |C            KGDS(6)   - RESOLUTION FLAG
        432 |C            KGDS(7)   - LA(2) LATITUDE OF LAST GRID POINT
        433 |C            KGDS(8)   - LO(2) LONGITUDE OF LAST GRID POINT
        434 |C            KGDS(9)   - LATIN - LATITUDE OF PROJECTION INTERSECTION
        435 |C            KGDS(10)  - RESERVED
        436 |C            KGDS(11)  - SCANNING MODE FLAG
        437 |C            KGDS(12)  - LONGITUDINAL DIR GRID LENGTH
        438 |C            KGDS(13)  - LATITUDINAL DIR GRID LENGTH
        439 |C       LAMBERT CONFORMAL GRIDS
        440 |C            KGDS(2)   - NX NR POINTS ALONG X-AXIS
        441 |C            KGDS(3)   - NY NR POINTS ALONG Y-AXIS
        442 |C            KGDS(4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
        443 |C            KGDS(5)   - LO1 LON OF ORIGIN (LOWER LEFT)
        444 |C            KGDS(6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
        445 |C            KGDS(7)   - LOV - ORIENTATION OF GRID
        446 |C            KGDS(8)   - DX - X-DIR INCREMENT
        447 |C            KGDS(9)   - DY - Y-DIR INCREMENT
        448 |C            KGDS(10)  - PROJECTION CENTER FLAG
        449 |C            KGDS(11)  - SCANNING MODE FLAG
        450 |C            KGDS(12)  - LATIN 1 - FIRST LAT FROM POLE OF
        451 |C                        SECANT CONE INTERSECTION
        452 |C            KGDS(13)  - LATIN 2 - SECOND LAT FROM POLE OF
        453 |C                        SECANT CONE INTERSECTION
        454 |C
        455 |C       LBMS(*)    LOGICAL
        456 |C               ARRAY TO CONTAIN THE BIT MAP DESCRIBING THE
        457 |C               PLACEMENT OF DATA IN THE OUTPUT ARRAY.  IF A
        458 |C               BIT MAP IS NOT INCLUDED IN THE SOURCE MESSAGE,
        459 |C               ONE WILL BE GENERATED AUTOMATICALLY BY THE
        460 |C               UNPACKING ROUTINE.
        461 |C
        462 |C
        463 |C       DATA(*)    REAL*4
        464 |C               THIS ARRAY WILL CONTAIN THE UNPACKED DATA POINTS.
        465 |C
        466 |C                      NOTE:- 65160 IS MAXIMUN FIELD SIZE ALLOWABLE
        467 |C
        468 |C       KPTR(10)       INTEGER*4
        469 |C               ARRAY CONTAINING STORAGE FOR THE FOLLOWING
        470 |C               PARAMETERS.
        471 |C
        472 |C                 (1)  -    UNUSED
        473 |C                 (2)  -    UNUSED
        474 |C                 (3)  -    LENGTH OF PDS (IN BYTES)
        475 |C                 (4)  -    LENGTH OF GDS (IN BYTES)
        476 |C                 (5)  -    LENGTH OF BMS (IN BYTES)
        477 |C                 (6)  -    LENGTH OF BDS (IN BYTES)
        478 |C                 (7)  -    USED BY UNPACKING ROUTINE
        479 |C                 (8)  -    NUMBER OF DATA POINTS FOR GRID
        480 |C                 (9)  -    "GRIB" CHARACTERS START IN BYTE NUMBER
        481 |C                 (10) -    USED BY UNPACKING ROUTINE
        482 |C
        483 |C
        484 |C       KRET      INTEGER*4
        485 |C                 THIS VARIABLE WILL CONTAIN THE RETURN INDICATOR.
        486 |C
        487 |C                 0    -    NO ERRORS DETECTED.
        488 |C
        489 |C                 1    -    'GRIB' NOT FOUND IN FIRST 100
        490 |C                           CHARACTERS.
        491 |C
        492 |C                 2    -    '7777' NOT FOUND, EITHER MISSING OR
        493 |C                           TOTAL OF SEC   COUNTS OF INDIVIDUAL
        494 |C                           SECTIONS  IS INCORRECT.
        495 |C
        496 |C                 3    -    UNPACKED FIELD IS LARGER THAN 65160.
        497 |C
        498 |C                 4    -    IN GDS, DATA REPRESENTATION TYPE
        499 |C                           NOT ONE OF THE CURRENTLY ACCEPTABLE
        500 |C                           VALUES. SEE "GRIB" TABLE 9. VALUE
        501 |C                           OF INCORRECT TYPE RETURNED IN KGDS(1).
        502 |C
        503 |C                 5    -    GRID INDICATED IN KPDS(3) IS NOT
        504 |C                           AVAILABLE FOR THE CENTER INDICATED IN
        505 |C                           KPDS(1) AND NO GDS SENT.
        506 |C
        507 |C                 7    -    EDITION INDICATED IN KPDS(18) HAS NOT
        508 |C                           YET BEEN INCLUDED IN THE DECODER.
        509 |C
        510 |C                 8    -    GRID IDENTIFICATION = 255 (NOT STANDARD
        511 |C                           GRID) BUT FLAG INDICATING PRESENCE OF
        512 |C                           GDS IS TURNED OFF. NO METHOD OF
        513 |C                           GENERATING PROPER GRID.
        514 |C
        515 |C                 9    -    PRODUCT OF KGDS(2) AND KGDS(3) DOES NOT
        516 |C                           MATCH STANDARD NUMBER OF POINTS FOR THIS
        517 |C                           GRID (FOR OTHER THAN SPECTRALS). THIS
        518 |C                           WILL OCCUR ONLY IF THE GRID.
        519 |C                           IDENTIFICATION, KPDS(3), AND A
        520 |C                           TRANSMITTED GDS ARE INCONSISTENT.
        521 |C
        522 |C                10    -    CENTER INDICATOR WAS NOT ONE INDICATED
        523 |C                           IN "GRIB" TABLE 1.  PLEASE CONTACT AD
        524 |C                           PRODUCTION MANAGEMENT BRANCH (W/NMC42)
        525 |C                                     IF THIS ERROR IS ENCOUNTERED.
        526 |C
        527 |C                11    -    BINARY DATA SECTION (BDS) NOT COMPLETELY
        528 |C                           PROCESSED.  PROGRAM IS NOT SET TO PROCESS
        529 |C                           FLAG COMBINATIONS AS SHOWN IN
        530 |C                           OCTETS 4 AND 14.
        531 |C
        532 |C
        533 |C  LIST OF TEXT MESSAGES FROM CODE
        534 |C
        535 |C
        536 |C  W3FI63/FI632
        537 |C
        538 |C            'HAVE ENCOUNTERED A NEW GRID FOR NMC, PLEASE NOTIFY
        539 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        540 |C            (W/NMC42)'
        541 |C
        542 |C            'HAVE ENCOUNTERED A NEW GRID FOR ECMWF, PLEASE NOTIFY
        543 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        544 |C            (W/NMC42)'
        545 |C
        546 |C            'HAVE ENCOUNTERED A NEW GRID FOR U.K. METEOROLOGICAL
        547 |C            OFFICE, BRACKNELL.  PLEASE NOTIFY AUTOMATION DIVISION,
        548 |C            PRODUCTION MANAGEMENT BRANCH (W/NMC42)'
        549 |C
        550 |C            'HAVE ENCOUNTERED A NEW GRID FOR FNOC, PLEASE NOTIFY
        551 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        552 |C            (W/NMC42)'
        553 |C
        554 |C
        555 |C  W3FI63/FI633
        556 |C
        557 |C            'POLAR STEREO PROCESSING NOT AVAILABLE'  *
        558 |C
        559 |C  W3FI63/FI634
        560 |C
        561 |C            'WARNING - BIT MAP MAY NOT BE ASSOCIATED WITH SPHERICAL
        562 |C            COEFFICIENTS'
        563 |C
        564 |C
        565 |C  W3FI63/FI637
        566 |C
        567 |C            'NO CURRENT LISTING OF FNOC GRIDS'      *
        568 |C
        569 |C
        570 |C  * WILL BE AVAILABLE IN NEXT UPDATE
        571 |C  ***************************************************************
        572 |C
        573 |C                       INCOMING MESSAGE HOLDER
        574 |      CHARACTER*1   MSGA(*)
        575 |C                       BIT MAP
        576 |      LOGICAL*1     KBMS(*)
        577 |C
        578 |C                       ELEMENTS OF PRODUCT DESCRIPTION SEC   (PDS)
        579 |      INTEGER       KPDS(*)
        580 |C                       ELEMENTS OF GRID DESCRIPTION SEC   (PDS)
        581 |      INTEGER       KGDS(*)
        582 |C
        583 |C                       CONTAINER FOR GRIB GRID
        584 |      REAL          DATA(*)
        585 |C
        586 |C                       ARRAY OF POINTERS AND COUNTERS
        587 |      INTEGER       KPTR(*)
        588 |C
        589 |C  *****************************************************************
        590 |      INTEGER       KKK,JSGN,JEXP,IFR,NPTS
        591 |      CHARACTER     KK(8)
        592 |      REAL          REALKK,FVAL1,FDIFF1
        593 |      EQUIVALENCE   (KK(1),KKK)
        594 |C  *****************************************************************
        595 |C        1.0 LOCATE BEGINNING OF 'GRIB' MESSAGE
        596 |C             FIND 'GRIB' CHARACTERS
        597 |C        2.0  USE COUNTS IN EACH DESCRIPTION SEC   TO DETERMINE
        598 |C             IF '7777' IS IN PROPER PLACE.
        599 |C        3.0  PARSE PRODUCT DEFINITION SECTION.
        600 |C        4.0  PARSE GRID DESCRIPTION SEC   (IF INCLUDED)
        601 |C        5.0  PARSE BIT MAP SEC   (IF INCLUDED)
        602 |C        6.0  USING INFORMATION FROM PRODUCT DEFINITION, GRID
        603 |C                  DESCRIPTION, AND BIT MAP SECTIONS.. EXTRACT
        604 |C                  DATA AND PLACE INTO PROPER ARRAY.
        605 |C  *******************************************************************
        606 |C
        607 |C                      MAIN DRIVER
        608 |C
        609 |C  *******************************************************************
        610 |      KPTR(10) = 0
        611 |C                  SEE IF PROPER 'GRIB' KEY EXISTS, THEN
        612 |C                  USING SEC   COUNTS, DETERMINE IF '7777'
        613 |C                  IS IN THE PROPER LOCATION
        614 |C
        615 |      CALL FI631(MSGA,KPTR,KPDS,KRET)
        616 |      IF(KRET.NE.0) THEN
        617 |          GO TO 900
        618 |      END IF
        619 |C     PRINT *,'FI631 KPTR',(KPTR(I),I=1,16)
        620 |C
        621 |C                  PARSE PARAMETERS FROM PRODUCT DESCRIPTION SECTION
        622 |C
        623 |      CALL FI632(MSGA,KPTR,KPDS,KRET)
        624 |      IF(KRET.NE.0) THEN
        625 |          GO TO 900
        626 |      END IF
        627 |C     PRINT *,'FI632 KPTR',(KPTR(I),I=1,16)
        628 |C
        629 |C                  IF AVAILABLE, EXTRACT NEW GRID DESCRIPTION
        630 |C
        631 |      IF (IAND(KPDS(4),128).NE.0) THEN
        632 |          CALL FI633(MSGA,KPTR,KGDS,KRET)
        633 |          IF(KRET.NE.0) THEN
        634 |              GO TO 900
        635 |          END IF
        636 |C         PRINT *,'FI633 KPTR',(KPTR(I),I=1,16)
        637 |      END IF
        638 |C
        639 |C                  EXTRACT OR GENERATE BIT MAP
        640 |C
        641 |      CALL FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
        642 |      IF (KRET.NE.0) THEN
        643 |        IF (KRET.NE.9) THEN
        644 |          GO TO 900
        645 |        END IF
        646 |      END IF
        647 |C     PRINT *,'FI634 KPTR',(KPTR(I),I=1,16)
        648 |C
        649 |C                  USING INFORMATION FROM PDS, BMS AND BIT DATA SEC  ,
        650 |C                  EXTRACT AND SAVE IN GRIB GRID, ALL DATA ENTRIES.
        651 |C
        652 |      IF (KPDS(18).EQ.1) THEN
        653 |          CALL FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
        654 |          IF (KPTR(3).EQ.50) THEN
        655 |C
        656 |C                     PDS EQUAL 50 BYTES
        657 |C                        THEREFORE SOMETHING SPECIAL IS GOING ON
        658 |C
        659 |C                        IN THIS CASE 2ND DIFFERENCE PACKING
        660 |C                                NEEDS TO BE UNDONE.
        661 |C
        662 |C                   EXTRACT FIRST VALUE FROM BYTE 41-44 PDS
        663 |C                              KPTR(9) CONTAINS OFFSET TO START OF
        664 |C                              GRIB MESSAGE.
        665 |C                   EXTRACT FIRST FIRST-DIFFERENCE FROM BYTES 45-48 PDS
        666 |C
        667 |C                  AND EXTRACT SCALE FACTOR (E) TO UNDO 2**E
        668 |C                  THAT WAS APPLIED PRIOR TO 2ND ORDER PACKING
        669 |C                  AND PLACED IN PDS BYTES 49-51
        670 |C                  FACTOR IS A SIGNED TWO BYTE INTEGER
        671 |C
        672 |C                  ALSO NEED THE DECIMAL SCALING FROM PDS(27-28)
        673 |C                  (AVAILABLE IN KPDS(22) FROM UNPACKER)
        674 |C                  TO UNDO THE DECIMAL SCALING APPLIED TO THE
        675 |C                  SECOND DIFFERENCES DURING UNPACKING.
        676 |C                  SECOND DIFFS ALWAYS PACKED WITH 0 DECIMAL SCALE
        677 |C                  BUT UNPACKER DOESNT KNOW THAT.
        678 |C
        679 |C             CALL GBYTE  (MSGA,FVAL1,KPTR(9)+384,32)
        680 |C
        681 |C         NOTE INTEGERS, CHARACTERS AND EQUIVALENCES
        682 |C         DEFINED ABOVE TO MAKE THIS KKK EXTRACTION
        683 |C         WORK AND LINE UP ON WORD BOUNDARIES
        684 |C
        685 |          CALL GBYTE (MSGA,KKK,KPTR(9)+384,32)
        686 |C
        687 |C       THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
        688 |C       TO THE FLOATING POINT USED ON YOUR MACHINE.
        689 |C
        690 |C       1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
        691 |C       LW = 4 OR 8; IF 8 MAY BE A CRAY
        692 |C
        693 |              CALL W3FI01(LW)
        694 |              IF (LW.EQ.4) THEN
        695 |                  CALL GBYTE (KK,JSGN,0,1)
        696 |                  CALL GBYTE (KK,JEXP,1,7)
        697 |                  CALL GBYTE (KK,IFR,8,24)
        698 |              ELSE
        699 |                  CALL GBYTE (KK,JSGN,32,1)
        700 |                  CALL GBYTE (KK,JEXP,33,7)
        701 |                  CALL GBYTE (KK,IFR,40,24)
        702 |              ENDIF
        703 |C
        704 |              IF (IFR.EQ.0) THEN
        705 |                  REALKK = 0.0
        706 |              ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
        707 |                  REALKK = 0.0
        708 |              ELSE
        709 |                  REALKK = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
        710 |                  IF (JSGN.NE.0) REALKK = -REALKK
        711 |              END IF
        712 |              FVAL1 = REALKK
        713 |C
        714 |C             CALL GBYTE  (MSGA,FDIFF1,KPTR(9)+416,32)
        715 |C          (REPLACED BY FOLLOWING EXTRACTION)
        716 |C
        717 |              CALL GBYTE (MSGA,KKK,KPTR(9)+416,32)
        718 |C
        719 |C       THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
        720 |C       TO THE FLOATING POINT USED ON YOUR MACHINE.
        721 |C
        722 |C       1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
        723 |C       LW = 4 OR 8; IF 8 MAY BE A CRAY
        724 |C
        725 |              CALL W3FI01(LW)
        726 |              IF (LW.EQ.4) THEN
        727 |                  CALL GBYTE (KK,JSGN,0,1)
        728 |                  CALL GBYTE (KK,JEXP,1,7)
        729 |                  CALL GBYTE (KK,IFR,8,24)
        730 |              ELSE
        731 |                  CALL GBYTE (KK,JSGN,32,1)
        732 |                  CALL GBYTE (KK,JEXP,33,7)
        733 |                  CALL GBYTE (KK,IFR,40,24)
        734 |              ENDIF
        735 |C
        736 |              IF (IFR.EQ.0) THEN
        737 |                  REALKK = 0.0
        738 |              ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
        739 |                  REALKK = 0.0
        740 |              ELSE
        741 |                  REALKK = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
        742 |                  IF (JSGN.NE.0) REALKK = -REALKK
        743 |              END IF
        744 |              FDIFF1 = REALKK
        745 |C
        746 |              CALL GBYTE  (MSGA,ISIGN,KPTR(9)+448,1)
        747 |              CALL GBYTE  (MSGA,ISCAL2,KPTR(9)+449,15)
        748 |              IF(ISIGN.GT.0) THEN
        749 |                  ISCAL2 = - ISCAL2
        750 |              ENDIF
        751 |C             PRINT *,'DELTA POINT 1-',FVAL1
        752 |C             PRINT *,'DELTA POINT 2-',FDIFF1
        753 |C             PRINT *,'DELTA POINT 3-',ISCAL2
        754 |              NPTS  = KPTR(10)
        755 |C             WRITE (6,FMT='(''  2ND DIFF POINTS IN FIELD = '',/,
        756 |C    &         10(3X,10F12.2,/))') (DATA(I),I=1,NPTS)
        757 |C             PRINT *,'DELTA POINT 4-',KPDS(22)
        758 |              CALL W3FI83 (DATA,NPTS,FVAL1,FDIFF1,
        759 |     &                            ISCAL2,KPDS(22),KPDS,KGDS)
        760 |C             WRITE (6,FMT='(''  2ND DIFF EXPANDED POINTS IN FIELD = '',
        761 |C    &            /,10(3X,10F12.2,/))') (DATA(I),I=1,NPTS)
        762 |C             WRITE (6,FMT='(''  END OF ARRAY IN FIELD = '',/,
        763 |C    &         10(3X,10F12.2,/))') (DATA(I),I=NPTS-5,NPTS)
        764 |          END IF
        765 |      ELSE
        766 |C         PRINT *,'FI635 NOT PROGRAMMED FOR EDITION NR',KPDS(18)
        767 |          KRET   = 7
        768 |      END IF
        769 |C
        770 |  900 RETURN
        771 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-584.21$  0-1.45  0-653.47  0-758.28
 
fdiff1                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-592.34$  0-744.15@  0-758.44
 
fi631                            External Subroutine
                                 0-615.12
 
fi632                            External Subroutine
                                 0-623.12
 
fi633                            External Subroutine
                                 0-632.16
 
fi634                            External Subroutine
                                 0-641.12
 
fi635                            External Subroutine
                                 0-653.16
 
float                            Pure Intrinsic
                                 0-709.28  0-741.28
 
fval1                            Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-592.28$  0-712.15@  0-758.38
 
gbyte                            External Subroutine
                                 0-685.16  0-695.24  0-696.24  0-697.24  0-699.24  0-700.24  0-701.24  0-717.20  0-727.24  0-728.24
                                 0-729.24  0-731.24  0-732.24  0-733.24  0-746.20  0-747.20
 
iand                             Pure Intrinsic
                                 0-631.11
 
ifr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-590.35$  0-697.34  0-701.34  0-704.19  0-706.38  0-709.34  0-729.34  0-733.34  0-736.19  0-738.38
                                 0-741.34
 
iscal2                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-747.33  0-749.19@  0-749.30  0-759.35
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-746.33  0-748.18
 
jexp                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-590.30$  0-696.34  0-700.34  0-706.24  0-709.50  0-728.34  0-732.34  0-738.24  0-741.50
 
jsgn                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-590.25$  0-695.34  0-699.34  0-710.23  0-727.34  0-731.34  0-742.23
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-576.21$  0-1.40  0-641.38  0-653.42
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-581.21$  0-1.35  0-632.32  0-641.33  0-653.37  0-759.56
 
kk                               Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-591.21$  0-593.22  0-695.31  0-696.31  0-697.31  0-699.31  0-700.31  0-701.31  0-727.31  0-728.31
                                 0-729.31  0-731.31  0-732.31  0-733.31
 
kkk                              Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-590.21$  0-593.28  0-685.28  0-717.32
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-579.21$  0-1.30  0-615.28  0-623.28  0-631.16  0-641.28  0-652.11  0-653.32  0-759.42  0-759.51
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-587.21$  0-1.50  0-610.7@  0-615.23  0-623.23  0-632.27  0-641.23  0-653.27  0-654.15  0-685.32
                                 0-717.36  0-746.39  0-747.40  0-754.23
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1.55  0-615.33  0-616.10  0-623.33  0-624.10  0-632.37  0-633.14  0-641.43  0-642.11  0-643.13
                                 0-653.52  0-767.11@
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-693.27  0-694.19  0-725.27  0-726.19
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-574.21$  0-1.25  0-615.18  0-623.18  0-632.22  0-641.18  0-653.22  0-685.23  0-717.27  0-746.28
                                 0-747.28
 
npts                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-590.39$  0-754.15@  0-758.33
 
realkk                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-592.21$  0-705.18@  0-707.18@  0-709.18@  0-710.32@  0-710.44  0-712.23  0-737.18@  0-739.18@
                                 0-741.18@  0-742.32@  0-742.44  0-744.24
 
w3fi01                           External Subroutine
                                 0-693.20  0-725.20
 
w3fi63                           Subroutine
                                 0-1.18$
 
w3fi83                           External Subroutine
                                 0-758.20
 
** w3fi63   === End of Compilation 1 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
        772 |      SUBROUTINE FI631(MSGA,KPTR,KPDS,KRET)
        773 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
        774 |C                .      .    .                                       .
        775 |C SUBPROGRAM:    FI631       FIND 'GRIB' CHARS & RESET POINTERS
        776 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
        777 |C
        778 |C ABSTRACT: FIND 'GRIB; CHARACTERS AND SET POINTERS TO THE NEXT
        779 |C   BYTE FOLLOWING 'GRIB'. IF THEY EXIST EXTRACT COUNTS FROM GDS AND
        780 |C   BMS. EXTRACT COUNT FROM BDS. DETERMINE IF SUM OF COUNTS ACTUALLY
        781 |C   PLACES TERMINATOR '7777' AT THE CORRECT LOCATION.
        782 |C
        783 |C PROGRAM HISTORY LOG:
        784 |C   91-09-13  CAVANAUGH
        785 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
        786 |C
        787 |C USAGE:    CALL FI631(MSGA,KPTR,KPDS,KRET)
        788 |C   INPUT ARGUMENT LIST:
        789 |C     MSGA       - GRIB FIELD - "GRIB" THRU "7777"
        790 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        791 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        792 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        793 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        794 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        795 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        796 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        797 |C          (7)   - VALUE OF CURRENT BYTE
        798 |C          (8)   - BIT POINTER
        799 |C          (9)   - GRIB START BIT NR
        800 |C         (10)   - GRIB/GRID ELEMENT COUNT
        801 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        802 |C         (12)   - BIT MAP FLAG
        803 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        804 |C         (14)   - BDS FLAGS
        805 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        806 |C
        807 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
        808 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
        809 |C          (1)   - ID OF CENTER
        810 |C          (2)   - MODEL IDENTIFICATION
        811 |C          (3)   - GRID IDENTIFICATION
        812 |C          (4)   - GDS/BMS FLAG
        813 |C          (5)   - INDICATOR OF PARAMETER
        814 |C          (6)   - TYPE OF LEVEL
        815 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        816 |C          (8)   - YEAR OF CENTURY
        817 |C          (9)   - MONTH OF YEAR
        818 |C          (10)  - DAY OF MONTH
        819 |C          (11)  - HOUR OF DAY
        820 |C          (12)  - MINUTE OF HOUR
        821 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        822 |C          (14)  - TIME RANGE 1
        823 |C          (15)  - TIME RANGE 2
        824 |C          (16)  - TIME RANGE FLAG
        825 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        826 |C     KPTR       - SEE INPUT LIST
        827 |C     KRET       - ERROR RETURN
        828 |C
        829 |C REMARKS:
        830 |C     ERROR RETURNS
        831 |C     KRET  = 1  -  NO 'GRIB'
        832 |C             2  -  NO '7777' OR MISLOCATED (BY COUNTS)
        833 |C
        834 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
        835 |C
        836 |C ATTRIBUTES:
        837 |C   LANGUAGE: FORTRAN 77
        838 |C   MACHINE:  HDS9000
        839 |C
        840 |C$$$
        841 |C
        842 |C                       INCOMING MESSAGE HOLDER
        843 |      CHARACTER*1   MSGA(*)
        844 |C                       ARRAY OF POINTERS AND COUNTERS
        845 |      INTEGER       KPTR(*)
        846 |C                       PRODUCT DESCRIPTION SECTION DATA.
        847 |      INTEGER       KPDS(*)
        848 |C
        849 |      INTEGER       KRET
        850 |C
        851 |C  ******************************************************************
        852 |      KRET = 0
        853 |C  -------------------  FIND 'GRIB' KEY
        854 |      DO 50 I = 0, 839, 8
        855 |          CALL GBYTE (MSGA,MGRIB,I,32)
        856 |          IF (MGRIB.EQ.1196575042) THEN
        857 |              KPTR(9)   = I
        858 |              GO TO 60
        859 |          END IF
        860 |   50 CONTINUE
        861 |      KRET  = 1
        862 |      RETURN
        863 |   60 CONTINUE
        864 |C  -------------FOUND 'GRIB'
        865 |C                        SKIP GRIB CHARACTERS
        866 |C     PRINT *,'FI631 GRIB AT',I
        867 |      KPTR(8)   = KPTR(9) + 32
        868 |      CALL GBYTE (MSGA,ITOTAL,KPTR(8),24)
        869 |C                    HAVE LIFTED WHAT MAY BE A MSG TOTAL BYTE COUNT
        870 |      IPOINT    = KPTR(9) + ITOTAL * 8 - 32
        871 |      CALL GBYTE (MSGA,I7777,IPOINT,32)
        872 |      IF (I7777.EQ.926365495) THEN
        873 |C                 HAVE FOUND END OF MESSAGE '7777' IN PROPER LOCATION
        874 |C                 MARK AND PROCESS AS GRIB VERSION 1 OR HIGHER
        875 |C         PRINT *,'FI631 7777 AT',IPOINT
        876 |          KPTR(8)   = KPTR(8) + 24
        877 |          KPTR(1)   = ITOTAL
        878 |          KPTR(2)   = 8
        879 |          CALL GBYTE (MSGA,KPDS(18),KPTR(8),8)
        880 |          KPTR(8)   = KPTR(8) + 8
        881 |      ELSE
        882 |C                 CANNOT FIND END OF GRIB EDITION 1 MESSAGE
        883 |          KRET      = 2
        884 |          RETURN
        885 |      END IF
        886 |C  -------------------  PROCESS SECTION 1
        887 |C                   EXTRACT COUNT FROM PDS
        888 |C     PRINT *,'START OF PDS',KPTR(8)
        889 |      CALL GBYTE (MSGA,KPTR(3),KPTR(8),24)
        890 |      LOOK      = KPTR(8) + 56
        891 |C                   EXTRACT GDS/BMS FLAG
        892 |      CALL GBYTE (MSGA,KPDS(4),LOOK,8)
        893 |      KPTR(8)   = KPTR(8) + KPTR(3) * 8
        894 |C     PRINT *,'START OF GDS',KPTR(8)
        895 |      IF (IAND(KPDS(4),128).NE.0) THEN
        896 |C                   EXTRACT COUNT FROM GDS
        897 |          CALL GBYTE (MSGA,KPTR(4),KPTR(8),24)
        898 |          KPTR(8)   = KPTR(8) + KPTR(4) * 8
        899 |      ELSE
        900 |          KPTR(4)   = 0
        901 |      END IF
        902 |C     PRINT *,'START OF BMS',KPTR(8)
        903 |      IF (IAND(KPDS(4),64).NE.0) THEN
        904 |C                   EXTRACT COUNT FROM BMS
        905 |          CALL GBYTE (MSGA,KPTR(5),KPTR(8),24)
        906 |      ELSE
        907 |          KPTR(5)   = 0
        908 |      END IF
        909 |      KPTR(8)   = KPTR(8) + KPTR(5) * 8
        910 |C     PRINT *,'START OF BDS',KPTR(8)
        911 |C                   EXTRACT COUNT FROM BDS
        912 |      CALL GBYTE (MSGA,KPTR(6),KPTR(8),24)
        913 |C  ---------------  TEST FOR '7777'
        914 |C     PRINT *,(KPTR(KJ),KJ=1,10)
        915 |      KPTR(8)   = KPTR(8) + KPTR(6) * 8
        916 |C                   EXTRACT FOUR BYTES FROM THIS LOCATION
        917 |C     PRINT *,'FI631 LOOKING FOR 7777 AT',KPTR(8)
        918 |      CALL GBYTE (MSGA,K7777,KPTR(8),32)
        919 |      MATCH  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5) + KPTR(6) + 4
        920 |      IF (K7777.NE.926365495.OR.MATCH.NE.KPTR(1)) THEN
        921 |          KRET  = 2
        922 |      ELSE
        923 |C         PRINT *,'FI631 7777 AT',KPTR(8)
        924 |          IF (KPDS(18).EQ.0) THEN
        925 |              KPTR(1)  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5) +
        926 |     *                KPTR(6) + 4
        927 |          END IF
        928 |      END IF
        929 |C     PRINT *,'KPTR',(KPTR(I),I=1,16)
        930 |      RETURN
        931 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi631                            Subroutine
                                 0-772.18$
 
gbyte                            External Subroutine
                                 0-855.16  0-868.12  0-871.12  0-879.16  0-889.12  0-892.12  0-897.16  0-905.16  0-912.12  0-918.12
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-854.13@  0-855.34  0-857.27
 
i7777                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-871.24  0-872.11
 
iand                             Pure Intrinsic
                                 0-895.11  0-903.11
 
ipoint                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-870.7@  0-871.30
 
itotal                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-868.24  0-870.29  0-877.23
 
k7777                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-918.24  0-920.11
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-847.21$  0-772.34  0-879.28  0-892.24  0-895.16  0-903.16  0-924.15
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-845.21$  0-772.29  0-857.15@  0-867.7@  0-867.19  0-868.31  0-870.19  0-876.11@  0-876.23
                                 0-877.11@  0-878.11@  0-879.37  0-880.11@  0-880.23  0-889.24  0-889.32  0-890.19  0-893.7@
                                 0-893.19  0-893.29  0-897.28  0-897.36  0-898.11@  0-898.23  0-898.33  0-900.11@  0-905.28
                                 0-905.36  0-907.11@  0-909.7@  0-909.19  0-909.29  0-912.24  0-912.32  0-915.7@  0-915.19  0-915.29
                                 0-918.30  0-919.16  0-919.26  0-919.36  0-919.46  0-919.56  0-920.42  0-925.15@  0-925.26  0-925.36
                                 0-925.46  0-925.56  0-926.23
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-849.21$  0-772.39  0-852.7@  0-861.7@  0-883.11@  0-921.11@
 
look                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-890.7@  0-892.32
 
match                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-919.7@  0-920.33
 
mgrib                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-855.28  0-856.15
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-843.21$  0-772.24  0-855.23  0-868.19  0-871.19  0-879.23  0-889.19  0-892.19  0-897.23  0-905.23
                                 0-912.19  0-918.19
 
** fi631   === End of Compilation 2 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
        932 |      SUBROUTINE FI632(MSGA,KPTR,KPDS,KRET)
        933 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
        934 |C                .      .    .                                       .
        935 |C SUBPROGRAM:    FI632       GATHER INFO FROM PRODUCT DEFINITION SEC
        936 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
        937 |C
        938 |C ABSTRACT: EXTRACT INFORMATION FROM THE PRODUCT DESCRIPTION
        939 |C   SEC  , AND GENERATE LABEL INFORMATION TO PERMIT STORAGE
        940 |C   IN OFFICE NOTE 84 FORMAT.
        941 |C
        942 |C PROGRAM HISTORY LOG:
        943 |C   91-09-13  CAVANAUGH
        944 |C   93-12-08  CAVANAUGH   CORRECTED TEST FOR EDITION NUMBER INSTEAD
        945 |C                         OF VERSION NUMBER
        946 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
        947 |C   99-01-20  BALDWIN     MODIFIED TO HANDLE GRID 237
        948 |C
        949 |C USAGE:    CALL FI632(MSGA,KPTR,KPDS,KRET)
        950 |C   INPUT ARGUMENT LIST:
        951 |C     MSGA      - ARRAY CONTAINING GRIB MESSAGE
        952 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        953 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        954 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        955 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        956 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        957 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        958 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        959 |C          (7)   - VALUE OF CURRENT BYTE
        960 |C          (8)   - BIT POINTER
        961 |C          (9)   - GRIB START BIT NR
        962 |C         (10)   - GRIB/GRID ELEMENT COUNT
        963 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        964 |C         (12)   - BIT MAP FLAG
        965 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        966 |C         (14)   - BDS FLAGS
        967 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        968 |C
        969 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
        970 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
        971 |C          (1)   - ID OF CENTER
        972 |C          (2)   - MODEL IDENTIFICATION
        973 |C          (3)   - GRID IDENTIFICATION
        974 |C          (4)   - GDS/BMS FLAG
        975 |C          (5)   - INDICATOR OF PARAMETER
        976 |C          (6)   - TYPE OF LEVEL
        977 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        978 |C          (8)   - YEAR OF CENTURY
        979 |C          (9)   - MONTH OF YEAR
        980 |C          (10)  - DAY OF MONTH
        981 |C          (11)  - HOUR OF DAY
        982 |C          (12)  - MINUTE OF HOUR
        983 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        984 |C          (14)  - TIME RANGE 1
        985 |C          (15)  - TIME RANGE 2
        986 |C          (16)  - TIME RANGE FLAG
        987 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        988 |C          (18)  -
        989 |C          (19)  -
        990 |C          (20)  - NUMBER MISSING FROM AVGS/ACCUMULATIONS
        991 |C          (21)  - CENTURY
        992 |C          (22)  - UNITS DECIMAL SCALE FACTOR
        993 |C          (23)  - SUBCENTER
        994 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        995 |C                  SEE INPUT LIST
        996 |C     KRET   - ERROR RETURN
        997 |C
        998 |C REMARKS:
        999 |C        ERROR RETURN = 0 - NO ERRORS
       1000 |C                     = 8 - TEMP GDS INDICATED, BUT NO GDS
       1001 |C
       1002 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       1003 |C
       1004 |C ATTRIBUTES:
       1005 |C   LANGUAGE: FORTRAN 77
       1006 |C   MACHINE:  HDS9000
       1007 |C
       1008 |C$$$
       1009 |C
       1010 |C                       INCOMING MESSAGE HOLDER
       1011 |      CHARACTER*1   MSGA(*)
       1012 |C
       1013 |C                       ARRAY OF POINTERS AND COUNTERS
       1014 |      INTEGER       KPTR(*)
       1015 |C                       PRODUCT DESCRIPTION SECTION ENTRIES
       1016 |      INTEGER       KPDS(*)
       1017 |C
       1018 |      INTEGER       KRET
       1019 |C  -------------------  PROCESS SECTION 1
       1020 |      KPTR(8)  = KPTR(9) + KPTR(2) * 8 + 24
       1021 |C  BYTE 4
       1022 |C                   PARAMETER TABLE VERSION NR
       1023 |          CALL GBYTE (MSGA,KPDS(19),KPTR(8),8)
       1024 |          KPTR(8)   = KPTR(8) + 8
       1025 |C  BYTE 5           IDENTIFICATION OF CENTER
       1026 |      CALL GBYTE (MSGA,KPDS(1),KPTR(8),8)
       1027 |      KPTR(8)   = KPTR(8) + 8
       1028 |C  BYTE 6
       1029 |C                       GET GENERATING PROCESS ID NR
       1030 |      CALL GBYTE (MSGA,KPDS(2),KPTR(8),8)
       1031 |      KPTR(8)   = KPTR(8) + 8
       1032 |C  BYTE 7
       1033 |C                      GRID DEFINITION
       1034 |      CALL GBYTE (MSGA,KPDS(3),KPTR(8),8)
       1035 |      KPTR(8)   = KPTR(8) + 8
       1036 |C  BYTE 8
       1037 |C                      GDS/BMS FLAGS
       1038 |C     CALL GBYTE (MSGA,KPDS(4),KPTR(8),8)
       1039 |      KPTR(8)   = KPTR(8) + 8
       1040 |C  BYTE 9
       1041 |C                      INDICATOR OF PARAMETER
       1042 |      CALL GBYTE (MSGA,KPDS(5),KPTR(8),8)
       1043 |      KPTR(8)   = KPTR(8) + 8
       1044 |C  BYTE 10
       1045 |C                      TYPE OF LEVEL
       1046 |      CALL GBYTE (MSGA,KPDS(6),KPTR(8),8)
       1047 |      KPTR(8)   = KPTR(8) + 8
       1048 |C  BYTE 11,12
       1049 |C                      HEIGHT/PRESSURE
       1050 |      CALL GBYTE (MSGA,KPDS(7),KPTR(8),16)
       1051 |      KPTR(8)   = KPTR(8) + 16
       1052 |C  BYTE 13
       1053 |C                      YEAR OF CENTURY
       1054 |      CALL GBYTE (MSGA,KPDS(8),KPTR(8),8)
       1055 |      KPTR(8)   = KPTR(8) + 8
       1056 |C  BYTE 14
       1057 |C                      MONTH OF YEAR
       1058 |      CALL GBYTE (MSGA,KPDS(9),KPTR(8),8)
       1059 |      KPTR(8)   = KPTR(8) + 8
       1060 |C  BYTE 15
       1061 |C                      DAY OF MONTH
       1062 |      CALL GBYTE (MSGA,KPDS(10),KPTR(8),8)
       1063 |      KPTR(8)   = KPTR(8) + 8
       1064 |C  BYTE 16
       1065 |C                      HOUR OF DAY
       1066 |      CALL GBYTE (MSGA,KPDS(11),KPTR(8),8)
       1067 |      KPTR(8)   = KPTR(8) + 8
       1068 |C  BYTE 17
       1069 |C                      MINUTE
       1070 |      CALL GBYTE (MSGA,KPDS(12),KPTR(8),8)
       1071 |      KPTR(8)   = KPTR(8) + 8
       1072 |C  BYTE 18
       1073 |C                      INDICATOR TIME UNIT RANGE
       1074 |      CALL GBYTE (MSGA,KPDS(13),KPTR(8),8)
       1075 |      KPTR(8)   = KPTR(8) + 8
       1076 |C  BYTE 19
       1077 |C                      P1 - PERIOD OF TIME
       1078 |      CALL GBYTE (MSGA,KPDS(14),KPTR(8),8)
       1079 |      KPTR(8)   = KPTR(8) + 8
       1080 |C  BYTE 20
       1081 |C                      P2 - PERIOD OF TIME
       1082 |      CALL GBYTE (MSGA,KPDS(15),KPTR(8),8)
       1083 |      KPTR(8)   = KPTR(8) + 8
       1084 |C  BYTE 21
       1085 |C                      TIME RANGE INDICATOR
       1086 |      CALL GBYTE (MSGA,KPDS(16),KPTR(8),8)
       1087 |      KPTR(8)   = KPTR(8) + 8
       1088 |C
       1089 |C     IF TIME RANGE INDICATOR IS 10, P1 IS PACKED IN
       1090 |C     PDS BYTES 19-20
       1091 |C
       1092 |      IF (KPDS(16).EQ.10) THEN
       1093 |          KPDS(14)  = KPDS(14) * 256 + KPDS(15)
       1094 |          KPDS(15)  = 0
       1095 |      END IF
       1096 |C  BYTE 22,23
       1097 |C                      NUMBER INCLUDED IN AVERAGE
       1098 |      CALL GBYTE (MSGA,KPDS(17),KPTR(8),16)
       1099 |      KPTR(8)   = KPTR(8) + 16
       1100 |C  BYTE 24
       1101 |C                      NUMBER MISSING FROM AVERAGES/ACCUMULATIONS
       1102 |      CALL GBYTE (MSGA,KPDS(20),KPTR(8),8)
       1103 |      KPTR(8)   = KPTR(8) + 8
       1104 |C  BYTE 25
       1105 |C                      IDENTIFICATION OF CENTURY
       1106 |      CALL GBYTE (MSGA,KPDS(21),KPTR(8),8)
       1107 |      KPTR(8)   = KPTR(8) + 8
       1108 |      IF (KPTR(3).GT.25) THEN
       1109 |C  BYTE 26              SUB CENTER NUMBER
       1110 |          CALL GBYTE (MSGA,KPDS(23),KPTR(8),8)
       1111 |          KPTR(8)   = KPTR(8) + 8
       1112 |          IF (KPTR(3).GE.28) THEN
       1113 |C  BYTE 27-28
       1114 |C                          UNITS DECIMAL SCALE FACTOR
       1115 |              CALL GBYTE (MSGA,ISIGN,KPTR(8),1)
       1116 |              KPTR(8)  = KPTR(8) + 1
       1117 |              CALL GBYTE (MSGA,IDEC,KPTR(8),15)
       1118 |              KPTR(8)  = KPTR(8) + 15
       1119 |              IF (ISIGN.GT.0) THEN
       1120 |                  KPDS(22)  = - IDEC
       1121 |              ELSE
       1122 |                  KPDS(22)  = IDEC
       1123 |              END IF
       1124 |              ISIZ  = KPTR(3) - 28
       1125 |              IF (ISIZ.LE.12) THEN
       1126 |C  BYTE  29
       1127 |                  CALL GBYTE (MSGA,KPDS(24),KPTR(8)+8,8)
       1128 |C  BYTE  30
       1129 |                  CALL GBYTE (MSGA,KPDS(25),KPTR(8)+16,8)
       1130 |C  BYTES 31-40                  CURRENTLY RESERVED FOR FUTURE USE
       1131 |                  KPTR(8)  = KPTR(8) + ISIZ * 8
       1132 |              ELSE
       1133 |C  BYTE  29
       1134 |                  CALL GBYTE (MSGA,KPDS(24),KPTR(8)+8,8)
       1135 |C  BYTE  30
       1136 |                  CALL GBYTE (MSGA,KPDS(25),KPTR(8)+16,8)
       1137 |C  BYTES 31-40                  CURRENTLY RESERVED FOR FUTURE USE
       1138 |                  KPTR(8)  = KPTR(8) + 12 * 8
       1139 |C  BYTES 41 - N                 LOCAL USE DATA
       1140 |                  CALL W3FI01(LW)
       1141 |                  MWDBIT  = LW * 8
       1142 |                  ISIZ    = KPTR(3) - 40
       1143 |                  ITER    = ISIZ / LW
       1144 |                  IF (MOD(ISIZ,LW).NE.0) ITER = ITER + 1
       1145 |                  CALL GBYTES (MSGA,KPDS(36),KPTR(8),MWDBIT,0,ITER)
       1146 |                  KPTR(8)  = KPTR(8) + ISIZ * 8
       1147 |              END IF
       1148 |          END IF
       1149 |      END IF
       1150 |C  ----------- TEST FOR NEW GRID
       1151 |      IF (IAND(KPDS(4),128).NE.0) THEN
       1152 |          IF (IAND(KPDS(4),64).NE.0) THEN
       1153 |              IF (KPDS(3).NE.255) THEN
       1154 |                  IF (KPDS(3).GE.21.AND.KPDS(3).LE.26)THEN
       1155 |                      RETURN
       1156 |                  ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44)THEN
       1157 |                      RETURN
       1158 |                  ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       1159 |                      RETURN
       1160 |                  END IF
       1161 |                  IF (KPDS(1).EQ.7) THEN
       1162 |                      IF (KPDS(3).GE.2.AND.KPDS(3).LE.3) THEN
       1163 |                      ELSE IF (KPDS(3).GE.5.AND.KPDS(3).LE.6) THEN
       1164 |                      ELSE IF (KPDS(3).EQ.8) THEN
       1165 |                      ELSE IF (KPDS(3).GE.27.AND.KPDS(3).LE.34) THEN
       1166 |                      ELSE IF (KPDS(3).EQ.50) THEN
       1167 |                      ELSE IF (KPDS(3).EQ.53) THEN
       1168 |                      ELSE IF (KPDS(3).GE.70.AND.KPDS(3).LE.77) THEN
       1169 |                      ELSE IF (KPDS(3).EQ.98) THEN
       1170 |                      ELSE IF (KPDS(3).GE.100.AND.KPDS(3).LE.105) THEN
       1171 |                      ELSE IF (KPDS(3).EQ.126) THEN
       1172 |                      ELSE IF (KPDS(3).EQ.196) THEN
       1173 |                      ELSE IF (KPDS(3).GE.201.AND.KPDS(3).LE.237) THEN
       1174 |                      ELSE
       1175 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1176 |C    *                    ' NMC WITHOUT A GRID DESCRIPTION SECTION'
       1177 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1178 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1179 |C                         PRINT *,' W/NMC42)'
       1180 |                      END IF
       1181 |                  ELSE IF (KPDS(1).EQ.98) THEN
       1182 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.16) THEN
       1183 |                      ELSE
       1184 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1185 |C    *                    ' ECMWF WITHOUT A GRID DESCRIPTION SECTION'
       1186 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1187 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1188 |C                         PRINT *,' W/NMC42)'
       1189 |                      END IF
       1190 |                  ELSE IF (KPDS(1).EQ.74) THEN
       1191 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       1192 |                      ELSE IF (KPDS(3).GE.21.AND.KPDS(3).LE.26)THEN
       1193 |                      ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       1194 |                      ELSE IF (KPDS(3).GE.70.AND.KPDS(3).LE.77) THEN
       1195 |                      ELSE
       1196 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1197 |C    *                            ' U.K. MET OFFICE, BRACKNELL',
       1198 |C    *                            ' WITHOUT A GRID DESCRIPTION SECTION'
       1199 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1200 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1201 |C                         PRINT *,' W/NMC42)'
       1202 |                      END IF
       1203 |                  ELSE IF (KPDS(1).EQ.58) THEN
       1204 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       1205 |                      ELSE
       1206 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1207 |C    *                      ' FNOC WITHOUT A GRID DESCRIPTION SECTION'
       1208 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1209 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1210 |C                         PRINT *,' W/NMC42)'
       1211 |                      END IF
       1212 |                  END IF
       1213 |              END IF
       1214 |          END IF
       1215 |      END IF
       1216 |      RETURN
       1217 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi632                            Subroutine
                                 0-932.18$
 
gbyte                            External Subroutine
                                 0-1023.16  0-1026.12  0-1030.12  0-1034.12  0-1042.12  0-1046.12  0-1050.12  0-1054.12  0-1058.12
                                 0-1062.12  0-1066.12  0-1070.12  0-1074.12  0-1078.12  0-1082.12  0-1086.12  0-1098.12  0-1102.12
                                 0-1106.12  0-1110.16  0-1115.20  0-1117.20  0-1127.24  0-1129.24  0-1134.24  0-1136.24
 
gbytes                           External Subroutine
                                 0-1145.24
 
iand                             Pure Intrinsic
                                 0-1151.11  0-1152.15
 
idec                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1117.32  0-1120.33  0-1122.31
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1115.32  0-1119.19
 
isiz                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1124.15@  0-1125.19  0-1131.40  0-1142.19@  0-1143.29  0-1144.27  0-1146.40
 
iter                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1143.19@  0-1144.42@  0-1144.49  0-1145.63
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1016.21$  0-932.34  0-1023.28  0-1026.24  0-1030.24  0-1034.24  0-1042.24  0-1046.24  0-1050.24
                                 0-1054.24  0-1058.24  0-1062.24  0-1066.24  0-1070.24  0-1074.24  0-1078.24  0-1082.24  0-1086.24
                                 0-1092.11  0-1093.11@  0-1093.23  0-1093.40  0-1094.11@  0-1098.24  0-1102.24  0-1106.24  0-1110.28
                                 0-1120.19@  0-1122.19@  0-1127.36  0-1129.36  0-1134.36  0-1136.36  0-1145.37  0-1151.16  0-1152.20
                                 0-1153.19  0-1154.23  0-1154.41  0-1156.28  0-1156.46  0-1158.28  0-1158.46  0-1161.23  0-1162.27
                                 0-1162.44  0-1163.32  0-1163.49  0-1164.32  0-1165.32  0-1165.50  0-1166.32  0-1167.32  0-1168.32
                                 0-1168.50  0-1169.32  0-1170.32  0-1170.51  0-1171.32  0-1172.32  0-1173.32  0-1173.51  0-1181.28
                                 0-1182.27  0-1182.44  0-1190.28  0-1191.27  0-1191.44  0-1192.32  0-1192.50  0-1193.32  0-1193.50
                                 0-1194.32  0-1194.50  0-1203.28  0-1204.27  0-1204.44
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1014.21$  0-932.29  0-1020.7@  0-1020.18  0-1020.28  0-1023.37  0-1024.11@  0-1024.23  0-1026.32
                                 0-1027.7@  0-1027.19  0-1030.32  0-1031.7@  0-1031.19  0-1034.32  0-1035.7@  0-1035.19  0-1039.7@
                                 0-1039.19  0-1042.32  0-1043.7@  0-1043.19  0-1046.32  0-1047.7@  0-1047.19  0-1050.32  0-1051.7@
                                 0-1051.19  0-1054.32  0-1055.7@  0-1055.19  0-1058.32  0-1059.7@  0-1059.19  0-1062.33  0-1063.7@
                                 0-1063.19  0-1066.33  0-1067.7@  0-1067.19  0-1070.33  0-1071.7@  0-1071.19  0-1074.33  0-1075.7@
                                 0-1075.19  0-1078.33  0-1079.7@  0-1079.19  0-1082.33  0-1083.7@  0-1083.19  0-1086.33  0-1087.7@
                                 0-1087.19  0-1098.33  0-1099.7@  0-1099.19  0-1102.33  0-1103.7@  0-1103.19  0-1106.33  0-1107.7@
                                 0-1107.19  0-1108.11  0-1110.37  0-1111.11@  0-1111.23  0-1112.15  0-1115.38  0-1116.15@  0-1116.26
                                 0-1117.37  0-1118.15@  0-1118.26  0-1124.23  0-1127.45  0-1129.45  0-1131.19@  0-1131.30  0-1134.45
                                 0-1136.45  0-1138.19@  0-1138.30  0-1142.29  0-1145.46  0-1146.19@  0-1146.30
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1018.21$  0-932.39
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1140.31  0-1141.29  0-1143.36  0-1144.32
 
mod                              Pure Intrinsic
                                 0-1144.23
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-1011.21$  0-932.24  0-1023.23  0-1026.19  0-1030.19  0-1034.19  0-1042.19  0-1046.19  0-1050.19
                                 0-1054.19  0-1058.19  0-1062.19  0-1066.19  0-1070.19  0-1074.19  0-1078.19  0-1082.19  0-1086.19
                                 0-1098.19  0-1102.19  0-1106.19  0-1110.23  0-1115.27  0-1117.27  0-1127.31  0-1129.31  0-1134.31
                                 0-1136.31  0-1145.32
 
mwdbit                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1141.19@  0-1145.54
 
w3fi01                           External Subroutine
                                 0-1140.24
 
** fi632   === End of Compilation 3 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       1218 |      SUBROUTINE FI633(MSGA,KPTR,KGDS,KRET)
       1219 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       1220 |C                .      .    .                                       .
       1221 |C SUBPROGRAM:    FI633       EXTRACT INFO FROM GRIB-GDS
       1222 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       1223 |C
       1224 |C ABSTRACT: EXTRACT INFORMATION ON UNLISTED GRID TO ALLOW
       1225 |C   CONVERSION TO OFFICE NOTE 84 FORMAT.
       1226 |C
       1227 |C PROGRAM HISTORY LOG:
       1228 |C   91-09-13  CAVANAUGH
       1229 |C   95-03-20  M.BALDWIN   FI633 MODIFICATION TO GET
       1230 |C                         DATA REP TYPES [KGDS(1)] 201 AND 202 TO WORK.
       1231 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       1232 |C   98-09-08  BALDWIN     ADD DATA REP TYPE [KGDS(1)] 203
       1233 |C
       1234 |C
       1235 |C USAGE:    CALL FI633(MSGA,KPTR,KGDS,KRET)
       1236 |C   INPUT ARGUMENT LIST:
       1237 |C     MSGA      - ARRAY CONTAINING GRIB MESSAGE
       1238 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1239 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       1240 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       1241 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       1242 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       1243 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       1244 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       1245 |C          (7)   - VALUE OF CURRENT BYTE
       1246 |C          (8)   - BIT POINTER
       1247 |C          (9)   - GRIB START BIT NR
       1248 |C         (10)   - GRIB/GRID ELEMENT COUNT
       1249 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       1250 |C         (12)   - BIT MAP FLAG
       1251 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       1252 |C         (14)   - BDS FLAGS
       1253 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       1254 |C
       1255 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       1256 |C     KGDS     - ARRAY CONTAINING GDS ELEMENTS.
       1257 |C          (1)   - DATA REPRESENTATION TYPE
       1258 |C          (19)  - NUMBER OF VERTICAL COORDINATE PARAMETERS
       1259 |C          (20)  - OCTET NUMBER OF THE LIST OF VERTICAL COORDINATE
       1260 |C                  PARAMETERS
       1261 |C                  OR
       1262 |C                  OCTET NUMBER OF THE LIST OF NUMBERS OF POINTS
       1263 |C                  IN EACH ROW
       1264 |C                  OR
       1265 |C                  255 IF NEITHER ARE PRESENT
       1266 |C          (21)  - FOR GRIDS WITH PL, NUMBER OF POINTS IN GRID
       1267 |C          (22)  - NUMBER OF WORDS IN EACH ROW
       1268 |C       LATITUDE/LONGITUDE GRIDS
       1269 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
       1270 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
       1271 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1272 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1273 |C          (6)   - RESOLUTION FLAG
       1274 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
       1275 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
       1276 |C          (9)   - DI LONGITUDINAL DIRECTION OF INCREMENT
       1277 |C          (10)  - DJ LATITUDINAL DIRECTION INCREMENT
       1278 |C          (11)  - SCANNING MODE FLAG
       1279 |C       POLAR STEREOGRAPHIC GRIDS
       1280 |C          (2)   - N(I) NR POINTS ALONG LAT CIRCLE
       1281 |C          (3)   - N(J) NR POINTS ALONG LON CIRCLE
       1282 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1283 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1284 |C          (6)   - RESERVED
       1285 |C          (7)   - LOV GRID ORIENTATION
       1286 |C          (8)   - DX - X DIRECTION INCREMENT
       1287 |C          (9)   - DY - Y DIRECTION INCREMENT
       1288 |C          (10)  - PROJECTION CENTER FLAG
       1289 |C          (11)  - SCANNING MODE
       1290 |C       SPHERICAL HARMONIC COEFFICIENTS
       1291 |C          (2)   - J PENTAGONAL RESOLUTION PARAMETER
       1292 |C          (3)   - K      "          "         "
       1293 |C          (4)   - M      "          "         "
       1294 |C          (5)   - REPRESENTATION TYPE
       1295 |C          (6)   - COEFFICIENT STORAGE MODE
       1296 |C       MERCATOR GRIDS
       1297 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
       1298 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
       1299 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1300 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1301 |C          (6)   - RESOLUTION FLAG
       1302 |C          (7)   - LA(2) LATITUDE OF LAST GRID POINT
       1303 |C          (8)   - LO(2) LONGITUDE OF LAST GRID POINT
       1304 |C          (9)   - LATIN - LATITUDE OF PROJECTION INTERSECTION
       1305 |C          (10)  - RESERVED
       1306 |C          (11)  - SCANNING MODE FLAG
       1307 |C          (12)  - LONGITUDINAL DIR GRID LENGTH
       1308 |C          (13)  - LATITUDINAL DIR GRID LENGTH
       1309 |C       LAMBERT CONFORMAL GRIDS
       1310 |C          (2)   - NX NR POINTS ALONG X-AXIS
       1311 |C          (3)   - NY NR POINTS ALONG Y-AXIS
       1312 |C          (4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
       1313 |C          (5)   - LO1 LON OF ORIGIN (LOWER LEFT)
       1314 |C          (6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
       1315 |C          (7)   - LOV - ORIENTATION OF GRID
       1316 |C          (8)   - DX - X-DIR INCREMENT
       1317 |C          (9)   - DY - Y-DIR INCREMENT
       1318 |C          (10)  - PROJECTION CENTER FLAG
       1319 |C          (11)  - SCANNING MODE FLAG
       1320 |C          (12)  - LATIN 1 - FIRST LAT FROM POLE OF SECANT CONE INTER
       1321 |C          (13)  - LATIN 2 - SECOND LAT FROM POLE OF SECANT CONE INTER
       1322 |C       STAGGERED ARAKAWA ROTATED LAT/LON GRIDS (203)
       1323 |C          (2)   - N(I) NR POINTS ON ROTATED LATITUDE CIRCLE
       1324 |C          (3)   - N(J) NR POINTS ON ROTATED LONGITUDE MERIDIAN
       1325 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1326 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1327 |C          (6)   - RESOLUTION FLAG
       1328 |C          (7)   - LA(2) LATITUDE OF CENTER
       1329 |C          (8)   - LO(2) LONGITUDE OF CENTER
       1330 |C          (9)   - DI LONGITUDINAL DIRECTION OF INCREMENT
       1331 |C          (10)  - DJ LATITUDINAL DIRECTION INCREMENT
       1332 |C          (11)  - SCANNING MODE FLAG
       1333 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1334 |C                  SEE INPUT LIST
       1335 |C     KRET       - ERROR RETURN
       1336 |C
       1337 |C REMARKS:
       1338 |C     KRET = 0
       1339 |C          = 4   - DATA REPRESENTATION TYPE NOT CURRENTLY ACCEPTABLE
       1340 |C
       1341 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       1342 |C
       1343 |C ATTRIBUTES:
       1344 |C   LANGUAGE: FORTRAN 77
       1345 |C   MACHINE:  HDS9000
       1346 |C
       1347 |C$$$
       1348 |C  ************************************************************
       1349 |C                       INCOMING MESSAGE HOLDER
       1350 |      CHARACTER*1   MSGA(*)
       1351 |C
       1352 |C                       ARRAY GDS ELEMENTS
       1353 |      INTEGER       KGDS(*)
       1354 |C                       ARRAY OF POINTERS AND COUNTERS
       1355 |      INTEGER       KPTR(*)
       1356 |C
       1357 |      INTEGER       KRET
       1358 |C  ---------------------------------------------------------------
       1359 |      KRET    = 0
       1360 |C                PROCESS GRID DEFINITION SECTION (IF PRESENT)
       1361 |C             MAKE SURE BIT POINTER IS PROPERLY SET
       1362 |      KPTR(8)  = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + 24
       1363 |      NSAVE    = KPTR(8) - 24
       1364 |C  BYTE 4
       1365 |C                   NV - NR OF VERT COORD PARAMETERS
       1366 |      CALL GBYTE (MSGA,KGDS(19),KPTR(8),8)
       1367 |      KPTR(8)  = KPTR(8) + 8
       1368 |C  BYTE 5
       1369 |C                   PV - LOCATION - SEE FM92 MANUAL
       1370 |      CALL GBYTE (MSGA,KGDS(20),KPTR(8),8)
       1371 |      KPTR(8)  = KPTR(8) + 8
       1372 |C  BYTE 6
       1373 |C                      DATA REPRESENTATION TYPE
       1374 |      CALL GBYTE (MSGA,KGDS(1),KPTR(8),8)
       1375 |      KPTR(8)   = KPTR(8) + 8
       1376 |C           BYTES 7-32 ARE GRID DEFINITION DEPENDING ON
       1377 |C           DATA REPRESENTATION TYPE
       1378 |      IF (KGDS(1).EQ.0) THEN
       1379 |          GO TO 1000
       1380 |      ELSE IF (KGDS(1).EQ.1) THEN
       1381 |          GO TO 4000
       1382 |      ELSE IF (KGDS(1).EQ.2.OR.KGDS(1).EQ.5) THEN
       1383 |          GO TO 2000
       1384 |      ELSE IF (KGDS(1).EQ.3) THEN
       1385 |          GO TO 5000
       1386 |      ELSE IF (KGDS(1).EQ.4) THEN
       1387 |          GO TO 1000
       1388 |C     ELSE IF (KGDS(1).EQ.10) THEN
       1389 |C     ELSE IF (KGDS(1).EQ.14) THEN
       1390 |C     ELSE IF (KGDS(1).EQ.20) THEN
       1391 |C     ELSE IF (KGDS(1).EQ.24) THEN
       1392 |C     ELSE IF (KGDS(1).EQ.30) THEN
       1393 |C     ELSE IF (KGDS(1).EQ.34) THEN
       1394 |      ELSE IF (KGDS(1).EQ.50) THEN
       1395 |          GO TO 3000
       1396 |C     ELSE IF (KGDS(1).EQ.60) THEN
       1397 |C     ELSE IF (KGDS(1).EQ.70) THEN
       1398 |C     ELSE IF (KGDS(1).EQ.80) THEN
       1399 |      ELSE IF (KGDS(1).EQ.201.OR.KGDS(1).EQ.202.OR.KGDS(1).EQ.203) THEN
       1400 |          GO TO 1000
       1401 |      ELSE
       1402 |C                      MARK AS GDS/ UNKNOWN DATA REPRESENTATION TYPE
       1403 |          KRET     = 4
       1404 |          RETURN
       1405 |      END IF
       1406 |C     BYTE 33-N   VERTICAL COORDINATE PARAMETERS
       1407 |C  -----------
       1408 |C     BYTES 33-42 EXTENSIONS OF GRID DEFINITION FOR ROTATION
       1409 |C                 OR STRETCHING OF THE COORDINATE SYSTEM OR
       1410 |C                 LAMBERT CONFORMAL PROJECTION.
       1411 |C     BYTE 43-N   VERTICAL COORDINATE PARAMETERS
       1412 |C  -----------
       1413 |C     BYTES 33-52 EXTENSIONS OF GRID DEFINITION FOR STRETCHED
       1414 |C                 AND ROTATED COORDINATE SYSTEM
       1415 |C     BYTE 53-N   VERTICAL COORDINATE PARAMETERS
       1416 |C  -----------
       1417 |C ************************************************************
       1418 |C  ------------------- LATITUDE/LONGITUDE GRIDS
       1419 |C  ------------------- ARAKAWA STAGGERED, SEMI-STAGGERED, OR FILLED
       1420 |C                          ROTATED LAT/LON GRIDS
       1421 |C
       1422 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG LATITUDE CIRCLE
       1423 | 1000 CONTINUE
       1424 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1425 |      KPTR(8)  = KPTR(8) + 16
       1426 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG LONG MERIDIAN
       1427 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1428 |      KPTR(8)  = KPTR(8) + 16
       1429 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1430 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1431 |      KPTR(8)  = KPTR(8) + 24
       1432 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1433 |          KGDS(4)  =  IAND(KGDS(4),8388607) * (-1)
       1434 |      END IF
       1435 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1436 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1437 |      KPTR(8)  = KPTR(8) + 24
       1438 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1439 |          KGDS(5)  =  - IAND(KGDS(5),8388607)
       1440 |      END IF
       1441 |C  ------------------- BYTE 17      RESOLUTION FLAG
       1442 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1443 |      KPTR(8)  = KPTR(8) + 8
       1444 |C  ------------------- BYTE 18-20   LATITUDE OF LAST GRID POINT
       1445 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1446 |      KPTR(8)  = KPTR(8) + 24
       1447 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1448 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1449 |      END IF
       1450 |C  ------------------- BYTE 21-23   LONGITUDE OF LAST GRID POINT
       1451 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1452 |      KPTR(8)  = KPTR(8) + 24
       1453 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1454 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1455 |      END IF
       1456 |C  ------------------- BYTE 24-25   LATITUDINAL DIR INCREMENT
       1457 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),16)
       1458 |      KPTR(8)  = KPTR(8) + 16
       1459 |C  ------------------- BYTE 26-27   IF REGULAR LAT/LON GRID
       1460 |C                                       HAVE LONGIT DIR INCREMENT
       1461 |C                                   ELSE IF GAUSSIAN GRID
       1462 |C                                       HAVE NR OF LAT CIRCLES
       1463 |C                                       BETWEEN POLE AND EQUATOR
       1464 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),16)
       1465 |      KPTR(8)  = KPTR(8) + 16
       1466 |C  ------------------- BYTE 28      SCANNING MODE FLAGS
       1467 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1468 |      KPTR(8)  = KPTR(8) + 8
       1469 |C  ------------------- BYTE 29-32   RESERVED
       1470 |C                             SKIP TO START OF BYTE 33
       1471 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),32)
       1472 |      KPTR(8)  = KPTR(8) + 32
       1473 |C  -------------------
       1474 |      GO TO 900
       1475 |C  ******************************************************************
       1476 |C            ' POLAR STEREO PROCESSING '
       1477 |C
       1478 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG X=AXIS
       1479 | 2000 CONTINUE
       1480 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1481 |      KPTR(8)  = KPTR(8) + 16
       1482 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG Y-AXIS
       1483 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1484 |      KPTR(8)  = KPTR(8) + 16
       1485 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1486 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1487 |      KPTR(8)  = KPTR(8) + 24
       1488 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1489 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1490 |      END IF
       1491 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1492 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1493 |      KPTR(8)  = KPTR(8) + 24
       1494 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1495 |          KGDS(5)  =   - IAND(KGDS(5),8388607)
       1496 |      END IF
       1497 |C  ------------------- BYTE 17      RESERVED
       1498 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1499 |      KPTR(8)  = KPTR(8) + 8
       1500 |C  ------------------- BYTE 18-20   LOV ORIENTATION OF THE GRID
       1501 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1502 |      KPTR(8)  = KPTR(8) + 24
       1503 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1504 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1505 |      END IF
       1506 |C  ------------------- BYTE 21-23   DX - THE X DIRECTION INCREMENT
       1507 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1508 |      KPTR(8)  = KPTR(8) + 24
       1509 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1510 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1511 |      END IF
       1512 |C  ------------------- BYTE 24-26   DY - THE Y DIRECTION INCREMENT
       1513 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1514 |      KPTR(8)  = KPTR(8) + 24
       1515 |      IF (IAND(KGDS(9),8388608).NE.0) THEN
       1516 |          KGDS(9)  =  - IAND(KGDS(9),8388607)
       1517 |      END IF
       1518 |C  ------------------- BYTE 27      PROJECTION CENTER FLAG
       1519 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1520 |      KPTR(8)  = KPTR(8) + 8
       1521 |C  ------------------- BYTE 28      SCANNING MODE
       1522 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1523 |      KPTR(8)  = KPTR(8) + 8
       1524 |C  ------------------- BYTE 29-32   RESERVED
       1525 |C                             SKIP TO START OF BYTE 33
       1526 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),32)
       1527 |      KPTR(8)  = KPTR(8) + 32
       1528 |C
       1529 |C  -------------------
       1530 |      GO TO 900
       1531 |C
       1532 |C  ******************************************************************
       1533 |C  ------------------- GRID DESCRIPTION FOR SPHERICAL HARMONIC COEFF.
       1534 |C
       1535 |C  ------------------- BYTE 7-8     J PENTAGONAL RESOLUTION PARAMETER
       1536 | 3000 CONTINUE
       1537 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1538 |      KPTR(8)  = KPTR(8) + 16
       1539 |C  ------------------- BYTE 9-10    K PENTAGONAL RESOLUTION PARAMETER
       1540 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1541 |      KPTR(8)  = KPTR(8) + 16
       1542 |C  ------------------- BYTE 11-12   M PENTAGONAL RESOLUTION PARAMETER
       1543 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),16)
       1544 |      KPTR(8)  = KPTR(8) + 16
       1545 |C  ------------------- BYTE 13 REPRESENTATION TYPE
       1546 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),8)
       1547 |      KPTR(8)  = KPTR(8) + 8
       1548 |C  ------------------- BYTE 14 COEFFICIENT STORAGE MODE
       1549 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1550 |      KPTR(8)  = KPTR(8) + 8
       1551 |C  -------------------        EMPTY FIELDS - BYTES 15 - 32
       1552 |C                 SET TO START OF BYTE 33
       1553 |      KPTR(8)  = KPTR(8) + 18 * 8
       1554 |      GO TO 900
       1555 |C  ******************************************************************
       1556 |C                      PROCESS MERCATOR GRIDS
       1557 |C
       1558 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG LATITUDE CIRCLE
       1559 | 4000 CONTINUE
       1560 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1561 |      KPTR(8)  = KPTR(8) + 16
       1562 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG LONG MERIDIAN
       1563 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1564 |      KPTR(8)  = KPTR(8) + 16
       1565 |C  ------------------- BYTE 11-13   LATITUE OF ORIGIN
       1566 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1567 |      KPTR(8)  = KPTR(8) + 24
       1568 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1569 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1570 |      END IF
       1571 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1572 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1573 |      KPTR(8)  = KPTR(8) + 24
       1574 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1575 |          KGDS(5)  =  - IAND(KGDS(5),8388607)
       1576 |      END IF
       1577 |C  ------------------- BYTE 17      RESOLUTION FLAG
       1578 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1579 |      KPTR(8)  = KPTR(8) + 8
       1580 |C  ------------------- BYTE 18-20   LATITUDE OF EXTREME POINT
       1581 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1582 |      KPTR(8)  = KPTR(8) + 24
       1583 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1584 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1585 |      END IF
       1586 |C  ------------------- BYTE 21-23   LONGITUDE OF EXTREME POINT
       1587 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1588 |      KPTR(8)  = KPTR(8) + 24
       1589 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1590 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1591 |      END IF
       1592 |C  ------------------- BYTE 24-26   LATITUDE OF PROJECTION INTERSECTION
       1593 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1594 |      KPTR(8)  = KPTR(8) + 24
       1595 |      IF (IAND(KGDS(9),8388608).NE.0) THEN
       1596 |          KGDS(9)  =  - IAND(KGDS(9),8388607)
       1597 |      END IF
       1598 |C  ------------------- BYTE 27   RESERVED
       1599 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1600 |      KPTR(8)  = KPTR(8) + 8
       1601 |C  ------------------- BYTE 28      SCANNING MODE
       1602 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1603 |      KPTR(8)  = KPTR(8) + 8
       1604 |C  ------------------- BYTE 29-31   LONGITUDINAL DIR INCREMENT
       1605 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),24)
       1606 |      KPTR(8)  = KPTR(8) + 24
       1607 |      IF (IAND(KGDS(12),8388608).NE.0) THEN
       1608 |          KGDS(12)  =  - IAND(KGDS(12),8388607)
       1609 |      END IF
       1610 |C  ------------------- BYTE 32-34   LATITUDINAL DIR INCREMENT
       1611 |      CALL GBYTE (MSGA,KGDS(13),KPTR(8),24)
       1612 |      KPTR(8)  = KPTR(8) + 24
       1613 |      IF (IAND(KGDS(13),8388608).NE.0) THEN
       1614 |          KGDS(13)  =  - IAND(KGDS(13),8388607)
       1615 |      END IF
       1616 |C  ------------------- BYTE 35-42   RESERVED
       1617 |C                        SKIP TO START OF BYTE 43
       1618 |      KPTR(8)  = KPTR(8) + 8 * 8
       1619 |C  -------------------
       1620 |      GO TO 900
       1621 |C  ******************************************************************
       1622 |C                      PROCESS LAMBERT CONFORMAL
       1623 |C
       1624 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG X-AXIS
       1625 | 5000 CONTINUE
       1626 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1627 |      KPTR(8)  = KPTR(8) + 16
       1628 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG Y-AXIS
       1629 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1630 |      KPTR(8)  = KPTR(8) + 16
       1631 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1632 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1633 |      KPTR(8)  = KPTR(8) + 24
       1634 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1635 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1636 |      END IF
       1637 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN (LOWER LEFT)
       1638 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1639 |      KPTR(8)  = KPTR(8) + 24
       1640 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1641 |          KGDS(5)  = - IAND(KGDS(5),8388607)
       1642 |      END IF
       1643 |C  ------------------- BYTE 17      RESOLUTION
       1644 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1645 |      KPTR(8)  = KPTR(8) + 8
       1646 |C  ------------------- BYTE 18-20   LOV -ORIENTATION OF GRID
       1647 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1648 |      KPTR(8)  = KPTR(8) + 24
       1649 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1650 |          KGDS(7)  = - IAND(KGDS(7),8388607)
       1651 |      END IF
       1652 |C  ------------------- BYTE 21-23   DX - X-DIR INCREMENT
       1653 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1654 |      KPTR(8)  = KPTR(8) + 24
       1655 |C  ------------------- BYTE 24-26   DY - Y-DIR INCREMENT
       1656 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1657 |      KPTR(8)  = KPTR(8) + 24
       1658 |C  ------------------- BYTE 27       PROJECTION CENTER FLAG
       1659 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1660 |      KPTR(8)  = KPTR(8) + 8
       1661 |C  ------------------- BYTE 28      SCANNING MODE
       1662 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1663 |      KPTR(8)  = KPTR(8) + 8
       1664 |C  ------------------- BYTE 29-31   LATIN1 - 1ST LAT FROM POLE
       1665 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),24)
       1666 |      KPTR(8)  = KPTR(8) + 24
       1667 |      IF (IAND(KGDS(12),8388608).NE.0) THEN
       1668 |          KGDS(12)  =  - IAND(KGDS(12),8388607)
       1669 |      END IF
       1670 |C  ------------------- BYTE 32-34   LATIN2 - 2ND LAT FROM POLE
       1671 |      CALL GBYTE (MSGA,KGDS(13),KPTR(8),24)
       1672 |      KPTR(8)  = KPTR(8) + 24
       1673 |      IF (IAND(KGDS(13),8388608).NE.0) THEN
       1674 |          KGDS(13)  =  - IAND(KGDS(13),8388607)
       1675 |      END IF
       1676 |C  ------------------- BYTE 35-37   LATITUDE OF SOUTHERN POLE
       1677 |      CALL GBYTE (MSGA,KGDS(14),KPTR(8),24)
       1678 |      KPTR(8)  = KPTR(8) + 24
       1679 |      IF (IAND(KGDS(14),8388608).NE.0) THEN
       1680 |          KGDS(14)  =  - IAND(KGDS(14),8388607)
       1681 |      END IF
       1682 |C  ------------------- BYTE 38-40   LONGITUDE OF SOUTHERN POLE
       1683 |      CALL GBYTE (MSGA,KGDS(15),KPTR(8),24)
       1684 |      KPTR(8)  = KPTR(8) + 24
       1685 |      IF (IAND(KGDS(15),8388608).NE.0) THEN
       1686 |          KGDS(15)  =  - IAND(KGDS(15),8388607)
       1687 |      END IF
       1688 |C  ------------------- BYTE 41-42   RESERVED
       1689 |      CALL GBYTE (MSGA,KGDS(16),KPTR(8),16)
       1690 |      KPTR(8)  = KPTR(8) + 16
       1691 |C  -------------------
       1692 |  900 CONTINUE
       1693 |C
       1694 |C                        MORE CODE FOR GRIDS WITH PL
       1695 |C
       1696 |      IF (KGDS(19).EQ.0.OR.KGDS(19).EQ.255) THEN
       1697 |        IF (KGDS(20).NE.255) THEN
       1698 |          ISUM  = 0
       1699 |          KPTR(8)  = NSAVE + (KGDS(20) - 1) * 8
       1700 |          CALL GBYTES (MSGA,KGDS(22),KPTR(8),16,0,KGDS(3))
       1701 |          DO 910 J = 1, KGDS(3)
       1702 |              ISUM  = ISUM + KGDS(21+J)
       1703 |  910     CONTINUE
       1704 |          KGDS(21)  = ISUM
       1705 |        END IF
       1706 |      END IF
       1707 |      RETURN
       1708 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi633                            Subroutine
                                 0-1218.18$
 
gbyte                            External Subroutine
                                 0-1366.12  0-1370.12  0-1374.12  0-1424.12  0-1427.12  0-1430.12  0-1436.12  0-1442.12  0-1445.12
                                 0-1451.12  0-1457.12  0-1464.12  0-1467.12  0-1471.12  0-1480.12  0-1483.12  0-1486.12  0-1492.12
                                 0-1498.12  0-1501.12  0-1507.12  0-1513.12  0-1519.12  0-1522.12  0-1526.12  0-1537.12  0-1540.12
                                 0-1543.12  0-1546.12  0-1549.12  0-1560.12  0-1563.12  0-1566.12  0-1572.12  0-1578.12  0-1581.12
                                 0-1587.12  0-1593.12  0-1599.12  0-1602.12  0-1605.12  0-1611.12  0-1626.12  0-1629.12  0-1632.12
                                 0-1638.12  0-1644.12  0-1647.12  0-1653.12  0-1656.12  0-1659.12  0-1662.12  0-1665.12  0-1671.12
                                 0-1677.12  0-1683.12  0-1689.12
 
gbytes                           External Subroutine
                                 0-1700.16
 
iand                             Pure Intrinsic
                                 0-1432.11  0-1433.23  0-1438.11  0-1439.25  0-1447.11  0-1448.25  0-1453.11  0-1454.25  0-1488.11
                                 0-1489.25  0-1494.11  0-1495.26  0-1503.11  0-1504.25  0-1509.11  0-1510.25  0-1515.11  0-1516.25
                                 0-1568.11  0-1569.25  0-1574.11  0-1575.25  0-1583.11  0-1584.25  0-1589.11  0-1590.25  0-1595.11
                                 0-1596.25  0-1607.11  0-1608.26  0-1613.11  0-1614.26  0-1634.11  0-1635.25  0-1640.11  0-1641.24
                                 0-1649.11  0-1650.24  0-1667.11  0-1668.26  0-1673.11  0-1674.26  0-1679.11  0-1680.26  0-1685.11
                                 0-1686.26
 
isum                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1698.11@  0-1702.15@  0-1702.23  0-1704.23
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1701.18@  0-1702.38
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1353.21$  0-1218.34  0-1366.24  0-1370.24  0-1374.24  0-1378.11  0-1380.16  0-1382.16  0-1382.32
                                 0-1384.16  0-1386.16  0-1394.16  0-1399.16  0-1399.34  0-1399.52  0-1424.24  0-1427.24  0-1430.24
                                 0-1432.16  0-1433.11@  0-1433.28  0-1436.24  0-1438.16  0-1439.11@  0-1439.30  0-1442.24  0-1445.24
                                 0-1447.16  0-1448.11@  0-1448.30  0-1451.24  0-1453.16  0-1454.11@  0-1454.30  0-1457.24  0-1464.24
                                 0-1467.24  0-1471.24  0-1480.24  0-1483.24  0-1486.24  0-1488.16  0-1489.11@  0-1489.30  0-1492.24
                                 0-1494.16  0-1495.11@  0-1495.31  0-1498.24  0-1501.24  0-1503.16  0-1504.11@  0-1504.30  0-1507.24
                                 0-1509.16  0-1510.11@  0-1510.30  0-1513.24  0-1515.16  0-1516.11@  0-1516.30  0-1519.24  0-1522.24
                                 0-1526.24  0-1537.24  0-1540.24  0-1543.24  0-1546.24  0-1549.24  0-1560.24  0-1563.24  0-1566.24
                                 0-1568.16  0-1569.11@  0-1569.30  0-1572.24  0-1574.16  0-1575.11@  0-1575.30  0-1578.24  0-1581.24
                                 0-1583.16  0-1584.11@  0-1584.30  0-1587.24  0-1589.16  0-1590.11@  0-1590.30  0-1593.24  0-1595.16
                                 0-1596.11@  0-1596.30  0-1599.24  0-1602.24  0-1605.24  0-1607.16  0-1608.11@  0-1608.31  0-1611.24
                                 0-1613.16  0-1614.11@  0-1614.31  0-1626.24  0-1629.24  0-1632.24  0-1634.16  0-1635.11@  0-1635.30
                                 0-1638.24  0-1640.16  0-1641.11@  0-1641.29  0-1644.24  0-1647.24  0-1649.16  0-1650.11@  0-1650.29
                                 0-1653.24  0-1656.24  0-1659.24  0-1662.24  0-1665.24  0-1667.16  0-1668.11@  0-1668.31  0-1671.24
                                 0-1673.16  0-1674.11@  0-1674.31  0-1677.24  0-1679.16  0-1680.11@  0-1680.31  0-1683.24  0-1685.16
                                 0-1686.11@  0-1686.31  0-1689.24  0-1696.11  0-1696.28  0-1697.13  0-1699.31  0-1700.29  0-1700.51
                                 0-1701.25  0-1702.30  0-1704.11@
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1355.21$  0-1218.29  0-1362.7@  0-1362.18  0-1362.29  0-1362.43  0-1363.18  0-1366.33  0-1367.7@
                                 0-1367.18  0-1370.33  0-1371.7@  0-1371.18  0-1374.32  0-1375.7@  0-1375.19  0-1424.32  0-1425.7@
                                 0-1425.18  0-1427.32  0-1428.7@  0-1428.18  0-1430.32  0-1431.7@  0-1431.18  0-1436.32  0-1437.7@
                                 0-1437.18  0-1442.32  0-1443.7@  0-1443.18  0-1445.32  0-1446.7@  0-1446.18  0-1451.32  0-1452.7@
                                 0-1452.18  0-1457.32  0-1458.7@  0-1458.18  0-1464.33  0-1465.7@  0-1465.18  0-1467.33  0-1468.7@
                                 0-1468.18  0-1471.33  0-1472.7@  0-1472.18  0-1480.32  0-1481.7@  0-1481.18  0-1483.32  0-1484.7@
                                 0-1484.18  0-1486.32  0-1487.7@  0-1487.18  0-1492.32  0-1493.7@  0-1493.18  0-1498.32  0-1499.7@
                                 0-1499.18  0-1501.32  0-1502.7@  0-1502.18  0-1507.32  0-1508.7@  0-1508.18  0-1513.32  0-1514.7@
                                 0-1514.18  0-1519.33  0-1520.7@  0-1520.18  0-1522.33  0-1523.7@  0-1523.18  0-1526.33  0-1527.7@
                                 0-1527.18  0-1537.32  0-1538.7@  0-1538.18  0-1540.32  0-1541.7@  0-1541.18  0-1543.32  0-1544.7@
                                 0-1544.18  0-1546.32  0-1547.7@  0-1547.18  0-1549.32  0-1550.7@  0-1550.18  0-1553.7@  0-1553.18
                                 0-1560.32  0-1561.7@  0-1561.18  0-1563.32  0-1564.7@  0-1564.18  0-1566.32  0-1567.7@  0-1567.18
                                 0-1572.32  0-1573.7@  0-1573.18  0-1578.32  0-1579.7@  0-1579.18  0-1581.32  0-1582.7@  0-1582.18
                                 0-1587.32  0-1588.7@  0-1588.18  0-1593.32  0-1594.7@  0-1594.18  0-1599.33  0-1600.7@  0-1600.18
                                 0-1602.33  0-1603.7@  0-1603.18  0-1605.33  0-1606.7@  0-1606.18  0-1611.33  0-1612.7@  0-1612.18
                                 0-1618.7@  0-1618.18  0-1626.32  0-1627.7@  0-1627.18  0-1629.32  0-1630.7@  0-1630.18  0-1632.32
                                 0-1633.7@  0-1633.18  0-1638.32  0-1639.7@  0-1639.18  0-1644.32  0-1645.7@  0-1645.18  0-1647.32
                                 0-1648.7@  0-1648.18  0-1653.32  0-1654.7@  0-1654.18  0-1656.32  0-1657.7@  0-1657.18  0-1659.33
                                 0-1660.7@  0-1660.18  0-1662.33  0-1663.7@  0-1663.18  0-1665.33  0-1666.7@  0-1666.18  0-1671.33
                                 0-1672.7@  0-1672.18  0-1677.33  0-1678.7@  0-1678.18  0-1683.33  0-1684.7@  0-1684.18  0-1689.33
                                 0-1690.7@  0-1690.18  0-1699.11@  0-1700.38
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1357.21$  0-1218.39  0-1359.7@  0-1403.11@
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-1350.21$  0-1218.24  0-1366.19  0-1370.19  0-1374.19  0-1424.19  0-1427.19  0-1430.19  0-1436.19
                                 0-1442.19  0-1445.19  0-1451.19  0-1457.19  0-1464.19  0-1467.19  0-1471.19  0-1480.19  0-1483.19
                                 0-1486.19  0-1492.19  0-1498.19  0-1501.19  0-1507.19  0-1513.19  0-1519.19  0-1522.19  0-1526.19
                                 0-1537.19  0-1540.19  0-1543.19  0-1546.19  0-1549.19  0-1560.19  0-1563.19  0-1566.19  0-1572.19
                                 0-1578.19  0-1581.19  0-1587.19  0-1593.19  0-1599.19  0-1602.19  0-1605.19  0-1611.19  0-1626.19
                                 0-1629.19  0-1632.19  0-1638.19  0-1644.19  0-1647.19  0-1653.19  0-1656.19  0-1659.19  0-1662.19
                                 0-1665.19  0-1671.19  0-1677.19  0-1683.19  0-1689.19  0-1700.24
 
nsave                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1363.7@  0-1699.22
 
** fi633   === End of Compilation 4 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       1709 |      SUBROUTINE FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
       1710 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       1711 |C                .      .    .                                       .
       1712 |C SUBPROGRAM:    FI634       EXTRACT OR GENERATE BIT MAP FOR OUTPUT
       1713 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       1714 |C
       1715 |C ABSTRACT: IF BIT MAP SEC   IS AVAILABLE IN GRIB MESSAGE, EXTRACT
       1716 |C   FOR PROGRAM USE, OTHERWISE GENERATE AN APPROPRIATE BIT MAP.
       1717 |C
       1718 |C PROGRAM HISTORY LOG:
       1719 |C   91-09-13  CAVANAUGH
       1720 |C   91-11-12  CAVANAUGH   MODIFIED SIZE OF ECMWF GRIDS 5 - 8.
       1721 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       1722 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
       1723 |C   97-09-19  IREDELL     VECTORIZED BITMAP DECODER
       1724 |C   98-09-02  GILBERT     CORRECTED ERROR IN MAP SIZE FOR U.S. GRID 92
       1725 |C   98-09-08  BALDWIN     ADD GRIDS 190,192
       1726 |C   99-01-20  BALDWIN     ADD GRIDS 236,237
       1727 |C   01-10-02  ROGERS      REDEFINED GRID #218 FOR 12 KM ETA
       1728 |C                         REDEFINED GRID 192 FOR NEW 32-KM ETA GRID
       1729 |C 2003-06-30  GILBERT     ADDED GRIDS 145 and 146 for CMAQ
       1730 |C                         and GRID 175 for AWIPS over GUAM.
       1731 |C   04-03-08  OTTE        ADDED GRIDS 140-142,144,146,148-150 FOR AQF.
       1732 |C   04-03-11  OTTE        ADDED GRIDS 138 FOR AQF 255 for CONUS
       1733 |C   05-02-08  PLee        REMOVED GRIDS 140-144,149-150, 3x=147,5x=148
       1734 |C
       1735 |C USAGE:    CALL FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
       1736 |C   INPUT ARGUMENT LIST:
       1737 |C     MSGA       - BUFR MESSAGE
       1738 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1739 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       1740 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       1741 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       1742 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       1743 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       1744 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       1745 |C          (7)   - VALUE OF CURRENT BYTE
       1746 |C          (8)   - BIT POINTER
       1747 |C          (9)   - GRIB START BIT NR
       1748 |C         (10)   - GRIB/GRID ELEMENT COUNT
       1749 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       1750 |C         (12)   - BIT MAP FLAG
       1751 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       1752 |C         (14)   - BDS FLAGS
       1753 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       1754 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
       1755 |C          (1)   - ID OF CENTER
       1756 |C          (2)   - MODEL IDENTIFICATION
       1757 |C          (3)   - GRID IDENTIFICATION
       1758 |C          (4)   - GDS/BMS FLAG
       1759 |C          (5)   - INDICATOR OF PARAMETER
       1760 |C          (6)   - TYPE OF LEVEL
       1761 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
       1762 |C          (8)   - YEAR OF CENTURY
       1763 |C          (9)   - MONTH OF YEAR
       1764 |C          (10)  - DAY OF MONTH
       1765 |C          (11)  - HOUR OF DAY
       1766 |C          (12)  - MINUTE OF HOUR
       1767 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
       1768 |C          (14)  - TIME RANGE 1
       1769 |C          (15)  - TIME RANGE 2
       1770 |C          (16)  - TIME RANGE FLAG
       1771 |C          (17)  - NUMBER INCLUDED IN AVERAGE
       1772 |C
       1773 |C   OUTPUT ARGUMENT LIST:
       1774 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
       1775 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1776 |C                  SEE INPUT LIST
       1777 |C     KRET       - ERROR RETURN
       1778 |C
       1779 |C REMARKS:
       1780 |C     KRET   = 0 - NO ERROR
       1781 |C            = 5 - GRID NOT AVAIL FOR CENTER INDICATED
       1782 |C            =10 - INCORRECT CENTER INDICATOR
       1783 |C            =12 - BYTES 5-6 ARE NOT ZERO IN BMS, PREDEFINED BIT MAP
       1784 |C                  NOT PROVIDED BY THIS CENTER
       1785 |C
       1786 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       1787 |C
       1788 |C ATTRIBUTES:
       1789 |C   LANGUAGE: FORTRAN 77
       1790 |C   MACHINE:  HDS9000
       1791 |C
       1792 |C$$$
       1793 |C
       1794 |C                       INCOMING MESSAGE HOLDER
       1795 |      CHARACTER*1   MSGA(*)
       1796 |C
       1797 |C                       BIT MAP
       1798 |      LOGICAL*1     KBMS(*)
       1799 |C
       1800 |C                       ARRAY OF POINTERS AND COUNTERS
       1801 |      INTEGER       KPTR(*)
       1802 |C                       ARRAY OF POINTERS AND COUNTERS
       1803 |      INTEGER       KPDS(*)
       1804 |      INTEGER       KGDS(*)
       1805 |C
       1806 |      INTEGER       KRET
       1807 |      INTEGER       MASK(8)
       1808 |C  ----------------------GRID 21 AND GRID 22 ARE THE SAME
       1809 |      LOGICAL*1     GRD21( 1369)
       1810 |C  ----------------------GRID 23 AND GRID 24 ARE THE SAME
       1811 |      LOGICAL*1     GRD23( 1369)
       1812 |      LOGICAL*1     GRD25( 1368)
       1813 |      LOGICAL*1     GRD26( 1368)
       1814 |C  ----------------------GRID 27 AND GRID 28 ARE THE SAME
       1815 |C  ----------------------GRID 29 AND GRID 30 ARE THE SAME
       1816 |C  ----------------------GRID 33 AND GRID 34 ARE THE SAME
       1817 |      LOGICAL*1     GRD50( 1188)
       1818 |C  -----------------------GRID 61 AND GRID 62 ARE THE SAME
       1819 |      LOGICAL*1     GRD61( 4186)
       1820 |C  -----------------------GRID 63 AND GRID 64 ARE THE SAME
       1821 |      LOGICAL*1     GRD63( 4186)
       1822 |C     LOGICAL*1     GRD70(16380)/16380*.TRUE./
       1823 |C  -------------------------------------------------------------
       1824 |      DATA  GRD21 /1333*.TRUE.,36*.FALSE./
       1825 |      DATA  GRD23 /.TRUE.,36*.FALSE.,1332*.TRUE./
       1826 |      DATA  GRD25 /1297*.TRUE.,71*.FALSE./
       1827 |      DATA  GRD26 /.TRUE.,71*.FALSE.,1296*.TRUE./
       1828 |      DATA  GRD50/
       1829 |C LINE 1-4
       1830 |     &  7*.FALSE.,22*.TRUE.,14*.FALSE.,22*.TRUE.,
       1831 |     & 14*.FALSE.,22*.TRUE.,14*.FALSE.,22*.TRUE.,7*.FALSE.,
       1832 |C LINE 5-8
       1833 |     &  6*.FALSE.,24*.TRUE.,12*.FALSE.,24*.TRUE.,
       1834 |     & 12*.FALSE.,24*.TRUE.,12*.FALSE.,24*.TRUE.,6*.FALSE.,
       1835 |C LINE 9-12
       1836 |     &  5*.FALSE.,26*.TRUE.,10*.FALSE.,26*.TRUE.,
       1837 |     & 10*.FALSE.,26*.TRUE.,10*.FALSE.,26*.TRUE.,5*.FALSE.,
       1838 |C LINE 13-16
       1839 |     &  4*.FALSE.,28*.TRUE., 8*.FALSE.,28*.TRUE.,
       1840 |     &  8*.FALSE.,28*.TRUE., 8*.FALSE.,28*.TRUE.,4*.FALSE.,
       1841 |C LINE 17-20
       1842 |     &  3*.FALSE.,30*.TRUE., 6*.FALSE.,30*.TRUE.,
       1843 |     &  6*.FALSE.,30*.TRUE., 6*.FALSE.,30*.TRUE.,3*.FALSE.,
       1844 |C LINE 21-24
       1845 |     &  2*.FALSE.,32*.TRUE., 4*.FALSE.,32*.TRUE.,
       1846 |     &  4*.FALSE.,32*.TRUE., 4*.FALSE.,32*.TRUE.,2*.FALSE.,
       1847 |C LINE 25-28
       1848 |     &    .FALSE.,34*.TRUE., 2*.FALSE.,34*.TRUE.,
       1849 |     &  2*.FALSE.,34*.TRUE., 2*.FALSE.,34*.TRUE.,  .FALSE.,
       1850 |C LINE 29-33
       1851 |     &           180*.TRUE./
       1852 |      DATA  GRD61 /4096*.TRUE.,90*.FALSE./
       1853 |      DATA  GRD63 /.TRUE.,90*.FALSE.,4095*.TRUE./
       1854 |      DATA  MASK  /128,64,32,16,8,4,2,1/
       1855 |C
       1856 |C     PRINT *,'FI634'
       1857 |      IF (IAND(KPDS(4),64).EQ.64) THEN
       1858 |C
       1859 |C                   SET UP BIT POINTER
       1860 |C                          SECTION 0    SECTION 1     SECTION 2
       1861 |      KPTR(8) = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8) + 24
       1862 |C
       1863 |C  BYTE 4           NUMBER OF UNUSED BITS AT END OF SECTION 3
       1864 |C
       1865 |      CALL GBYTE (MSGA,KPTR(11),KPTR(8),8)
       1866 |      KPTR(8)  = KPTR(8) + 8
       1867 |C
       1868 |C  BYTE 5,6         TABLE REFERENCE IF 0, BIT MAP FOLLOWS
       1869 |C
       1870 |      CALL GBYTE (MSGA,KPTR(12),KPTR(8),16)
       1871 |      KPTR(8)  = KPTR(8) + 16
       1872 |C                   IF TABLE REFERENCE = 0, EXTRACT BIT MAP
       1873 |        IF (KPTR(12).EQ.0) THEN
       1874 |C                   CALCULATE NR OF BITS IN BIT MAP
       1875 |          IBITS   = (KPTR(5) - 6) * 8 - KPTR(11)
       1876 |          KPTR(10)  = IBITS
       1877 |          IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22.OR.KPDS(3).EQ.25.
       1878 |     *             OR.KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       1879 |C                    NORTHERN HEMISPHERE  21, 22, 25, 61, 62
       1880 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1881 |              IF (KPDS(3).EQ.25) THEN
       1882 |                  KADD     = 71
       1883 |              ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       1884 |                  KADD     = 90
       1885 |              ELSE
       1886 |                  KADD     = 36
       1887 |              END IF
       1888 |              DO 25 I = 1, KADD
       1889 |                  KBMS(I+IBITS)  = .FALSE.
       1890 |   25         CONTINUE
       1891 |              KPTR(10)   = KPTR(10) + KADD
       1892 |              RETURN
       1893 |          ELSE IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24.OR.KPDS(3).EQ.26.
       1894 |     *             OR.KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       1895 |C                    SOUTHERN HEMISPHERE  23, 24, 26, 63, 64
       1896 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1897 |              IF (KPDS(3).EQ.26) THEN
       1898 |                  KADD     = 72
       1899 |              ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       1900 |                  KADD     = 91
       1901 |              ELSE
       1902 |                  KADD     = 37
       1903 |              END IF
       1904 |              DO 26 I = 1, KADD
       1905 |                  KBMS(I+IBITS)  = .FALSE.
       1906 |   26         CONTINUE
       1907 |              KPTR(10)   = KPTR(10) + KADD - 1
       1908 |              RETURN
       1909 |          ELSE IF (KPDS(3).EQ.50) THEN
       1910 |              KPAD    = 7
       1911 |              KIN     = 22
       1912 |              KBITS   = 0
       1913 |              DO 55 I = 1, 7
       1914 |                  DO 54 J = 1, 4
       1915 |                      DO 51 K = 1, KPAD
       1916 |                          KBITS   = KBITS + 1
       1917 |                          KBMS(KBITS)  = .FALSE.
       1918 |   51                 CONTINUE
       1919 |                      CALL FI634X(KIN,KPTR(8),MSGA,KBMS(KBITS+1))
       1920 |                      KPTR(8)=KPTR(8)+KIN
       1921 |                      KBITS=KBITS+KIN
       1922 |                      DO 53 K = 1, KPAD
       1923 |                          KBITS   = KBITS + 1
       1924 |                          KBMS(KBITS)  = .FALSE.
       1925 |   53                 CONTINUE
       1926 |   54             CONTINUE
       1927 |                  KIN    = KIN + 2
       1928 |                  KPAD   = KPAD - 1
       1929 |   55         CONTINUE
       1930 |              DO 57 II = 1, 5
       1931 |                  CALL FI634X(KIN,KPTR(8),MSGA,KBMS(KBITS+1))
       1932 |                  KPTR(8)=KPTR(8)+KIN
       1933 |                  KBITS=KBITS+KIN
       1934 |   57         CONTINUE
       1935 |          ELSE
       1936 |C                        EXTRACT BIT MAP FROM BMS FOR OTHER GRIDS
       1937 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1938 |          END IF
       1939 |          RETURN
       1940 |        ELSE
       1941 |C         PRINT *,'FI634-NO PREDEFINED BIT MAP PROVIDED BY THIS CENTER'
       1942 |          KRET = 12
       1943 |          RETURN
       1944 |        END IF
       1945 |C
       1946 |      END IF
       1947 |      KRET = 0
       1948 |C  -------------------------------------------------------
       1949 |C                   PROCESS NON-STANDARD GRID
       1950 |C  -------------------------------------------------------
       1951 |      IF (KPDS(3).EQ.255) THEN
       1952 |C         PRINT *,'NON STANDARD GRID, CENTER = ',KPDS(1)
       1953 |          J      = KGDS(2) * KGDS(3)
       1954 |          KPTR(10) = J
       1955 |          DO 600 I = 1, J
       1956 |              KBMS(I) = .TRUE.
       1957 |  600     CONTINUE
       1958 |          RETURN
       1959 |      END IF
       1960 |C  -------------------------------------------------------
       1961 |C                   CHECK INTERNATIONAL SET
       1962 |C  -------------------------------------------------------
       1963 |      IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22) THEN
       1964 |C                   ----- INT'L GRIDS 21, 22 - MAP SIZE 1369
       1965 |          J   = 1369
       1966 |          KPTR(10)  = J
       1967 |          CALL FI637(J,KPDS,KGDS,KRET)
       1968 |          IF(KRET.NE.0) GO TO 820
       1969 |          DO 3021 I = 1, 1369
       1970 |              KBMS(I) = GRD21(I)
       1971 | 3021     CONTINUE
       1972 |          RETURN
       1973 |      ELSE IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24) THEN
       1974 |C                   ----- INT'L GRIDS 23, 24 - MAP SIZE 1369
       1975 |          J   = 1369
       1976 |          KPTR(10)  = J
       1977 |          CALL FI637(J,KPDS,KGDS,KRET)
       1978 |          IF(KRET.NE.0) GO TO 820
       1979 |          DO 3023 I = 1, 1369
       1980 |              KBMS(I) = GRD23(I)
       1981 | 3023     CONTINUE
       1982 |          RETURN
       1983 |      ELSE IF (KPDS(3).EQ.25) THEN
       1984 |C                   ----- INT'L GRID 25 - MAP SIZE 1368
       1985 |          J   = 1368
       1986 |          KPTR(10)  = J
       1987 |          CALL FI637(J,KPDS,KGDS,KRET)
       1988 |          IF(KRET.NE.0) GO TO 820
       1989 |          DO 3025 I = 1, 1368
       1990 |              KBMS(I) = GRD25(I)
       1991 | 3025     CONTINUE
       1992 |          RETURN
       1993 |      ELSE IF (KPDS(3).EQ.26) THEN
       1994 |C                  ----- INT'L GRID  26 - MAP SIZE 1368
       1995 |          J   = 1368
       1996 |          KPTR(10)  = J
       1997 |          CALL FI637(J,KPDS,KGDS,KRET)
       1998 |          IF(KRET.NE.0) GO TO 820
       1999 |          DO 3026 I = 1, 1368
       2000 |              KBMS(I) = GRD26(I)
       2001 | 3026     CONTINUE
       2002 |          RETURN
       2003 |      ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       2004 |C                  ----- INT'L GRID  37-44 - MAP SIZE 3447
       2005 |          J   = 3447
       2006 |          GO TO 800
       2007 |      ELSE IF (KPDS(1).EQ.7.AND.KPDS(3).EQ.50) THEN
       2008 |C                   ----- INT'L GRIDS 50 - MAP SIZE 964
       2009 |          J     = 1188
       2010 |          KPTR(10)  = J
       2011 |          CALL FI637(J,KPDS,KGDS,KRET)
       2012 |          IF(KRET.NE.0) GO TO 890
       2013 |          DO 3050 I = 1, J
       2014 |              KBMS(I) = GRD50(I)
       2015 | 3050     CONTINUE
       2016 |          RETURN
       2017 |      ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       2018 |C                   ----- INT'L GRIDS 61, 62 - MAP SIZE 4186
       2019 |          J     = 4186
       2020 |          KPTR(10)  = J
       2021 |          CALL FI637(J,KPDS,KGDS,KRET)
       2022 |          IF(KRET.NE.0) GO TO 820
       2023 |          DO 3061 I = 1, 4186
       2024 |              KBMS(I) = GRD61(I)
       2025 | 3061     CONTINUE
       2026 |          RETURN
       2027 |      ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       2028 |C                  ----- INT'L GRIDS 63, 64 - MAP SIZE 4186
       2029 |          J     = 4186
       2030 |          KPTR(10)  = J
       2031 |          CALL FI637(J,KPDS,KGDS,KRET)
       2032 |          IF(KRET.NE.0) GO TO 820
       2033 |          DO 3063 I = 1, 4186
       2034 |              KBMS(I) = GRD63(I)
       2035 | 3063     CONTINUE
       2036 |          RETURN
       2037 |      END IF
       2038 |C  -------------------------------------------------------
       2039 |C                   CHECK UNITED STATES SET
       2040 |C  -------------------------------------------------------
       2041 |      IF (KPDS(1).EQ.7) THEN
       2042 |          IF (KPDS(3).LT.100) THEN
       2043 |              IF (KPDS(3).EQ.1) THEN
       2044 |C                       ----- U.S. GRID 1 - MAP SIZE 1679
       2045 |                  J   = 1679
       2046 |                  GO TO 800
       2047 |              END IF
       2048 |              IF (KPDS(3).EQ.2) THEN
       2049 |C                       ----- U.S. GRID 2 - MAP SIZE 10512
       2050 |                  J   = 10512
       2051 |                  GO TO 800
       2052 |              ELSE IF (KPDS(3).EQ.3) THEN
       2053 |C                       ----- U.S. GRID 3 - MAP SIZE 65160
       2054 |                  J   = 65160
       2055 |                  GO TO 800
       2056 |              ELSE IF (KPDS(3).EQ.4) THEN
       2057 |C                       ----- U.S. GRID 4 - MAP SIZE 259920
       2058 |                  J   = 259920
       2059 |                  GO TO 800
       2060 |              ELSE IF (KPDS(3).EQ.5) THEN
       2061 |C                       ----- U.S. GRID 5 - MAP SIZE 3021
       2062 |                  J   = 3021
       2063 |                  GO TO 800
       2064 |              ELSE IF (KPDS(3).EQ.6) THEN
       2065 |C                       ----- U.S. GRID 6 - MAP SIZE 2385
       2066 |                  J   = 2385
       2067 |                  GO TO 800
       2068 |              ELSE IF (KPDS(3).EQ.8) THEN
       2069 |C                       ----- U.S. GRID 8 - MAP SIZE 5104
       2070 |                  J   = 5104
       2071 |                  GO TO 800
       2072 |              ELSE IF (KPDS(3).EQ.27.OR.KPDS(3).EQ.28) THEN
       2073 |C                       ----- U.S. GRIDS 27, 28 - MAP SIZE 4225
       2074 |                  J     = 4225
       2075 |                  GO TO 800
       2076 |              ELSE IF (KPDS(3).EQ.29.OR.KPDS(3).EQ.30) THEN
       2077 |C                       ----- U.S. GRIDS 29,30 - MAP SIZE 5365
       2078 |                  J     = 5365
       2079 |                  GO TO 800
       2080 |              ELSE IF (KPDS(3).EQ.33.OR.KPDS(3).EQ.34) THEN
       2081 |C                       ----- U.S GRID 33, 34 - MAP SIZE 8326
       2082 |                  J     = 8326
       2083 |                  GO TO 800
       2084 |              ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       2085 |C                  -----  U.S. GRID  37-44 - MAP SIZE 3447
       2086 |                  J   = 3447
       2087 |                  GO TO 800
       2088 |              ELSE IF (KPDS(3).EQ.45) THEN
       2089 |C                  ----- U.S.  GRID  45    - MAP SIZE 41760
       2090 |                  J   = 41760
       2091 |                  GO TO 800
       2092 |              ELSE IF (KPDS(3).EQ.53) THEN
       2093 |C                  ----- U.S.  GRID  53    - MAP SIZE 5967
       2094 |                  J   = 5967
       2095 |                  GO TO 800
       2096 |              ELSE IF (KPDS(3).EQ.55.OR.KPDS(3).EQ.56) THEN
       2097 |C                       ----- U.S GRID 55, 56 - MAP SIZE 6177
       2098 |                  J     = 6177
       2099 |                  GO TO 800
       2100 |              ELSE IF (KPDS(3).GE.67.AND.KPDS(3).LE.71) THEN
       2101 |C                       ----- U.S GRID 67-71 - MAP SIZE 13689
       2102 |                  J     = 13689
       2103 |                  GO TO 800
       2104 |              ELSE IF (KPDS(3).EQ.72) THEN
       2105 |C                       ----- U.S GRID    72 - MAP SIZE 406
       2106 |                  J     = 406
       2107 |                  GO TO 800
       2108 |              ELSE IF (KPDS(3).EQ.73) THEN
       2109 |C                       ----- U.S GRID    73 - MAP SIZE 13056
       2110 |                  J     = 13056
       2111 |                  GO TO 800
       2112 |              ELSE IF (KPDS(3).EQ.74) THEN
       2113 |C                       ----- U.S GRID    74 - MAP SIZE 10800
       2114 |                  J     = 10800
       2115 |                  GO TO 800
       2116 |              ELSE IF (KPDS(3).GE.75.AND.KPDS(3).LE.77) THEN
       2117 |C                       ----- U.S GRID 75-77 - MAP SIZE 12321
       2118 |                  J     = 12321
       2119 |                  GO TO 800
       2120 |              ELSE IF (KPDS(3).EQ.85.OR.KPDS(3).EQ.86) THEN
       2121 |C                       ----- U.S GRID 85,86 - MAP SIZE 32400
       2122 |                  J     = 32400
       2123 |                  GO TO 800
       2124 |              ELSE IF (KPDS(3).EQ.87) THEN
       2125 |C                       ----- U.S GRID 87     - MAP SIZE 5022
       2126 |                  J     = 5022
       2127 |                  GO TO 800
       2128 |              ELSE IF (KPDS(3).EQ.88) THEN
       2129 |C                       ----- U.S GRID 88     - MAP SIZE 317840
       2130 |                  J     = 317840
       2131 |                  GO TO 800
       2132 |              ELSE IF (KPDS(3).EQ.90) THEN
       2133 |C                       ----- U.S GRID 90     - MAP SIZE 111723
       2134 |                  J     = 111723
       2135 |                  GO TO 800
       2136 |              ELSE IF (KPDS(3).EQ.91) THEN
       2137 |C                       ----- U.S GRID 91     - MAP SIZE 111723
       2138 |                  J     = 111723
       2139 |                  GO TO 800
       2140 |              ELSE IF (KPDS(3).EQ.92) THEN
       2141 |C                       ----- U.S GRID 92     - MAP SIZE 111723
       2142 |                  J     = 111723
       2143 |                  GO TO 800
       2144 |              ELSE IF (KPDS(3).EQ.93) THEN
       2145 |C                       ----- U.S GRID 93     - MAP SIZE 111723
       2146 |                  J     = 111723
       2147 |                  GO TO 800
       2148 |              ELSE IF (KPDS(3).EQ.94) THEN
       2149 |C                       ----- U.S GRID 94     - MAP SIZE 196305
       2150 |                  J     = 196305
       2151 |                  GO TO 800
       2152 |              ELSE IF (KPDS(3).EQ.95) THEN
       2153 |C                       ----- U.S GRID 95     - MAP SIZE 36062
       2154 |                  J     = 36062
       2155 |                  GO TO 800
       2156 |              ELSE IF (KPDS(3).EQ.96) THEN
       2157 |C                       ----- U.S GRID 96     - MAP SIZE 646602
       2158 |                  J     = 646602
       2159 |                  GO TO 800
       2160 |              ELSE IF (KPDS(3).EQ.97) THEN
       2161 |C                       ----- U.S GRID 97     - MAP SIZE 12727
       2162 |                  J     = 12727
       2163 |                  GO TO 800
       2164 |              ELSE IF (KPDS(3).EQ.98) THEN
       2165 |C                       ----- U.S GRID 98     - MAP SIZE 18048
       2166 |                  J     = 18048
       2167 |                  GO TO 800
       2168 |              END IF
       2169 |          ELSE IF (KPDS(3).GE.100.AND.KPDS(3).LT.200) THEN
       2170 |              IF (KPDS(3).EQ.100) THEN
       2171 |C                       ----- U.S. GRID 100 - MAP SIZE 6889
       2172 |                  J     = 6889
       2173 |                  GO TO 800
       2174 |              ELSE IF (KPDS(3).EQ.101) THEN
       2175 |C                    ----- U.S. GRID 101 - MAP SIZE 10283
       2176 |                  J     = 10283
       2177 |                  GO TO 800
       2178 |              ELSE IF (KPDS(3).EQ.103) THEN
       2179 |C                     ----- U.S. GRID 103 - MAP SIZE 3640
       2180 |                  J     = 3640
       2181 |                  GO TO 800
       2182 |              ELSE IF (KPDS(3).EQ.104) THEN
       2183 |C                     ----- U.S. GRID 104 - MAP SIZE 16170
       2184 |                  J     = 16170
       2185 |                  GO TO 800
       2186 |              ELSE IF (KPDS(3).EQ.105) THEN
       2187 |C                 ----- U.S. GRID 105 - MAP SIZE 6889
       2188 |                  J     = 6889
       2189 |                  GO TO 800
       2190 |              ELSE IF (KPDS(3).EQ.106) THEN
       2191 |C                     ----- U.S. GRID 106 - MAP SIZE 19305
       2192 |                  J     = 19305
       2193 |                  GO TO 800
       2194 |              ELSE IF (KPDS(3).EQ.107) THEN
       2195 |C                 ----- U.S. GRID 107 - MAP SIZE 11040
       2196 |                  J     = 11040
       2197 |                  GO TO 800
       2198 |              ELSE IF (KPDS(3).EQ.110) THEN
       2199 |C                 ----- U.S. GRID 110 - MAP SIZE 103936
       2200 |                  J     = 103936
       2201 |                  GO TO 800
       2202 |              ELSE IF (KPDS(3).EQ.126) THEN
       2203 |C                 ----- U.S. GRID 126 - MAP SIZE 72960
       2204 |                  J     = 72960
       2205 |                  GO TO 800
       2206 |              ELSE IF (KPDS(3).EQ.127) THEN
       2207 |C                 ----- U.S. GRID 127 - MAP SIZE 294912
       2208 |                  J     = 294912
       2209 |                  GO TO 800
       2210 |C***TLO 11 Mar 2004 ***start
       2211 |              ELSE IF (KPDS(3).EQ.138) THEN
       2212 |C                  ----- CONUS (5x+) AQF GRID 138 - MAP SIZE 134784
       2213 |                  J   = 134784
       2214 |                  GO TO 800
       2215 |CER              ELSE IF (KPDS(3).EQ.255) THEN
       2216 |CER                  ----- CONUS (Eric) AQF GRID 255 - MAP SIZE 322980
       2217 |CER                  J   = 322980
       2218 |CER                  GO TO 800
       2219 |
       2220 |               ELSE IF (KPDS(3).EQ.255) THEN
       2221 |C                  ----- CONUS (5x+) AQF GRID 255 - MAP SIZE 321792
       2222 |                  J   = 321792
       2223 |                  GO TO 800
       2224 |
       2225 |CPL*PLee 08 Feb 2005 ***Comment out starts
       2226 |C***TLO 11 Mar 2004 ***end
       2227 |C***TLO 08 Mar 2004 ***start
       2228 |CPL           ELSE IF (KPDS(3).EQ.140) THEN
       2229 |C                  ----- EAST (3X) U.S. AQF GRID 140 - MAP SIZE 70470
       2230 |CPL               J   = 70470
       2231 |CPL               GO TO 800
       2232 |CPL           ELSE IF (KPDS(3).EQ.141) THEN
       2233 |C                  ----- EAST (3X) U.S. AQF GRID 141 - MAP SIZE 71002
       2234 |CPL               J   = 71002
       2235 |CPL               GO TO 800
       2236 |CPL           ELSE IF (KPDS(3).EQ.142) THEN
       2237 |C                  ----- EAST (3x) U.S. AQF GRID 142 - MAP SIZE 69412
       2238 |CPL               J   = 69412
       2239 |CPL               GO TO 800
       2240 |CPL*PLee 08 Feb 2005 ***renaming Grid 142 to Grid 147 starts
       2241 |              ELSE IF (KPDS(3).EQ.147) THEN
       2242 |C                  ----- EAST (3x) U.S. AQF GRID 147 - MAP SIZE 69412
       2243 |                  J   = 69412
       2244 |                  GO TO 800
       2245 |CPL*PLee 08 Feb 2005 ***renaming Grid 142 to Grid 147 ends
       2246 |CPL           ELSE IF (KPDS(3).EQ.144) THEN
       2247 |C                  ----- NE U.S. AQF GRID 144 - MAP SIZE 24192
       2248 |CPL               J   = 24192
       2249 |CPL               GO TO 800
       2250 |C***TLO 08 Mar 2004 ***end
       2251 |              ELSE IF (KPDS(3).EQ.145) THEN
       2252 |C                 ----- U.S. GRID 145 - MAP SIZE 24505
       2253 |                  J     = 24505
       2254 |                  GO TO 800
       2255 |              ELSE IF (KPDS(3).EQ.146) THEN
       2256 |C                 ----- U.S. GRID 146 - MAP SIZE 23572
       2257 |                  J     = 23572
       2258 |                  GO TO 800
       2259 |C***TLO 08 Mar 2004 ***start
       2260 |CPL*PLee 08 Feb 2005 ***Comment out starts
       2261 |CPL           ELSE IF (KPDS(3).EQ.148) THEN
       2262 |C                  ----- CONUS (5X) AQF GRID 148 - MAP SIZE 118548
       2263 |CPL               J   = 118548
       2264 |CPL               GO TO 800
       2265 |CPL           ELSE IF (KPDS(3).EQ.149) THEN
       2266 |C                  -----  CONUS (5X) AQF GRID 149 - MAP SIZE 119260
       2267 |CPL               J   = 119260
       2268 |CPL               GO TO 800
       2269 |CPL           ELSE IF (KPDS(3).EQ.150) THEN
       2270 |C                  ----- CONUS (5X) AQF GRID 150 - MAP SIZE 117130
       2271 |CPL               J   = 117130
       2272 |CPL               GO TO 800
       2273 |CPL*PLee 08 Feb 2005 ***renaming Grid 150 to Grid 148 starts
       2274 |              ELSE IF (KPDS(3).EQ.148) THEN
       2275 |C                  ----- CONUS (5X) AQF GRID 148 - MAP SIZE 117130
       2276 |                  J   = 117130
       2277 |                  GO TO 800
       2278 |CPL*PLee 08 Feb 2005 ***renaming Grid 150 to Grid 148 ends
       2279 |C***TLO 08 Mar 2004 ***end
       2280 |              ELSE IF (KPDS(3).EQ.170) THEN
       2281 |C                 ----- U.S. GRID 170 - MAP SIZE 4147200
       2282 |                  J     = 4147200
       2283 |                  GO TO 800
       2284 |              ELSE IF (KPDS(3).EQ.171) THEN
       2285 |C                 ----- U.S. GRID 171 - MAP SIZE 716100
       2286 |                  J     = 716100
       2287 |                  GO TO 800
       2288 |              ELSE IF (KPDS(3).EQ.172) THEN
       2289 |C                 ----- U.S. GRID 172 - MAP SIZE 489900
       2290 |                  J     = 489900
       2291 |                  GO TO 800
       2292 |              ELSE IF (KPDS(3).EQ.175) THEN
       2293 |C                 ----- U.S. GRID 175 - MAP SIZE 185704
       2294 |                  J     = 185704
       2295 |                  GO TO 800
       2296 |              ELSE IF (KPDS(3).EQ.190) THEN
       2297 |C                 ----- U.S GRID 190  - MAP SIZE 12972
       2298 |                  J     = 12972
       2299 |                  GO TO 800
       2300 |              ELSE IF (KPDS(3).EQ.192) THEN
       2301 |C                 ----- U.S GRID 192  - MAP SIZE 91719
       2302 |                  J     = 91719
       2303 |                  GO TO 800
       2304 |              ELSE IF (KPDS(3).EQ.194) THEN
       2305 |C                 ----- U.S GRID 194  - MAP SIZE 12727
       2306 |                  J     = 12727
       2307 |                  GO TO 800
       2308 |              ELSE IF (KPDS(3).EQ.196) THEN
       2309 |C                 ----- U.S. GRID 196 - MAP SIZE 45903
       2310 |                  J     = 45903
       2311 |                  GO TO 800
       2312 |              ELSE IF (KPDS(3).EQ.198) THEN
       2313 |C                 ----- U.S. GRID 198 - MAP SIZE 41760
       2314 |                  J     = 41760
       2315 |                  GO TO 800
       2316 |              ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2317 |C                     ----- U.S. NON-STANDARD GRID
       2318 |                  GO TO 895
       2319 |              END IF
       2320 |          ELSE IF (KPDS(3).GE.200) THEN
       2321 |              IF (KPDS(3).EQ.201) THEN
       2322 |                  J = 4225
       2323 |                  GO TO 800
       2324 |              ELSE IF (KPDS(3).EQ.202) THEN
       2325 |                  J = 2795
       2326 |                  GO TO 800
       2327 |              ELSE IF (KPDS(3).EQ.203.OR.KPDS(3).EQ.205) THEN
       2328 |                  J = 1755
       2329 |                  GO TO 800
       2330 |              ELSE IF (KPDS(3).EQ.204) THEN
       2331 |                  J = 6324
       2332 |                  GO TO 800
       2333 |              ELSE IF (KPDS(3).EQ.206) THEN
       2334 |                  J = 2091
       2335 |                  GO TO 800
       2336 |              ELSE IF (KPDS(3).EQ.207) THEN
       2337 |                  J = 1715
       2338 |                  GO TO 800
       2339 |              ELSE IF (KPDS(3).EQ.208) THEN
       2340 |                  J = 783
       2341 |                  GO TO 800
       2342 |              ELSE IF (KPDS(3).EQ.209) THEN
       2343 |                  J = 61325
       2344 |                  GO TO 800
       2345 |              ELSE IF (KPDS(3).EQ.210) THEN
       2346 |                  J = 625
       2347 |                  GO TO 800
       2348 |              ELSE IF (KPDS(3).EQ.211) THEN
       2349 |                  J = 6045
       2350 |                  GO TO 800
       2351 |              ELSE IF (KPDS(3).EQ.212) THEN
       2352 |                  J = 23865
       2353 |                  GO TO 800
       2354 |              ELSE IF (KPDS(3).EQ.213) THEN
       2355 |                  J = 10965
       2356 |                  GO TO 800
       2357 |              ELSE IF (KPDS(3).EQ.214) THEN
       2358 |                  J = 6693
       2359 |                  GO TO 800
       2360 |              ELSE IF (KPDS(3).EQ.215) THEN
       2361 |                  J = 94833
       2362 |                  GO TO 800
       2363 |              ELSE IF (KPDS(3).EQ.216) THEN
       2364 |                  J = 14873
       2365 |                  GO TO 800
       2366 |              ELSE IF (KPDS(3).EQ.217) THEN
       2367 |                  J = 59001
       2368 |                  GO TO 800
       2369 |              ELSE IF (KPDS(3).EQ.218) THEN
       2370 |                  J = 262792
       2371 |                  GO TO 800
       2372 |              ELSE IF (KPDS(3).EQ.219) THEN
       2373 |                  J = 179025
       2374 |                  GO TO 800
       2375 |              ELSE IF (KPDS(3).EQ.220) THEN
       2376 |                  J = 122475
       2377 |                  GO TO 800
       2378 |              ELSE IF (KPDS(3).EQ.221) THEN
       2379 |                  J = 96673
       2380 |                  GO TO 800
       2381 |              ELSE IF (KPDS(3).EQ.222) THEN
       2382 |                  J = 15456
       2383 |                  GO TO 800
       2384 |              ELSE IF (KPDS(3).EQ.223) THEN
       2385 |                  J = 16641
       2386 |                  GO TO 800
       2387 |              ELSE IF (KPDS(3).EQ.224) THEN
       2388 |                  J = 4225
       2389 |                  GO TO 800
       2390 |              ELSE IF (KPDS(3).EQ.225) THEN
       2391 |                  J = 24975
       2392 |                  GO TO 800
       2393 |              ELSE IF (KPDS(3).EQ.226) THEN
       2394 |                  J = 381029
       2395 |                  GO TO 800
       2396 |              ELSE IF (KPDS(3).EQ.227) THEN
       2397 |                  J = 1509825
       2398 |                  GO TO 800
       2399 |              ELSE IF (KPDS(3).EQ.228) THEN
       2400 |                  J = 10512
       2401 |                  GO TO 800
       2402 |              ELSE IF (KPDS(3).EQ.229) THEN
       2403 |                  J = 65160
       2404 |                  GO TO 800
       2405 |              ELSE IF (KPDS(3).EQ.230) THEN
       2406 |                  J = 259920
       2407 |                  GO TO 800
       2408 |              ELSE IF (KPDS(3).EQ.231) THEN
       2409 |                  J = 130320
       2410 |                  GO TO 800
       2411 |              ELSE IF (KPDS(3).EQ.232) THEN
       2412 |                  J = 32760
       2413 |                  GO TO 800
       2414 |              ELSE IF (KPDS(3).EQ.233) THEN
       2415 |                  J = 45216
       2416 |                  GO TO 800
       2417 |              ELSE IF (KPDS(3).EQ.234) THEN
       2418 |                  J = 16093
       2419 |                  GO TO 800
       2420 |              ELSE IF (KPDS(3).EQ.235) THEN
       2421 |                  J = 259200
       2422 |                  GO TO 800
       2423 |              ELSE IF (KPDS(3).EQ.236) THEN
       2424 |                  J = 17063
       2425 |                  GO TO 800
       2426 |              ELSE IF (KPDS(3).EQ.237) THEN
       2427 |                  J = 2538
       2428 |                  GO TO 800
       2429 |              ELSE IF (KPDS(3).EQ.238) THEN
       2430 |                  J = 55825
       2431 |                  GO TO 800
       2432 |              ELSE IF (KPDS(3).EQ.239) THEN
       2433 |                  J = 19065
       2434 |                  GO TO 800
       2435 |              ELSE IF (KPDS(3).EQ.240) THEN
       2436 |                  J = 987601
       2437 |                  GO TO 800
       2438 |              ELSE IF (KPDS(3).EQ.241) THEN
       2439 |                  J = 244305
       2440 |                  GO TO 800
       2441 |              ELSE IF (KPDS(3).EQ.242) THEN
       2442 |                  J = 235025
       2443 |                  GO TO 800
       2444 |              ELSE IF (KPDS(3).EQ.243) THEN
       2445 |                  J = 12726
       2446 |                  GO TO 800
       2447 |              ELSE IF (KPDS(3).EQ.244) THEN
       2448 |                  J = 55825
       2449 |                  GO TO 800
       2450 |              ELSE IF (KPDS(3).EQ.245) THEN
       2451 |                  J = 124992
       2452 |                  GO TO 800
       2453 |              ELSE IF (KPDS(3).EQ.246) THEN
       2454 |                  J = 123172
       2455 |                  GO TO 800
       2456 |              ELSE IF (KPDS(3).EQ.247) THEN
       2457 |                  J = 124992
       2458 |                  GO TO 800
       2459 |              ELSE IF (KPDS(3).EQ.248) THEN
       2460 |                  J = 13635
       2461 |                  GO TO 800
       2462 |              ELSE IF (KPDS(3).EQ.249) THEN
       2463 |                  J = 125881
       2464 |                  GO TO 800
       2465 |              ELSE IF (KPDS(3).EQ.250) THEN
       2466 |                  J = 13635
       2467 |                  GO TO 800
       2468 |              ELSE IF (KPDS(3).EQ.251) THEN
       2469 |                  J = 69720
       2470 |                  GO TO 800
       2471 |              ELSE IF (KPDS(3).EQ.252) THEN
       2472 |                  J = 67725
       2473 |                  GO TO 800
       2474 |              ELSE IF (KPDS(3).EQ.253) THEN
       2475 |                  J = 83552
       2476 |                  GO TO 800
       2477 |              ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2478 |                  GO TO 895
       2479 |              END IF
       2480 |              KRET  = 5
       2481 |              RETURN
       2482 |          END IF
       2483 |      END IF
       2484 |C  -------------------------------------------------------
       2485 |C                   CHECK JAPAN METEOROLOGICAL AGENCY SET
       2486 |C  -------------------------------------------------------
       2487 |      IF (KPDS(1).EQ.34) THEN
       2488 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2489 |C             PRINT *,'JMA MAP IS NOT PREDEFINED, THE GDS WILL'
       2490 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2491 |              GO TO 900
       2492 |          END IF
       2493 |      END IF
       2494 |C  -------------------------------------------------------
       2495 |C                   CHECK CANADIAN SET
       2496 |C  -------------------------------------------------------
       2497 |      IF (KPDS(1).EQ.54) THEN
       2498 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2499 |C             PRINT *,'CANADIAN MAP IS NOT PREDEFINED, THE GDS WILL'
       2500 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2501 |              GO TO 900
       2502 |          END IF
       2503 |      END IF
       2504 |C  -------------------------------------------------------
       2505 |C                   CHECK FNOC SET
       2506 |C  -------------------------------------------------------
       2507 |      IF (KPDS(1).EQ.58) THEN
       2508 |          IF (KPDS(3).EQ.220.OR.KPDS(3).EQ.221) THEN
       2509 |C                      FNOC GRID 220, 221 - MAPSIZE 3969 (63 * 63)
       2510 |              J  = 3969
       2511 |              KPTR(10)  = J
       2512 |              DO I = 1, J
       2513 |                  KBMS(I)  = .TRUE.
       2514 |              END DO
       2515 |              RETURN
       2516 |          END IF
       2517 |          IF (KPDS(3).EQ.223) THEN
       2518 |C                      FNOC GRID 223 - MAPSIZE 10512 (73 * 144)
       2519 |              J  = 10512
       2520 |              KPTR(10)  = J
       2521 |              DO I = 1, J
       2522 |                  KBMS(I)  = .TRUE.
       2523 |              END DO
       2524 |              RETURN
       2525 |          END IF
       2526 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2527 |C             PRINT *,'FNOC MAP IS NOT PREDEFINED, THE GDS WILL'
       2528 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2529 |              GO TO 900
       2530 |          END IF
       2531 |      END IF
       2532 |C  -------------------------------------------------------
       2533 |C                   CHECK UKMET SET
       2534 |C  -------------------------------------------------------
       2535 |      IF (KPDS(1).EQ.74) THEN
       2536 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2537 |              GO TO 820
       2538 |          END IF
       2539 |      END IF
       2540 |C  -------------------------------------------------------
       2541 |C                   CHECK ECMWF SET
       2542 |C  -------------------------------------------------------
       2543 |      IF (KPDS(1).EQ.98) THEN
       2544 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       2545 |              IF (KPDS(3).GE.5.AND.KPDS(3).LE.8) THEN
       2546 |                  J     = 1073
       2547 |              ELSE
       2548 |                  J     = 1369
       2549 |              END IF
       2550 |              KPTR(10)  = J
       2551 |              CALL FI637(J,KPDS,KGDS,KRET)
       2552 |              IF(KRET.NE.0) GO TO 810
       2553 |              KPTR(10)  = J  ! Reset For Modified J
       2554 |              DO 1000 I = 1, J
       2555 |                  KBMS(I) = .TRUE.
       2556 | 1000         CONTINUE
       2557 |              RETURN
       2558 |          ELSE IF (KPDS(3).GE.13.AND.KPDS(3).LE.16) THEN
       2559 |              J         = 361
       2560 |              KPTR(10)  = J
       2561 |              CALL FI637(J,KPDS,KGDS,KRET)
       2562 |              IF(KRET.NE.0) GO TO 810
       2563 |              DO 1013 I = 1, J
       2564 |                  KBMS(I) = .TRUE.
       2565 | 1013         CONTINUE
       2566 |              RETURN
       2567 |          ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2568 |                  GO TO 810
       2569 |          ELSE
       2570 |              KRET  = 5
       2571 |              RETURN
       2572 |          END IF
       2573 |      ELSE
       2574 |C         PRINT *,'CENTER ',KPDS(1),' IS NOT DEFINED'
       2575 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2576 |C             PRINT *,'GDS WILL BE USED TO UNPACK THE DATA',
       2577 |C    *                        ' MAP = ',KPDS(3)
       2578 |              GO TO 900
       2579 |          ELSE
       2580 |              KRET  = 10
       2581 |              RETURN
       2582 |          END IF
       2583 |      END IF
       2584 |C =======================================
       2585 |C
       2586 |  800 CONTINUE
       2587 |      KPTR(10)  = J
       2588 |      CALL FI637 (J,KPDS,KGDS,KRET)
       2589 |      IF(KRET.NE.0) GO TO 801
       2590 |      DO 2201 I = 1, J
       2591 |          KBMS(I)  = .TRUE.
       2592 | 2201 CONTINUE
       2593 |      RETURN
       2594 |  801 CONTINUE
       2595 |C
       2596 |C  ----- THE MAP HAS A GDS, BYTE 7 OF THE (PDS) THE GRID IDENTIFICATION
       2597 |C  ----- IS NOT 255, THE SIZE OF THE GRID IS NOT THE SAME AS THE
       2598 |C  ----- PREDEFINED SIZES OF THE U.S. GRIDS, OR KNOWN GRIDS OF THE
       2599 |C  ----- OF THE OTHER CENTERS. THE GRID CAN BE UNKNOWN, OR FROM AN
       2600 |C  ----- UNKNOWN CENTER, WE WILL USE THE INFORMATION IN THE GDS TO MAKE
       2601 |C  ----- A BIT MAP.
       2602 |C
       2603 |  810 CONTINUE
       2604 |C     PRINT *,'ECMWF PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2605 |      GO TO 895
       2606 |C
       2607 |  820 CONTINUE
       2608 |C     PRINT *,'U.K. MET PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2609 |      GO TO 895
       2610 |C
       2611 |  890 CONTINUE
       2612 |C     PRINT *,'PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2613 |  895 CONTINUE
       2614 |C     PRINT *,'THE GDS TO UNPACK THE DATA, MAP TYPE = ',KPDS(3)
       2615 |C
       2616 |  900 CONTINUE
       2617 |        J      = KGDS(2) * KGDS(3)
       2618 |C                    AFOS AFOS AFOS        SPECIAL CASE
       2619 |C                             INVOLVES NEXT SINGLE STATEMENT ONLY
       2620 |        IF (KPDS(3).EQ.211) KRET = 0
       2621 |        KPTR(10) = J
       2622 |        DO 2203 I = 1, J
       2623 |          KBMS(I) = .TRUE.
       2624 | 2203   CONTINUE
       2625 |C     PRINT *,'EXIT FI634'
       2626 |      RETURN
       2627 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi634                            Subroutine
                                 0-1709.18$
 
fi634x                           External Subroutine
                                 0-1880.20  0-1896.20  0-1919.28  0-1931.24  0-1937.20
 
fi637                            External Subroutine
                                 0-1967.16  0-1977.16  0-1987.16  0-1997.16  0-2011.16  0-2021.16  0-2031.16  0-2551.20  0-2561.20
                                 0-2588.12
 
gbyte                            External Subroutine
                                 0-1865.12  0-1870.12
 
grd21                            Static, Logical(1) (1:1369), Offset: 0, Alignment: byte
                                 0-1809.21$  0-1824.13*  0-1970.25
 
grd23                            Static, Logical(1) (1:1369), Offset: 0, Alignment: byte
                                 0-1811.21$  0-1825.13*  0-1980.25
 
grd25                            Static, Logical(1) (1:1368), Offset: 0, Alignment: byte
                                 0-1812.21$  0-1826.13*  0-1990.25
 
grd26                            Static, Logical(1) (1:1368), Offset: 0, Alignment: byte
                                 0-1813.21$  0-1827.13*  0-2000.25
 
grd50                            Static, Logical(1) (1:1188), Offset: 0, Alignment: byte
                                 0-1817.21$  0-1828.13*  0-2014.25
 
grd61                            Static, Logical(1) (1:4186), Offset: 0, Alignment: byte
                                 0-1819.21$  0-1852.13*  0-2024.25
 
grd63                            Static, Logical(1) (1:4186), Offset: 0, Alignment: byte
                                 0-1821.21$  0-1853.13*  0-2034.25
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1888.21@  0-1889.24  0-1904.21@  0-1905.24  0-1913.21@  0-1955.18@  0-1956.20  0-1969.19@
                                 0-1970.20  0-1970.31  0-1979.19@  0-1980.20  0-1980.31  0-1989.19@  0-1990.20  0-1990.31
                                 0-1999.19@  0-2000.20  0-2000.31  0-2013.19@  0-2014.20  0-2014.31  0-2023.19@  0-2024.20
                                 0-2024.31  0-2033.19@  0-2034.20  0-2034.31  0-2512.18@  0-2513.24  0-2521.18@  0-2522.24
                                 0-2554.23@  0-2555.24  0-2563.23@  0-2564.24  0-2590.15@  0-2591.16  0-2622.17@  0-2623.16
 
iand                             Pure Intrinsic
                                 0-1857.11  0-2316.24  0-2477.24  0-2488.15  0-2498.15  0-2526.15  0-2536.15  0-2567.20  0-2575.15
 
ibits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1875.11@  0-1876.23  0-1880.27  0-1889.26  0-1896.27  0-1905.26  0-1937.27
 
ii                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1930.21@
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1914.25@  0-1953.11@  0-1954.22  0-1955.25  0-1965.11@  0-1966.23  0-1967.22  0-1975.11@
                                 0-1976.23  0-1977.22  0-1985.11@  0-1986.23  0-1987.22  0-1995.11@  0-1996.23  0-1997.22
                                 0-2005.11@  0-2009.11@  0-2010.23  0-2011.22  0-2013.26  0-2019.11@  0-2020.23  0-2021.22
                                 0-2029.11@  0-2030.23  0-2031.22  0-2045.19@  0-2050.19@  0-2054.19@  0-2058.19@  0-2062.19@
                                 0-2066.19@  0-2070.19@  0-2074.19@  0-2078.19@  0-2082.19@  0-2086.19@  0-2090.19@  0-2094.19@
                                 0-2098.19@  0-2102.19@  0-2106.19@  0-2110.19@  0-2114.19@  0-2118.19@  0-2122.19@  0-2126.19@
                                 0-2130.19@  0-2134.19@  0-2138.19@  0-2142.19@  0-2146.19@  0-2150.19@  0-2154.19@  0-2158.19@
                                 0-2162.19@  0-2166.19@  0-2172.19@  0-2176.19@  0-2180.19@  0-2184.19@  0-2188.19@  0-2192.19@
                                 0-2196.19@  0-2200.19@  0-2204.19@  0-2208.19@  0-2213.19@  0-2222.19@  0-2243.19@  0-2253.19@
                                 0-2257.19@  0-2276.19@  0-2282.19@  0-2286.19@  0-2290.19@  0-2294.19@  0-2298.19@  0-2302.19@
                                 0-2306.19@  0-2310.19@  0-2314.19@  0-2322.19@  0-2325.19@  0-2328.19@  0-2331.19@  0-2334.19@
                                 0-2337.19@  0-2340.19@  0-2343.19@  0-2346.19@  0-2349.19@  0-2352.19@  0-2355.19@  0-2358.19@
                                 0-2361.19@  0-2364.19@  0-2367.19@  0-2370.19@  0-2373.19@  0-2376.19@  0-2379.19@  0-2382.19@
                                 0-2385.19@  0-2388.19@  0-2391.19@  0-2394.19@  0-2397.19@  0-2400.19@  0-2403.19@  0-2406.19@
                                 0-2409.19@  0-2412.19@  0-2415.19@  0-2418.19@  0-2421.19@  0-2424.19@  0-2427.19@  0-2430.19@
                                 0-2433.19@  0-2436.19@  0-2439.19@  0-2442.19@  0-2445.19@  0-2448.19@  0-2451.19@  0-2454.19@
                                 0-2457.19@  0-2460.19@  0-2463.19@  0-2466.19@  0-2469.19@  0-2472.19@  0-2475.19@  0-2510.15@
                                 0-2511.27  0-2512.25  0-2519.15@  0-2520.27  0-2521.25  0-2546.19@  0-2548.19@  0-2550.27
                                 0-2551.26  0-2553.27  0-2554.30  0-2559.15@  0-2560.27  0-2561.26  0-2563.30  0-2587.19  0-2588.19
                                 0-2590.22  0-2617.9@  0-2621.20  0-2622.24
 
k                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1915.29@  0-1922.29@
 
kadd                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1882.19@  0-1884.19@  0-1886.19@  0-1888.28  0-1891.39  0-1898.19@  0-1900.19@  0-1902.19@
                                 0-1904.28  0-1907.39
 
kbits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1912.15@  0-1916.27@  0-1916.37  0-1917.32  0-1919.57  0-1921.23@  0-1921.29  0-1923.27@
                                 0-1923.37  0-1924.32  0-1931.53  0-1933.19@  0-1933.25
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-1798.21$  0-1709.44  0-1880.46  0-1889.19@  0-1896.46  0-1905.19@  0-1917.27@  0-1919.52
                                 0-1924.27@  0-1931.48  0-1937.46  0-1956.15@  0-1970.15@  0-1980.15@  0-1990.15@  0-2000.15@
                                 0-2014.15@  0-2024.15@  0-2034.15@  0-2513.19@  0-2522.19@  0-2555.19@  0-2564.19@  0-2591.11@
                                 0-2623.11@
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1804.21$  0-1709.39  0-1953.20  0-1953.30  0-1967.29  0-1977.29  0-1987.29  0-1997.29  0-2011.29
                                 0-2021.29  0-2031.29  0-2551.33  0-2561.33  0-2588.26  0-2617.18  0-2617.28
 
kin                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1911.15@  0-1919.35  0-1920.39  0-1921.35  0-1927.19@  0-1927.28  0-1931.31  0-1932.35  0-1933.31
 
kpad                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1910.15@  0-1915.36  0-1922.36  0-1928.19@  0-1928.28
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1803.21$  0-1709.34  0-1857.16  0-1877.15  0-1877.32  0-1877.49  0-1878.23  0-1878.40  0-1881.19
                                 0-1883.24  0-1883.41  0-1893.20  0-1893.37  0-1893.54  0-1894.23  0-1894.40  0-1897.19  0-1899.24
                                 0-1899.41  0-1909.20  0-1951.11  0-1963.11  0-1963.28  0-1967.24  0-1973.16  0-1973.33  0-1977.24
                                 0-1983.16  0-1987.24  0-1993.16  0-1997.24  0-2003.16  0-2003.34  0-2007.16  0-2007.33  0-2011.24
                                 0-2017.16  0-2017.33  0-2021.24  0-2027.16  0-2027.33  0-2031.24  0-2041.11  0-2042.15  0-2043.19
                                 0-2048.19  0-2052.24  0-2056.24  0-2060.24  0-2064.24  0-2068.24  0-2072.24  0-2072.41  0-2076.24
                                 0-2076.41  0-2080.24  0-2080.41  0-2084.24  0-2084.42  0-2088.24  0-2092.24  0-2096.24  0-2096.41
                                 0-2100.24  0-2100.42  0-2104.24  0-2108.24  0-2112.24  0-2116.24  0-2116.42  0-2120.24  0-2120.41
                                 0-2124.24  0-2128.24  0-2132.24  0-2136.24  0-2140.24  0-2144.24  0-2148.24  0-2152.24  0-2156.24
                                 0-2160.24  0-2164.24  0-2169.20  0-2169.39  0-2170.19  0-2174.24  0-2178.24  0-2182.24  0-2186.24
                                 0-2190.24  0-2194.24  0-2198.24  0-2202.24  0-2206.24  0-2211.24  0-2220.25  0-2241.24  0-2251.24
                                 0-2255.24  0-2274.24  0-2280.24  0-2284.24  0-2288.24  0-2292.24  0-2296.24  0-2300.24  0-2304.24
                                 0-2308.24  0-2312.24  0-2316.29  0-2320.20  0-2321.19  0-2324.24  0-2327.24  0-2327.42  0-2330.24
                                 0-2333.24  0-2336.24  0-2339.24  0-2342.24  0-2345.24  0-2348.24  0-2351.24  0-2354.24  0-2357.24
                                 0-2360.24  0-2363.24  0-2366.24  0-2369.24  0-2372.24  0-2375.24  0-2378.24  0-2381.24  0-2384.24
                                 0-2387.24  0-2390.24  0-2393.24  0-2396.24  0-2399.24  0-2402.24  0-2405.24  0-2408.24  0-2411.24
                                 0-2414.24  0-2417.24  0-2420.24  0-2423.24  0-2426.24  0-2429.24  0-2432.24  0-2435.24  0-2438.24
                                 0-2441.24  0-2444.24  0-2447.24  0-2450.24  0-2453.24  0-2456.24  0-2459.24  0-2462.24  0-2465.24
                                 0-2468.24  0-2471.24  0-2474.24  0-2477.29  0-2487.11  0-2488.20  0-2497.11  0-2498.20  0-2507.11
                                 0-2508.15  0-2508.33  0-2517.15  0-2526.20  0-2535.11  0-2536.20  0-2543.11  0-2544.15  0-2544.32
                                 0-2545.19  0-2545.36  0-2551.28  0-2558.20  0-2558.38  0-2561.28  0-2567.25  0-2575.20  0-2588.21
                                 0-2620.13
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1801.21$  0-1709.29  0-1861.7@  0-1861.17  0-1861.28  0-1861.42  0-1861.56  0-1865.24  0-1865.33
                                 0-1866.7@  0-1866.18  0-1870.24  0-1870.33  0-1871.7@  0-1871.18  0-1873.13  0-1875.22  0-1875.41
                                 0-1876.11@  0-1880.33  0-1891.15@  0-1891.28  0-1896.33  0-1907.15@  0-1907.28  0-1919.39
                                 0-1920.23@  0-1920.31  0-1931.35  0-1932.19@  0-1932.27  0-1937.33  0-1954.11@  0-1966.11@
                                 0-1976.11@  0-1986.11@  0-1996.11@  0-2010.11@  0-2020.11@  0-2030.11@  0-2511.15@  0-2520.15@
                                 0-2550.15@  0-2553.15@  0-2560.15@  0-2587.7@  0-2621.9@
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1806.21$  0-1709.49  0-1942.11@  0-1947.7@  0-1967.34  0-1968.14  0-1977.34  0-1978.14  0-1987.34
                                 0-1988.14  0-1997.34  0-1998.14  0-2011.34  0-2012.14  0-2021.34  0-2022.14  0-2031.34  0-2032.14
                                 0-2480.15@  0-2551.38  0-2552.18  0-2561.38  0-2562.18  0-2570.15@  0-2580.15@  0-2588.31
                                 0-2589.10  0-2620.29@
 
mask                             Static, Integer(4) (1:8), Offset: 0, Alignment: full word
                                 0-1807.21$  0-1854.13*
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-1795.21$  0-1709.24  0-1865.19  0-1870.19  0-1880.41  0-1896.41  0-1919.47  0-1931.43  0-1937.41
 
** fi634   === End of Compilation 5 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       2628 |C-----------------------------------------------------------------------
       2629 |      SUBROUTINE FI634X(NPTS,NSKP,MSGA,KBMS)
       2630 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       2631 |C                .      .    .                                       .
       2632 |C SUBPROGRAM:    FI634X      EXTRACT BIT MAP
       2633 |C   PRGMMR: IREDELL          ORG: W/NP23     DATE: 91-09-19
       2634 |C
       2635 |C ABSTRACT: EXTRACT THE PACKED BITMAP INTO A LOGICAL ARRAY.
       2636 |C
       2637 |C PROGRAM HISTORY LOG:
       2638 |C   97-09-19  IREDELL     VECTORIZED BITMAP DECODER
       2639 |C
       2640 |C USAGE:    CALL FI634X(NPTS,NSKP,MSGA,KBMS)
       2641 |C   INPUT ARGUMENT LIST:
       2642 |C     NPTS       - INTEGER NUMBER OF POINTS IN THE BITMAP FIELD
       2643 |C     NSKP       - INTEGER NUMBER OF BITS TO SKIP IN GRIB MESSAGE
       2644 |C     MSGA       - CHARACTER*1 GRIB MESSAGE
       2645 |C
       2646 |C   OUTPUT ARGUMENT LIST:
       2647 |C     KBMS       - LOGICAL*1 BITMAP
       2648 |C
       2649 |C REMARKS:
       2650 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       2651 |C
       2652 |C ATTRIBUTES:
       2653 |C   LANGUAGE: FORTRAN 77
       2654 |C   MACHINE:  CRAY
       2655 |C
       2656 |C$$$
       2657 |      CHARACTER*1   MSGA(*)
       2658 |      LOGICAL*1     KBMS(NPTS)
       2659 |      INTEGER       ICHK(NPTS)
       2660 |C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2661 |      CALL GBYTES(MSGA,ICHK,NSKP,1,0,NPTS)
       2662 |      KBMS=ICHK.NE.0
       2663 |C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2664 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi634x                           Subroutine
                                 0-2629.18$
 
gbytes                           External Subroutine
                                 0-2661.12
 
ichk                             Controlled Automatic, Integer(4) (1:?), Offset: 0, Alignment: full word
                                 0-2659.21$  0-2661.24  0-2662.12
 
kbms                             Reference argument, Logical(1) (1:?), Offset: 0, Alignment: byte
                                 0-2658.21$  0-2629.40  0-2662.7@
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-2657.21$  0-2629.35  0-2661.19
 
npts                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2629.25  0-2658.26  0-2658.26  0-2659.26  0-2659.26  0-2661.38
 
nskp                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2629.30  0-2661.29
 
** fi634x   === End of Compilation 6 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       2665 |      SUBROUTINE FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
       2666 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       2667 |C                .      .    .                                       .
       2668 |C SUBPROGRAM:    FI635         EXTRACT GRIB DATA ELEMENTS FROM BDS
       2669 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       2670 |C
       2671 |C ABSTRACT: EXTRACT GRIB DATA FROM BINARY DATA SECTION AND PLACE
       2672 |C           INTO OUTPUT ARRAY IN PROPER POSITION.
       2673 |C
       2674 |C PROGRAM HISTORY LOG:
       2675 |C   91-09-13  CAVANAUGH
       2676 |C   94-04-01  CAVANAUGH  MODIFIED CODE TO INCLUDE DECIMAL SCALING WHEN
       2677 |C                        CALCULATING THE VALUE OF DATA POINTS SPECIFIED
       2678 |C                        AS BEING EQUAL TO THE REFERENCE VALUE
       2679 |C   94-11-10  FARLEY     INCREASED MXSIZE FROM 72960 TO 260000
       2680 |C                        FOR .5 DEGREE SST ANALYSIS FIELDS
       2681 |C   95-10-31  IREDELL    REMOVED SAVES AND PRINTS
       2682 |C   98-08-31  IREDELL    ELIMINATED NEED FOR MXSIZE
       2683 |C
       2684 |C USAGE:    CALL FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
       2685 |C   INPUT ARGUMENT LIST:
       2686 |C     MSGA       - ARRAY CONTAINING GRIB MESSAGE
       2687 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       2688 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       2689 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       2690 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       2691 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       2692 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       2693 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       2694 |C          (7)   - VALUE OF CURRENT BYTE
       2695 |C          (8)   - BIT POINTER
       2696 |C          (9)   - GRIB START BIT NR
       2697 |C         (10)   - GRIB/GRID ELEMENT COUNT
       2698 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       2699 |C         (12)   - BIT MAP FLAG
       2700 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       2701 |C         (14)   - BDS FLAGS
       2702 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       2703 |C         (16)   - RESERVED
       2704 |C         (17)   - RESERVED
       2705 |C         (18)   - RESERVED
       2706 |C         (19)   - BINARY SCALE FACTOR
       2707 |C         (20)   - NUM BITS USED TO PACK EACH DATUM
       2708 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
       2709 |C                  SEE INITIAL ROUTINE
       2710 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
       2711 |C
       2712 |C   OUTPUT ARGUMENT LIST:
       2713 |C     KBDS       - INFORMATION EXTRACTED FROM BINARY DATA SECTION
       2714 |C     KBDS(1)  - N1
       2715 |C     KBDS(2)  - N2
       2716 |C     KBDS(3)  - P1
       2717 |C     KBDS(4)  - P2
       2718 |C     KBDS(5)  - BIT POINTER TO 2ND ORDER WIDTHS
       2719 |C     KBDS(6)  -  "    "     "   "   "    BIT MAPS
       2720 |C     KBDS(7)  -  "    "     "  FIRST ORDER VALUES
       2721 |C     KBDS(8)  -  "    "     "  SECOND ORDER VALUES
       2722 |C     KBDS(9)  -  "    "     START OF BDS
       2723 |C     KBDS(10) -  "    "     MAIN BIT MAP
       2724 |C     KBDS(11) - BINARY SCALING
       2725 |C     KBDS(12) - DECIMAL SCALING
       2726 |C     KBDS(13) - BIT WIDTH OF FIRST ORDER VALUES
       2727 |C     KBDS(14) - BIT MAP FLAG
       2728 |C                 0 = NO SECOND ORDER BIT MAP
       2729 |C                 1 = SECOND ORDER BIT MAP PRESENT
       2730 |C     KBDS(15) - SECOND ORDER BIT WIDTH
       2731 |C     KBDS(16) - CONSTANT / DIFFERENT WIDTHS
       2732 |C                 0 = CONSTANT WIDTHS
       2733 |C                 1 = DIFFERENT WIDTHS
       2734 |C     KBDS(17) - SINGLE DATUM / MATRIX
       2735 |C                 0 = SINGLE DATUM AT EACH GRID POINT
       2736 |C                 1 = MATRIX OF VALUES AT EACH GRID POINT
       2737 |C       (18-20)- UNUSED
       2738 |C
       2739 |C     DATA       - REAL*4 ARRAY OF GRIDDED ELEMENTS IN GRIB MESSAGE.
       2740 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       2741 |C                  SEE INPUT LIST
       2742 |C     KRET       - ERROR RETURN
       2743 |C
       2744 |C REMARKS:
       2745 |C     ERROR RETURN
       2746 |C              3 = UNPACKED FIELD IS LARGER THAN 65160
       2747 |C              6 = DOES NOT MATCH NR OF ENTRIES FOR THIS GRIB/GRID
       2748 |C              7 = NUMBER OF BITS IN FILL TOO LARGE
       2749 |C
       2750 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       2751 |C
       2752 |C ATTRIBUTES:
       2753 |C   LANGUAGE: FORTRAN 77
       2754 |C   MACHINE:  HDS9000
       2755 |C
       2756 |C$$$
       2757 |C
       2758 |      CHARACTER*1   MSGA(*)
       2759 |      CHARACTER*1   KK(8)
       2760 |      CHARACTER*1   CKREF(8)
       2761 |C
       2762 |      LOGICAL*1     KBMS(*)
       2763 |C
       2764 |      INTEGER       KPDS(*)
       2765 |      INTEGER       KGDS(*)
       2766 |      INTEGER       KBDS(20)
       2767 |      INTEGER       KPTR(*)
       2768 |      INTEGER       NRBITS
       2769 |      INTEGER       KREF
       2770 |      INTEGER       KKK
       2771 |      INTEGER,ALLOCATABLE::  KSAVE(:)
       2772 |      INTEGER       KSCALE
       2773 |C
       2774 |      REAL          DATA(*)
       2775 |      REAL          REFNCE
       2776 |      REAL          SCALE
       2777 |      REAL          REALKK
       2778 |C
       2779 |      EQUIVALENCE   (CKREF(1),KREF,REFNCE)
       2780 |      EQUIVALENCE   (KK(1),KKK,REALKK)
       2781 |C
       2782 |C
       2783 |C     CHANGED HEX VALUES TO DECIMAL TO MAKE CODE MORE PORTABLE
       2784 |C
       2785 |C  *************************************************************
       2786 |C     PRINT *,'ENTER FI635'
       2787 |C              SET UP BIT POINTER
       2788 |      KPTR(8) = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8)
       2789 |     *                + (KPTR(5)*8) + 24
       2790 |C  ------------- EXTRACT FLAGS
       2791 |C            BYTE 4
       2792 |      CALL GBYTE(MSGA,KPTR(14),KPTR(8),4)
       2793 |      KPTR(8)  = KPTR(8) + 4
       2794 |C  --------- NR OF UNUSED BITS IN SECTION 4
       2795 |      CALL GBYTE(MSGA,KPTR(15),KPTR(8),4)
       2796 |      KPTR(8)  = KPTR(8) + 4
       2797 |      KEND    = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8)
       2798 |     *                + (KPTR(5)*8) + KPTR(6) * 8 - KPTR(15)
       2799 |C  ------------- GET SCALE FACTOR
       2800 |C            BYTES 5,6
       2801 |C                                  CHECK SIGN
       2802 |      CALL GBYTE (MSGA,KSIGN,KPTR(8),1)
       2803 |      KPTR(8)  = KPTR(8) + 1
       2804 |C                                  GET ABSOLUTE SCALE VALUE
       2805 |      CALL GBYTE (MSGA,KSCALE,KPTR(8),15)
       2806 |      KPTR(8)  = KPTR(8) + 15
       2807 |      IF (KSIGN.GT.0) THEN
       2808 |          KSCALE  = - KSCALE
       2809 |      END IF
       2810 |      SCALE = 2.0**KSCALE
       2811 |      KPTR(19)=KSCALE
       2812 |C  ------------ GET REFERENCE VALUE
       2813 |C            BYTES 7,10
       2814 |      CALL GBYTE (MSGA,KREF,KPTR(8),32)
       2815 |      KPTR(8)  = KPTR(8) + 32
       2816 |C
       2817 |C     THE NEXT CODE WILL CONVERT THE IBM370 FLOATING POINT
       2818 |C     TO THE FLOATING POINT USED ON YOUR COMPUTER.
       2819 |C
       2820 |C     1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
       2821 |C     LW = 4 OR 8;  IF 8 MAY BE A CRAY
       2822 |C
       2823 |      CALL W3FI01(LW)
       2824 |      IF (LW.EQ.4) THEN
       2825 |        CALL GBYTE (CKREF,JSGN,0,1)
       2826 |        CALL GBYTE (CKREF,JEXP,1,7)
       2827 |        CALL GBYTE (CKREF,IFR,8,24)
       2828 |      ELSE
       2829 |        CALL GBYTE (CKREF,JSGN,32,1)
       2830 |        CALL GBYTE (CKREF,JEXP,33,7)
       2831 |        CALL GBYTE (CKREF,IFR,40,24)
       2832 |      ENDIF
       2833 |C     PRINT *,109,JSGN,JEXP,IFR
       2834 |C 109 FORMAT (' JSGN,JEXP,IFR = ',3(1X,Z8))
       2835 |      IF (IFR.EQ.0) THEN
       2836 |          REFNCE  = 0.0
       2837 |      ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
       2838 |          REFNCE  = 0.0
       2839 |      ELSE
       2840 |          REFNCE  = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
       2841 |          IF (JSGN.NE.0) REFNCE = - REFNCE
       2842 |      END IF
       2843 |C     PRINT *,'SCALE ',SCALE,' REF VAL ',KREF,REFNCE
       2844 |C  ------------- NUMBER OF BITS SPECIFIED FOR EACH ENTRY
       2845 |C            BYTE 11
       2846 |      CALL GBYTE (MSGA,KBITS,KPTR(8),8)
       2847 |      KPTR(8)  = KPTR(8) + 8
       2848 |      KBDS(4)  = KBITS
       2849 |C     KBDS(13) = KBITS
       2850 |      KPTR(20) = KBITS
       2851 |      IBYT12   = KPTR(8)
       2852 |C  ------------------ IF THERE ARE NO EXTENDED FLAGS PRESENT
       2853 |C                     THIS IS WHERE DATA BEGINS AND AND THE PROCESSING
       2854 |C                     INCLUDED IN THE FOLLOWING IF...END IF
       2855 |C                     WILL BE SKIPPED
       2856 |C     PRINT *,'BASIC FLAGS =',KPTR(14) ,IAND(KPTR(14),1)
       2857 |      IF (IAND(KPTR(14),1).EQ.0) THEN
       2858 |C         PRINT *,'NO EXTENDED FLAGS'
       2859 |      ELSE
       2860 |C            BYTES 12,13
       2861 |          CALL GBYTE (MSGA,KOCTET,KPTR(8),16)
       2862 |          KPTR(8)  = KPTR(8) + 16
       2863 |C  --------------------------- EXTENDED FLAGS
       2864 |C            BYTE 14
       2865 |          CALL GBYTE (MSGA,KXFLAG,KPTR(8),8)
       2866 |C         PRINT *,'HAVE EXTENDED FLAGS',KXFLAG
       2867 |          KPTR(8)  = KPTR(8) + 8
       2868 |          IF (IAND(KXFLAG,16).EQ.0) THEN
       2869 |C                          SECOND ORDER VALUES CONSTANT WIDTHS
       2870 |              KBDS(16)  = 0
       2871 |          ELSE
       2872 |C                          SECOND ORDER VALUES DIFFERENT WIDTHS
       2873 |              KBDS(16)  = 1
       2874 |          END IF
       2875 |          IF (IAND (KXFLAG,32).EQ.0) THEN
       2876 |C                         NO SECONDARY BIT MAP
       2877 |              KBDS(14)  = 0
       2878 |          ELSE
       2879 |C                         HAVE SECONDARY BIT MAP
       2880 |              KBDS(14)  = 1
       2881 |          END IF
       2882 |          IF (IAND (KXFLAG,64).EQ.0) THEN
       2883 |C                         SINGLE DATUM AT GRID POINT
       2884 |              KBDS(17)  = 0
       2885 |          ELSE
       2886 |C                         MATRIX OF VALUES AT GRID POINT
       2887 |              KBDS(17)  = 1
       2888 |          END IF
       2889 |C  ---------------------- NR - FIRST DIMENSION (ROWS) OF EACH MATRIX
       2890 |C            BYTES 15,16
       2891 |          CALL GBYTE (MSGA,NR,KPTR(8),16)
       2892 |          KPTR(8)  = KPTR(8) + 16
       2893 |C  ---------------------- NC - SECOND DIMENSION (COLS) OF EACH MATRIX
       2894 |C            BYTES 17,18
       2895 |          CALL GBYTE (MSGA,NC,KPTR(8),16)
       2896 |          KPTR(8)  = KPTR(8) + 16
       2897 |C  ---------------------- NRV - FIRST DIM COORD VALS
       2898 |C            BYTE 19
       2899 |          CALL GBYTE (MSGA,NRV,KPTR(8),8)
       2900 |          KPTR(8)  = KPTR(8) + 8
       2901 |C  ---------------------- NC1 - NR COEFF'S OR VALUES
       2902 |C            BYTE 20
       2903 |          CALL GBYTE (MSGA,NC1,KPTR(8),8)
       2904 |          KPTR(8)  = KPTR(8) + 8
       2905 |C  ---------------------- NCV - SECOND DIM COORD OR VALUE
       2906 |C            BYTE 21
       2907 |          CALL GBYTE (MSGA,NCV,KPTR(8),8)
       2908 |          KPTR(8)  = KPTR(8) + 8
       2909 |C  ---------------------- NC2 - NR COEFF'S OR VALS
       2910 |C            BYTE 22
       2911 |          CALL GBYTE (MSGA,NC2,KPTR(8),8)
       2912 |          KPTR(8)  = KPTR(8) + 8
       2913 |C  ---------------------- KPHYS1 - FIRST DIM PHYSICAL SIGNIF
       2914 |C            BYTE 23
       2915 |          CALL GBYTE (MSGA,KPHYS1,KPTR(8),8)
       2916 |          KPTR(8)  = KPTR(8) + 8
       2917 |C  ---------------------- KPHYS2 - SECOND DIM PHYSICAL SIGNIF
       2918 |C            BYTE 24
       2919 |          CALL GBYTE (MSGA,KPHYS2,KPTR(8),8)
       2920 |          KPTR(8)  = KPTR(8) + 8
       2921 |C            BYTES 25-N
       2922 |      END IF
       2923 |      IF (KBITS.EQ.0) THEN
       2924 |C                       HAVE NO BDS ENTRIES, ALL ENTRIES = REFNCE
       2925 |          SCAL10  = 10.0 ** KPDS(22)
       2926 |          SCAL10  = 1.0 / SCAL10
       2927 |          REFN10  = REFNCE * SCAL10
       2928 |          KENTRY = KPTR(10)
       2929 |          DO 210 I = 1, KENTRY
       2930 |              DATA(I) = 0.0
       2931 |              IF (KBMS(I)) THEN
       2932 |                   DATA(I) = REFN10
       2933 |              END IF
       2934 |  210     CONTINUE
       2935 |          GO TO 900
       2936 |      END IF
       2937 |C     PRINT *,'KEND ',KEND,' KPTR(8) ',KPTR(8),'KBITS ',KBITS
       2938 |      KNR     = (KEND - KPTR(8)) / KBITS
       2939 |C     PRINT *,'NUMBER OF ENTRIES IN DATA ARRAY',KNR
       2940 |C  --------------------
       2941 |C       CYCLE THRU BDS UNTIL HAVE USED ALL (SPECIFIED NUMBER)
       2942 |C       ENTRIES.
       2943 |C  ------------- UNUSED BITS IN DATA AREA
       2944 |C NUMBER OF BYTES IN DATA AREA
       2945 |      NRBYTE  = KPTR(6) - 11
       2946 |C  ------------- TOTAL NR OF USABLE BITS
       2947 |      NRBITS  = NRBYTE * 8  - KPTR(15)
       2948 |C  ------------- TOTAL NR OF ENTRIES
       2949 |      KENTRY = NRBITS / KBITS
       2950 |C                             ALLOCATE KSAVE
       2951 |      ALLOCATE(KSAVE(KENTRY))
       2952 |C
       2953 |C     IF (IAND(KPTR(14),2).EQ.0) THEN
       2954 |C        PRINT *,'SOURCE VALUES IN FLOATING POINT'
       2955 |C     ELSE
       2956 |C        PRINT *,'SOURCE VALUES IN INTEGER'
       2957 |C     END IF
       2958 |C
       2959 |      IF (IAND(KPTR(14),8).EQ.0) THEN
       2960 |C        PRINT *,'PROCESSING GRID POINT DATA'
       2961 |         IF (IAND(KPTR(14),4).EQ.0) THEN
       2962 |C            PRINT *,'    WITH SIMPLE PACKING'
       2963 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       2964 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       2965 |                 GO TO 4000
       2966 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       2967 |C                PRINT *,'        WITH ADDITIONAL FLAGS',KXFLAG
       2968 |                 IF (KBDS(17).EQ.0) THEN
       2969 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       2970 |                     IF (KBDS(14).EQ.0) THEN
       2971 |C                        PRINT *,'            NO SEC BIT MAP'
       2972 |                         IF (KBDS(16).EQ.0) THEN
       2973 |C                            PRINT *,'            SECOND ORDER',
       2974 |C    *                          ' VALUES CONSTANT WIDTH'
       2975 |                         ELSE IF (KBDS(16).NE.0) THEN
       2976 |C                            PRINT *,'            SECOND ORDER',
       2977 |C    *                            ' VALUES DIFFERENT WIDTHS'
       2978 |                         END IF
       2979 |                     ELSE IF (KBDS(14).NE.0) THEN
       2980 |C                        PRINT *,'            SEC BIT MAP'
       2981 |                         IF (KBDS(16).EQ.0) THEN
       2982 |C                             PRINT *,'            SECOND ORDER',
       2983 |C    *                              ' VALUES CONSTANT WIDTH'
       2984 |                         ELSE IF (KBDS(16).NE.0) THEN
       2985 |C                            PRINT *,'            SECOND ORDER',
       2986 |C    *                             ' VALUES DIFFERENT WIDTHS'
       2987 |                         END IF
       2988 |                     END IF
       2989 |                 ELSE IF (KBDS(17).NE.0) THEN
       2990 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       2991 |                     IF (KBDS(14).EQ.0) THEN
       2992 |C                        PRINT *,'            NO SEC BIT MAP'
       2993 |                         IF (KBDS(16).EQ.0) THEN
       2994 |C                            PRINT *,'            SECOND ORDER',
       2995 |C    *                          ' VALUES CONSTANT WIDTH'
       2996 |                         ELSE IF (KBDS(16).NE.0) THEN
       2997 |C                            PRINT *,'            SECOND ORDER',
       2998 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2999 |                         END IF
       3000 |                     ELSE IF (KBDS(14).NE.0) THEN
       3001 |C                        PRINT *,'            SEC BIT MAP'
       3002 |                         IF (KBDS(16).EQ.0) THEN
       3003 |C                            PRINT *,'            SECOND ORDER',
       3004 |C    *                             ' VALUES CONSTANT WIDTH'
       3005 |                         ELSE IF (KBDS(16).NE.0) THEN
       3006 |C                            PRINT *,'            SECOND ORDER',
       3007 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3008 |                         END IF
       3009 |                     END IF
       3010 |                 END IF
       3011 |             END IF
       3012 |         ELSE IF (IAND(KPTR(14),4).NE.0) THEN
       3013 |C            PRINT *,'    WITH COMPLEX/SECOND ORDER PACKING'
       3014 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       3015 |C                    PRINT *,'        WITH NO ADDITIONAL FLAGS'
       3016 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       3017 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       3018 |                 IF (KBDS(17).EQ.0) THEN
       3019 |C                    PRINT *,'            SINGLE DATUM AT EACH PT'
       3020 |                     IF (KBDS(14).EQ.0) THEN
       3021 |C                            PRINT *,'            NO SEC BIT MAP'
       3022 |                         IF (KBDS(16).EQ.0) THEN
       3023 |C                            PRINT *,'            SECOND ORDER',
       3024 |C    *                             ' VALUES CONSTANT WIDTH'
       3025 |                         ELSE IF (KBDS(16).NE.0) THEN
       3026 |C                            PRINT *,'            SECOND ORDER',
       3027 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3028 |                         END IF
       3029 |C                                       ROW BY ROW - COL BY COL
       3030 |                         CALL FI636 (DATA,MSGA,KBMS,
       3031 |     *                                         REFNCE,KPTR,KPDS,KGDS)
       3032 |                         GO TO 900
       3033 |                     ELSE IF (KBDS(14).NE.0) THEN
       3034 |C                        PRINT *,'            SEC BIT MAP'
       3035 |                         IF (KBDS(16).EQ.0) THEN
       3036 |C                                PRINT *,'            SECOND ORDER',
       3037 |C    *                              ' VALUES CONSTANT WIDTH'
       3038 |                         ELSE IF (KBDS(16).NE.0) THEN
       3039 |C                                PRINT *,'            SECOND ORDER',
       3040 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3041 |                         END IF
       3042 |                         CALL FI636 (DATA,MSGA,KBMS,
       3043 |     *                                         REFNCE,KPTR,KPDS,KGDS)
       3044 |                         GO TO 900
       3045 |                     END IF
       3046 |                 ELSE IF (KBDS(17).NE.0) THEN
       3047 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       3048 |                     IF (KBDS(14).EQ.0) THEN
       3049 |C                        PRINT *,'            NO SEC BIT MAP'
       3050 |                         IF (KBDS(16).EQ.0) THEN
       3051 |C                              PRINT *,'            SECOND ORDER',
       3052 |C    *                              ' VALUES CONSTANT WIDTH'
       3053 |                         ELSE IF (KBDS(16).NE.0) THEN
       3054 |C                            PRINT *,'            SECOND ORDER',
       3055 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3056 |                         END IF
       3057 |                     ELSE IF (KBDS(14).NE.0) THEN
       3058 |C                        PRINT *,'            SEC BIT MAP'
       3059 |                         IF (KBDS(16).EQ.0) THEN
       3060 |C                              PRINT *,'            SECOND ORDER',
       3061 |C    *                              ' VALUES CONSTANT WIDTH'
       3062 |                         ELSE IF (KBDS(16).NE.0) THEN
       3063 |C                                PRINT *,'            SECOND ORDER',
       3064 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3065 |                         END IF
       3066 |                     END IF
       3067 |                 END IF
       3068 |             END IF
       3069 |         END IF
       3070 |      ELSE IF (IAND(KPTR(14),8).NE.0) THEN
       3071 |C        PRINT *,'PROCESSING SPHERICAL HARMONIC COEFFICIENTS'
       3072 |         IF (IAND(KPTR(14),4).EQ.0) THEN
       3073 |C            PRINT *,'    WITH SIMPLE PACKING'
       3074 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       3075 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       3076 |                 GO TO 5000
       3077 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       3078 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       3079 |                 IF (KBDS(17).EQ.0) THEN
       3080 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       3081 |                     IF (KBDS(14).EQ.0) THEN
       3082 |C                        PRINT *,'            NO SEC BIT MAP'
       3083 |                         IF (KBDS(16).EQ.0) THEN
       3084 |C                            PRINT *,'            SECOND ORDER',
       3085 |C    *                              ' VALUES CONSTANT WIDTH'
       3086 |                         ELSE IF (KBDS(16).NE.0) THEN
       3087 |C                            PRINT *,'            SECOND ORDER',
       3088 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3089 |                         END IF
       3090 |                     ELSE IF (KBDS(14).NE.0) THEN
       3091 |C                        PRINT *,'            SEC BIT MAP'
       3092 |                         IF (KBDS(16).EQ.0) THEN
       3093 |C                            PRINT *,'            SECOND ORDER',
       3094 |C    *                              ' VALUES CONSTANT WIDTH'
       3095 |                         ELSE IF (KBDS(16).NE.0) THEN
       3096 |C                            PRINT *,'            SECOND ORDER',
       3097 |C    *                            ' VALUES DIFFERENT WIDTHS'
       3098 |                         END IF
       3099 |                     END IF
       3100 |                 ELSE IF (KBDS(17).NE.0) THEN
       3101 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       3102 |                     IF (KBDS(14).EQ.0) THEN
       3103 |C                        PRINT *,'            NO SEC BIT MAP'
       3104 |                         IF (KBDS(16).EQ.0) THEN
       3105 |C                            PRINT *,'            SECOND ORDER',
       3106 |C    *                              ' VALUES CONSTANT WIDTH'
       3107 |                         ELSE IF (KBDS(16).NE.0) THEN
       3108 |C                            PRINT *,'            SECOND ORDER',
       3109 |C    *                             ' VALUES DIFFERENT WIDTHS'
       3110 |                         END IF
       3111 |                     ELSE IF (KBDS(14).NE.0) THEN
       3112 |C                        PRINT *,'            SEC BIT MAP'
       3113 |                         IF (KBDS(16).EQ.0) THEN
       3114 |C                            PRINT *,'            SECOND ORDER',
       3115 |C    *                              ' VALUES CONSTANT WIDTH'
       3116 |                         ELSE IF (KBDS(16).NE.0) THEN
       3117 |C                            PRINT *,'            SECOND ORDER',
       3118 |C    *                             ' VALUES DIFFERENT WIDTHS'
       3119 |                         END IF
       3120 |                     END IF
       3121 |                 END IF
       3122 |             END IF
       3123 |         ELSE IF (IAND(KPTR(14),4).NE.0) THEN
       3124 |C                                  COMPLEX/SECOND ORDER PACKING
       3125 |C            PRINT *,'    WITH COMPLEX/SECOND ORDER PACKING'
       3126 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       3127 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       3128 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       3129 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       3130 |                 IF (KBDS(17).EQ.0) THEN
       3131 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       3132 |                     IF (KBDS(14).EQ.0) THEN
       3133 |C                        PRINT *,'            NO SEC BIT MAP'
       3134 |                         IF (KBDS(16).EQ.0) THEN
       3135 |C                            PRINT *,'            SECOND ORDER',
       3136 |C    *                             ' VALUES CONSTANT WIDTH'
       3137 |                         ELSE IF (KBDS(16).NE.0) THEN
       3138 |C                            PRINT *,'            SECOND ORDER',
       3139 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3140 |                         END IF
       3141 |                     ELSE IF (KBDS(14).NE.0) THEN
       3142 |C                        PRINT *,'            SEC BIT MAP'
       3143 |                         IF (KBDS(16).EQ.0) THEN
       3144 |C                            PRINT *,'            SECOND ORDER',
       3145 |C    *                              ' VALUES CONSTANT WIDTH'
       3146 |                         ELSE IF (KBDS(16).NE.0) THEN
       3147 |C                            PRINT *,'            SECOND ORDER',
       3148 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3149 |                         END IF
       3150 |                     END IF
       3151 |                 ELSE IF (KBDS(17).NE.0) THEN
       3152 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       3153 |                     IF (KBDS(14).EQ.0) THEN
       3154 |C                        PRINT *,'            NO SEC BIT MAP'
       3155 |                         IF (KBDS(16).EQ.0) THEN
       3156 |C                            PRINT *,'            SECOND ORDER',
       3157 |C    *                            ' VALUES CONSTANT WIDTH'
       3158 |                         ELSE IF (KBDS(16).NE.0) THEN
       3159 |C                            PRINT *,'            SECOND ORDER',
       3160 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3161 |                         END IF
       3162 |                     ELSE IF (KBDS(14).NE.0) THEN
       3163 |C                        PRINT *,'            SEC BIT MAP'
       3164 |                         IF (KBDS(16).EQ.0) THEN
       3165 |C                            PRINT *,'            SECOND ORDER',
       3166 |C    *                              ' VALUES CONSTANT WIDTH'
       3167 |                         ELSE IF (KBDS(16).NE.0) THEN
       3168 |C                            PRINT *,'            SECOND ORDER',
       3169 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3170 |                         END IF
       3171 |                     END IF
       3172 |                 END IF
       3173 |             END IF
       3174 |         END IF
       3175 |      END IF
       3176 |      IF(ALLOCATED(KSAVE)) DEALLOCATE(KSAVE)
       3177 |C     PRINT *,' NOT PROCESSED - NOT PROCESSED - NOT PROCESSED'
       3178 |      KRET   = 11
       3179 |      RETURN
       3180 | 4000 CONTINUE
       3181 |C  ****************************************************************
       3182 |C
       3183 |C GRID POINT DATA, SIMPLE PACKING, FLOATING POINT, NO ADDN'L FLAGS
       3184 |C
       3185 |      SCAL10  = 10.0 ** KPDS(22)
       3186 |      SCAL10  = 1.0 / SCAL10
       3187 |      IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24.OR.KPDS(3).EQ.26.
       3188 |     *            OR.KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       3189 |          IF (KPDS(3).EQ.26) THEN
       3190 |              KADD    = 72
       3191 |          ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       3192 |              KADD    = 91
       3193 |          ELSE
       3194 |              KADD    = 37
       3195 |          END IF
       3196 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3197 |          KPTR(8)   = KPTR(8) + KBITS * KNR
       3198 |          II        = 1
       3199 |          KENTRY    = KPTR(10)
       3200 |          DO 4001 I = 1, KENTRY
       3201 |              IF (KBMS(I)) THEN
       3202 |                  DATA(I)   = (REFNCE+FLOAT(KSAVE(II))*SCALE)*SCAL10
       3203 |                  II        = II + 1
       3204 |              ELSE
       3205 |                  DATA(I)   = 0.0
       3206 |              END IF
       3207 | 4001     CONTINUE
       3208 |          DO 4002 I = 2, KADD
       3209 |              DATA(I)   = DATA(1)
       3210 | 4002     CONTINUE
       3211 |      ELSE IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22.OR.KPDS(3).EQ.25.
       3212 |     *            OR.KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       3213 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3214 |          II    = 1
       3215 |          KENTRY = KPTR(10)
       3216 |          DO 4011 I = 1, KENTRY
       3217 |              IF (KBMS(I)) THEN
       3218 |                  DATA(I) = (REFNCE + FLOAT(KSAVE(II)) * SCALE) * SCAL10
       3219 |                  II  = II + 1
       3220 |              ELSE
       3221 |                  DATA(I) = 0.0
       3222 |              END IF
       3223 | 4011     CONTINUE
       3224 |          IF (KPDS(3).EQ.25) THEN
       3225 |              KADD    = 71
       3226 |          ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       3227 |              KADD    = 90
       3228 |          ELSE
       3229 |              KADD    = 36
       3230 |          END IF
       3231 |          LASTP   = KENTRY - KADD
       3232 |          DO 4012 I = LASTP+1, KENTRY
       3233 |              DATA(I) = DATA(LASTP)
       3234 | 4012     CONTINUE
       3235 |      ELSE
       3236 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3237 |          II    = 1
       3238 |          KENTRY = KPTR(10)
       3239 |          DO 500 I = 1, KENTRY
       3240 |              IF (KBMS(I)) THEN
       3241 |                  DATA(I) = (REFNCE + FLOAT(KSAVE(II)) * SCALE) * SCAL10
       3242 |                  II  = II + 1
       3243 |              ELSE
       3244 |                  DATA(I) = 0.0
       3245 |              END IF
       3246 |  500     CONTINUE
       3247 |      END IF
       3248 |      GO TO 900
       3249 |C  ------------- PROCESS SPHERICAL HARMONIC COEFFICIENTS,
       3250 |C               SIMPLE PACKING, FLOATING POINT, NO ADDN'L FLAGS
       3251 | 5000 CONTINUE
       3252 |C     PRINT *,'CHECK POINT SPECTRAL COEFF'
       3253 |      KPTR(8)  = IBYT12
       3254 |      CALL GBYTE (MSGA,KKK,KPTR(8),32)
       3255 |      KPTR(8)  = KPTR(8) + 32
       3256 |C
       3257 |C     THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
       3258 |C     TO THE FLOATING POINT USED ON YOUR MACHINE.
       3259 |C
       3260 |C     1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
       3261 |C     LW = 4 OR 8;  IF 8 MAY BE A CRAY
       3262 |C
       3263 |      CALL W3FI01(LW)
       3264 |      IF (LW.EQ.4) THEN
       3265 |        CALL GBYTE (KK,JSGN,0,1)
       3266 |        CALL GBYTE (KK,JEXP,1,7)
       3267 |        CALL GBYTE (KK,IFR,8,24)
       3268 |      ELSE
       3269 |        CALL GBYTE (KK,JSGN,32,1)
       3270 |        CALL GBYTE (KK,JEXP,33,7)
       3271 |        CALL GBYTE (KK,IFR,40,24)
       3272 |      ENDIF
       3273 |C
       3274 |      IF (IFR.EQ.0) THEN
       3275 |          REALKK  = 0.0
       3276 |      ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
       3277 |          REALKK  = 0.0
       3278 |      ELSE
       3279 |          REALKK  = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
       3280 |          IF (JSGN.NE.0) REALKK  = -REALKK
       3281 |      END IF
       3282 |      DATA(1)  = REALKK
       3283 |      CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3284 |C  --------------
       3285 |      DO 6000 I = 1, KENTRY
       3286 |          DATA(I+1)  = REFNCE + FLOAT(KSAVE(I)) * SCALE
       3287 | 6000 CONTINUE
       3288 |  900 CONTINUE
       3289 |      IF(ALLOCATED(KSAVE)) DEALLOCATE(KSAVE)
       3290 |C     PRINT *,'EXIT FI635'
       3291 |      RETURN
       3292 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
allocated                        Pure Intrinsic
                                 0-3176.10  0-3289.10
 
ckref                            Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-2760.21$  0-2779.22  0-2825.21  0-2826.21  0-2827.21  0-2829.21  0-2830.21  0-2831.21
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-2774.21$  0-2665.49  0-2930.14@  0-2932.19@  0-3030.38  0-3042.38  0-3202.18@  0-3205.18@
                                 0-3209.14@  0-3209.27  0-3218.18@  0-3221.18@  0-3233.14@  0-3233.25  0-3241.18@  0-3244.18@
                                 0-3282.6@  0-3286.10@
 
fi635                            Subroutine
                                 0-2665.18$
 
fi636                            External Subroutine
                                 0-3030.31  0-3042.31
 
float                            Pure Intrinsic
                                 0-2840.21  0-3202.39  0-3218.39  0-3241.39  0-3279.21  0-3286.33
 
gbyte                            External Subroutine
                                 0-2792.12  0-2795.12  0-2802.12  0-2805.12  0-2814.12  0-2825.14  0-2826.14  0-2827.14  0-2829.14
                                 0-2830.14  0-2831.14  0-2846.12  0-2861.16  0-2865.16  0-2891.16  0-2895.16  0-2899.16  0-2903.16
                                 0-2907.16  0-2911.16  0-2915.16  0-2919.16  0-3254.12  0-3265.14  0-3266.14  0-3267.14  0-3269.14
                                 0-3270.14  0-3271.14
 
gbytes                           External Subroutine
                                 0-3196.16  0-3213.16  0-3236.16  0-3283.12
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2929.18@  0-2930.20  0-2931.24  0-2932.25  0-3200.19@  0-3201.24  0-3202.24  0-3205.24
                                 0-3208.19@  0-3209.20  0-3216.19@  0-3217.24  0-3218.24  0-3221.24  0-3232.19@  0-3233.20
                                 0-3239.18@  0-3240.24  0-3241.24  0-3244.24  0-3285.15@  0-3286.16  0-3286.45
 
iand                             Pure Intrinsic
                                 0-2857.11  0-2868.15  0-2875.15  0-2882.15  0-2959.11  0-2961.14  0-2963.18  0-2966.23  0-3012.19
                                 0-3014.18  0-3016.23  0-3070.16  0-3072.14  0-3074.18  0-3077.23  0-3123.19  0-3126.18  0-3128.23
 
ibyt12                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2851.7@  0-3253.18
 
ifr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2827.27  0-2831.27  0-2835.11  0-2837.30  0-2840.27  0-3267.24  0-3271.24  0-3274.11  0-3276.30
                                 0-3279.27
 
ii                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3198.11@  0-3202.51  0-3203.19@  0-3203.31  0-3214.11@  0-3218.51  0-3219.19@  0-3219.25
                                 0-3237.11@  0-3241.51  0-3242.19@  0-3242.25
 
jexp                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2826.27  0-2830.27  0-2837.16  0-2840.43  0-3266.24  0-3270.24  0-3276.16  0-3279.43
 
jsgn                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2825.27  0-2829.27  0-2841.15  0-3265.24  0-3269.24  0-3280.15
 
kadd                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3190.15@  0-3192.15@  0-3194.15@  0-3208.26  0-3225.15@  0-3227.15@  0-3229.15@  0-3231.30
 
kbds                             Automatic, Integer(4) (1:20), Offset: 0, Alignment: full word
                                 0-2766.21$  0-2848.7@  0-2870.15@  0-2873.15@  0-2877.15@  0-2880.15@  0-2884.15@  0-2887.15@
                                 0-2968.22  0-2970.26  0-2972.30  0-2975.35  0-2979.31  0-2981.30  0-2984.35  0-2989.27  0-2991.26
                                 0-2993.30  0-2996.35  0-3000.31  0-3002.30  0-3005.35  0-3018.22  0-3020.26  0-3022.30  0-3025.35
                                 0-3033.31  0-3035.30  0-3038.35  0-3046.27  0-3048.26  0-3050.30  0-3053.35  0-3057.31  0-3059.30
                                 0-3062.35  0-3079.22  0-3081.26  0-3083.30  0-3086.35  0-3090.31  0-3092.30  0-3095.35  0-3100.27
                                 0-3102.26  0-3104.30  0-3107.35  0-3111.31  0-3113.30  0-3116.35  0-3130.22  0-3132.26  0-3134.30
                                 0-3137.35  0-3141.31  0-3143.30  0-3146.35  0-3151.27  0-3153.26  0-3155.30  0-3158.35  0-3162.31
                                 0-3164.30  0-3167.35
 
kbits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2846.24  0-2848.18  0-2850.18  0-2923.11  0-2938.36  0-2949.25  0-3196.43  0-3197.33  0-3213.43
                                 0-3236.43  0-3283.39
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-2762.21$  0-2665.44  0-2931.19  0-3030.48  0-3042.48  0-3201.19  0-3217.19  0-3240.19
 
kend                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2797.7@  0-2938.18
 
kentry                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2928.11@  0-2929.25  0-2949.7@  0-2951.22  0-3199.11@  0-3200.26  0-3215.11@  0-3216.26
                                 0-3231.21  0-3232.32  0-3238.11@  0-3239.25  0-3285.22
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2765.21$  0-2665.39  0-3031.65  0-3043.65
 
kk                               Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-2759.21$  0-2780.22  0-3265.21  0-3266.21  0-3267.21  0-3269.21  0-3270.21  0-3271.21
 
kkk                              Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-2770.21$  0-2780.28  0-3254.24
 
knr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2938.7@  0-3196.51  0-3197.41  0-3213.51  0-3236.51  0-3283.47
 
koctet                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2861.28
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2764.21$  0-2665.34  0-2925.29  0-3031.60  0-3043.60  0-3185.25  0-3187.11  0-3187.28  0-3187.45
                                 0-3188.22  0-3188.39  0-3189.15  0-3191.20  0-3191.37  0-3211.16  0-3211.33  0-3211.50  0-3212.22
                                 0-3212.39  0-3224.15  0-3226.20  0-3226.37
 
kphys1                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2915.28
 
kphys2                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2919.28
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2767.21$  0-2665.29  0-2788.7@  0-2788.17  0-2788.28  0-2788.42  0-2788.56  0-2789.26  0-2792.23
                                 0-2792.32  0-2793.7@  0-2793.18  0-2795.23  0-2795.32  0-2796.7@  0-2796.18  0-2797.17  0-2797.28
                                 0-2797.42  0-2797.56  0-2798.26  0-2798.39  0-2798.53  0-2802.30  0-2803.7@  0-2803.18  0-2805.31
                                 0-2806.7@  0-2806.18  0-2811.7@  0-2814.29  0-2815.7@  0-2815.18  0-2846.30  0-2847.7@  0-2847.18
                                 0-2850.7@  0-2851.18  0-2857.16  0-2861.35  0-2862.11@  0-2862.22  0-2865.35  0-2867.11@  0-2867.22
                                 0-2891.31  0-2892.11@  0-2892.22  0-2895.31  0-2896.11@  0-2896.22  0-2899.32  0-2900.11@
                                 0-2900.22  0-2903.32  0-2904.11@  0-2904.22  0-2907.32  0-2908.11@  0-2908.22  0-2911.32
                                 0-2912.11@  0-2912.22  0-2915.35  0-2916.11@  0-2916.22  0-2919.35  0-2920.11@  0-2920.22
                                 0-2928.20  0-2938.25  0-2945.17  0-2947.31  0-2959.16  0-2961.19  0-2963.23  0-2966.28  0-3012.24
                                 0-3014.23  0-3016.28  0-3031.55  0-3043.55  0-3070.21  0-3072.19  0-3074.23  0-3077.28  0-3123.24
                                 0-3126.23  0-3128.28  0-3196.35  0-3197.11@  0-3197.23  0-3199.23  0-3213.35  0-3215.20  0-3236.35
                                 0-3238.20  0-3253.7@  0-3254.28  0-3255.7@  0-3255.18  0-3283.31
 
kref                             Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-2769.21$  0-2779.31  0-2814.24
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2665.54  0-3178.7@
 
ksave                            Allocatable, Controlled, Integer(4) (:), Offset: 0, Alignment: full word
                                 0-2771.30$  0-2951.16  0-3176.20  0-3176.39  0-3196.29  0-3202.45  0-3213.29  0-3218.45  0-3236.29
                                 0-3241.45  0-3283.25  0-3286.39  0-3289.20  0-3289.39
 
kscale                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2772.21$  0-2805.24  0-2808.11@  0-2808.23  0-2810.20  0-2811.16
 
ksign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2802.24  0-2807.11
 
kxflag                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2865.28  0-2868.20  0-2875.21  0-2882.21
 
lastp                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3231.11@  0-3232.23  0-3233.30
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2823.19  0-2824.11  0-3263.19  0-3264.11
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-2758.21$  0-2665.24  0-2792.18  0-2795.18  0-2802.19  0-2805.19  0-2814.19  0-2846.19  0-2861.23
                                 0-2865.23  0-2891.23  0-2895.23  0-2899.23  0-2903.23  0-2907.23  0-2911.23  0-2915.23  0-2919.23
                                 0-3030.43  0-3042.43  0-3196.24  0-3213.24  0-3236.24  0-3254.19  0-3283.20
 
nc                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2895.28
 
nc1                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2903.28
 
nc2                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2911.28
 
ncv                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2907.28
 
nr                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2891.28
 
nrbits                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2768.21$  0-2947.7@  0-2949.16
 
nrbyte                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2945.7@  0-2947.17
 
nrv                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2899.28
 
realkk                           Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-2777.21$  0-2780.32  0-3275.10@  0-3277.10@  0-3279.10@  0-3280.24@  0-3280.37  0-3282.18
 
refn10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2927.11@  0-2932.30
 
refnce                           Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-2775.21$  0-2779.36  0-2836.11@  0-2838.11@  0-2840.11@  0-2841.26@  0-2841.37  0-2927.21
                                 0-3031.48  0-3043.48  0-3202.32  0-3218.30  0-3241.30  0-3286.24
 
scal10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2925.11@  0-2926.11@  0-2926.27  0-2927.30  0-3185.7@  0-3186.7@  0-3186.23  0-3202.63  0-3218.67
                                 0-3241.67
 
scale                            Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2776.21$  0-2810.7@  0-3202.56  0-3218.58  0-3241.58  0-3286.51
 
w3fi01                           External Subroutine
                                 0-2823.12  0-3263.12
 
** fi635   === End of Compilation 7 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       3293 |      SUBROUTINE FI636 (DATA,MSGA,KBMS,REFNCE,KPTR,KPDS,KGDS)
       3294 |C$$$  SUBPROGRAM DOCUMENTATION BLOCK
       3295 |C                .      .    .                                       .
       3296 |C SUBPROGRAM:    FI636       PROCESS SECOND ORDER PACKING
       3297 |C   PRGMMR: CAVANAUGH        ORG: W/NMC42    DATE: 92-09-22
       3298 |C
       3299 |C ABSTRACT: PROCESS SECOND ORDER PACKING FROM THE BINARY DATA SECTION
       3300 |C   (BDS) FOR SINGLE DATA ITEMS GRID POINT DATA
       3301 |C
       3302 |C PROGRAM HISTORY LOG:
       3303 |C   93-06-08  CAVANAUGH
       3304 |C   93-12-15  CAVANAUGH   MODIFIED SECOND ORDER POINTERS TO FIRST ORDER
       3305 |C                         VALUES AND SECOND ORDER VALUES CORRECTLY.
       3306 |C   95-04-26  R.E.JONES   FI636 CORECTION FOR 2ND ORDER COMPLEX
       3307 |C                         UNPACKING.
       3308 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       3309 |C
       3310 |C USAGE:    CALL FI636 (DATA,MSGA,KBMS,REFNCE,KPTR,KPDS,KGDS)
       3311 |C   INPUT ARGUMENT LIST:
       3312 |C
       3313 |C     MSGA     - ARRAY CONTAINING GRIB MESSAGE
       3314 |C     REFNCE   - REFERENCE VALUE
       3315 |C     KPTR     - WORK ARRAY
       3316 |C
       3317 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       3318 |C     DATA     - LOCATION OF OUTPUT ARRAY
       3319 |C              WORKING ARRAY
       3320 |C     KBDS(1)  - N1
       3321 |C     KBDS(2)  - N2
       3322 |C     KBDS(3)  - P1
       3323 |C     KBDS(4)  - P2
       3324 |C     KBDS(5)  - BIT POINTER TO 2ND ORDER WIDTHS
       3325 |C     KBDS(6)  -  "    "     "   "   "    BIT MAPS
       3326 |C     KBDS(7)  -  "    "     "  FIRST ORDER VALUES
       3327 |C     KBDS(8)  -  "    "     "  SECOND ORDER VALUES
       3328 |C     KBDS(9)  -  "    "     START OF BDS
       3329 |C     KBDS(10) -  "    "     MAIN BIT MAP
       3330 |C     KBDS(11) - BINARY SCALING
       3331 |C     KBDS(12) - DECIMAL SCALING
       3332 |C     KBDS(13) - BIT WIDTH OF FIRST ORDER VALUES
       3333 |C     KBDS(14) - BIT MAP FLAG
       3334 |C                 0 = NO SECOND ORDER BIT MAP
       3335 |C                 1 = SECOND ORDER BIT MAP PRESENT
       3336 |C     KBDS(15) - SECOND ORDER BIT WIDTH
       3337 |C     KBDS(16) - CONSTANT / DIFFERENT WIDTHS
       3338 |C                 0 = CONSTANT WIDTHS
       3339 |C                 1 = DIFFERENT WIDTHS
       3340 |C     KBDS(17) - SINGLE DATUM / MATRIX
       3341 |C                 0 = SINGLE DATUM AT EACH GRID POINT
       3342 |C                 1 = MATRIX OF VALUES AT EACH GRID POINT
       3343 |C       (18-20)- UNUSED
       3344 |C
       3345 |C REMARKS: SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       3346 |C
       3347 |C ATTRIBUTES:
       3348 |C   LANGUAGE: FORTRAN 77
       3349 |C   MACHINE:  HDS, CRAY
       3350 |C
       3351 |C$$$
       3352 |      REAL         DATA(*)
       3353 |      REAL         REFN
       3354 |      REAL         REFNCE
       3355 |C
       3356 |      INTEGER      KBDS(20)
       3357 |      INTEGER      KPTR(*)
       3358 |      INTEGER      JREF,BMAP2(12500)
       3359 |      INTEGER      I,IBDS
       3360 |      INTEGER      KBIT,IFOVAL,ISOVAL
       3361 |      INTEGER      KPDS(*),KGDS(*)
       3362 |C
       3363 |      LOGICAL*1    KBMS(*)
       3364 |C
       3365 |      CHARACTER*1  MSGA(*)
       3366 |C
       3367 |      EQUIVALENCE  (JREF,REFN)
       3368 |C  *******************     SETUP     ******************************
       3369 |C     PRINT *,'ENTER FI636'
       3370 |C                                START OF BMS (BIT POINTER)
       3371 |      DO I = 1,20
       3372 |        KBDS(I)  = 0
       3373 |      END DO
       3374 |C                BYTE START OF BDS
       3375 |      IBDS  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5)
       3376 |C     PRINT *,'KPTR(2-5) ',KPTR(2),KPTR(3),KPTR(4),KPTR(5)
       3377 |C                BIT START OF BDS
       3378 |      JPTR  = IBDS * 8
       3379 |C     PRINT *,'JPTR ',JPTR
       3380 |      KBDS(9) = JPTR
       3381 |C     PRINT *,'START OF BDS         ',KBDS(9)
       3382 |C                    BINARY SCALE VALUE  BDS BYTES 5-6
       3383 |      CALL GBYTE (MSGA,ISIGN,JPTR+32,1)
       3384 |      CALL GBYTE (MSGA,KBDS(11),JPTR+33,15)
       3385 |      IF (ISIGN.GT.0) THEN
       3386 |          KBDS(11)  = - KBDS(11)
       3387 |      END IF
       3388 |C     PRINT *,'BINARY SCALE VALUE =',KBDS(11)
       3389 |C                  EXTRACT REFERENCE VALUE
       3390 |      CALL GBYTE(MSGA,JREF,JPTR+48,32)
       3391 |C     PRINT *,'DECODED REFERENCE VALUE =',REFN,REFNCE
       3392 |C                F O BIT WIDTH
       3393 |      CALL GBYTE(MSGA,KBDS(13),JPTR+80,8)
       3394 |      JPTR  = JPTR + 88
       3395 |C              AT START OF BDS BYTE 12
       3396 |C                EXTRACT N1
       3397 |      CALL GBYTE (MSGA,KBDS(1),JPTR,16)
       3398 |C     PRINT *,'N1  = ',KBDS(1)
       3399 |      JPTR  = JPTR + 16
       3400 |C                 EXTENDED FLAGS
       3401 |      CALL GBYTE (MSGA,KFLAG,JPTR,8)
       3402 |C                 ISOLATE BIT MAP FLAG
       3403 |      IF (IAND(KFLAG,32).NE.0) THEN
       3404 |        KBDS(14)  = 1
       3405 |      ELSE
       3406 |        KBDS(14)  = 0
       3407 |      END IF
       3408 |      IF (IAND(KFLAG,16).NE.0) THEN
       3409 |        KBDS(16)  = 1
       3410 |      ELSE
       3411 |        KBDS(16)  = 0
       3412 |      END IF
       3413 |      IF (IAND(KFLAG,64).NE.0) THEN
       3414 |        KBDS(17)  = 1
       3415 |      ELSE
       3416 |        KBDS(17)  = 0
       3417 |      END IF
       3418 |      JPTR  = JPTR + 8
       3419 |C                EXTRACT N2
       3420 |      CALL GBYTE (MSGA,KBDS(2),JPTR,16)
       3421 |C     PRINT *,'N2  = ',KBDS(2)
       3422 |      JPTR  = JPTR + 16
       3423 |C                EXTRACT P1
       3424 |      CALL GBYTE (MSGA,KBDS(3),JPTR,16)
       3425 |C     PRINT *,'P1  = ',KBDS(3)
       3426 |      JPTR  = JPTR + 16
       3427 |C                EXTRACT P2
       3428 |      CALL GBYTE (MSGA,KBDS(4),JPTR,16)
       3429 |C     PRINT *,'P2  = ',KBDS(4)
       3430 |      JPTR  = JPTR + 16
       3431 |C                 SKIP RESERVED BYTE
       3432 |      JPTR    = JPTR + 8
       3433 |C                START OF SECOND ORDER BIT WIDTHS
       3434 |      KBDS(5) = JPTR
       3435 |C                COMPUTE START OF SECONDARY BIT MAP
       3436 |      IF (KBDS(14).NE.0) THEN
       3437 |C                           FOR INCLUDED SECONDARY BIT MAP
       3438 |          JPTR    = JPTR + (KBDS(3) * 8)
       3439 |          KBDS(6) = JPTR
       3440 |      ELSE
       3441 |C                           FOR CONSTRUCTED SECONDARY BIT MAP
       3442 |          KBDS(6)  = 0
       3443 |      END IF
       3444 |C                CREATE POINTER TO START OF FIRST ORDER VALUES
       3445 |      KBDS(7) =  KBDS(9) + KBDS(1) * 8 - 8
       3446 |C     PRINT *,'BIT POINTER TO START OF FOVALS',KBDS(7)
       3447 |C                CREATE POINTER TO START OF SECOND ORDER VALUES
       3448 |      KBDS(8) =  KBDS(9) + KBDS(2) * 8 - 8
       3449 |C     PRINT *,'BIT POINTER TO START OF SOVALS',KBDS(8)
       3450 |C     PRINT *,'KBDS( 1) - N1                         ',KBDS( 1)
       3451 |C     PRINT *,'KBDS( 2) - N2                         ',KBDS( 2)
       3452 |C     PRINT *,'KBDS( 3) - P1                         ',KBDS( 3)
       3453 |C     PRINT *,'KBDS( 4) - P2                         ',KBDS( 4)
       3454 |C     PRINT *,'KBDS( 5) - BIT PTR - 2ND ORDER WIDTHS ',KBDS( 5)
       3455 |C     PRINT *,'KBDS( 6) -  "   "     "   " BIT MAPS  ',KBDS( 6)
       3456 |C     PRINT *,'KBDS( 7) -  "   "     F O VALS        ',KBDS( 7)
       3457 |C     PRINT *,'KBDS( 8) -  "   "     S O VALS        ',KBDS( 8)
       3458 |C     PRINT *,'KBDS( 9) -  "   "    START OF BDS     ',KBDS( 9)
       3459 |C     PRINT *,'KBDS(10) -  "   "    MAIN BIT MAP     ',KBDS(10)
       3460 |C     PRINT *,'KBDS(11) - BINARY SCALING             ',KBDS(11)
       3461 |C     PRINT *,'KPDS(22) - DECIMAL SCALING            ',KPDS(22)
       3462 |C     PRINT *,'KBDS(13) - FO BIT WIDTH               ',KBDS(13)
       3463 |C     PRINT *,'KBDS(14) - 2ND ORDER BIT MAP FLAG     ',KBDS(14)
       3464 |C     PRINT *,'KBDS(15) - 2ND ORDER BIT WIDTH        ',KBDS(15)
       3465 |C     PRINT *,'KBDS(16) - CONSTANT/DIFFERENT WIDTHS  ',KBDS(16)
       3466 |C     PRINT *,'KBDS(17) - SINGLE DATUM/MATRIX        ',KBDS(17)
       3467 |C     PRINT *,'REFNCE VAL                            ',REFNCE
       3468 |C  ************************* PROCESS DATA  **********************
       3469 |      IJ  = 0
       3470 |C  ========================================================
       3471 |      IF (KBDS(14).EQ.0) THEN
       3472 |C                           NO BIT MAP, MUST CONSTRUCT ONE
       3473 |          IF (KGDS(2).EQ.65535) THEN
       3474 |              IF (KGDS(20).EQ.255) THEN
       3475 |C                 PRINT *,'CANNOT BE USED HERE'
       3476 |              ELSE
       3477 |C                               POINT TO PL
       3478 |          LP  = KPTR(9) + KPTR(2)*8 + KPTR(3)*8 + KGDS(20)*8 - 8
       3479 |C                 PRINT *,'LP = ',LP
       3480 |                  JT  = 0
       3481 |                  DO 2000 JZ = 1, KGDS(3)
       3482 |C                               GET NUMBER IN CURRENT ROW
       3483 |                      CALL GBYTE (MSGA,NUMBER,LP,16)
       3484 |C                               INCREMENT TO NEXT ROW NUMBER
       3485 |                      LP  = LP + 16
       3486 |C                     PRINT *,'NUMBER IN ROW',JZ,' = ',NUMBER
       3487 |                      DO 1500 JQ = 1, NUMBER
       3488 |                          IF (JQ.EQ.1) THEN
       3489 |                              CALL SBYTE (BMAP2,1,JT,1)
       3490 |                          ELSE
       3491 |                              CALL SBYTE (BMAP2,0,JT,1)
       3492 |                          END IF
       3493 |                          JT  = JT + 1
       3494 | 1500                 CONTINUE
       3495 | 2000             CONTINUE
       3496 |              END IF
       3497 |          ELSE
       3498 |              IF (IAND(KGDS(11),32).EQ.0) THEN
       3499 |C                           ROW BY ROW
       3500 |C                 PRINT *,'     ROW BY ROW'
       3501 |                  KOUT  = KGDS(3)
       3502 |                  KIN   = KGDS(2)
       3503 |              ELSE
       3504 |C                           COL BY COL
       3505 |C                 PRINT *,'     COL BY COL'
       3506 |                  KIN   = KGDS(3)
       3507 |                  KOUT  = KGDS(2)
       3508 |              END IF
       3509 |C             PRINT *,'KIN=',KIN,' KOUT= ',KOUT
       3510 |              DO 200 I = 1, KOUT
       3511 |                  DO 150 J = 1, KIN
       3512 |                      IF (J.EQ.1) THEN
       3513 |                          CALL SBYTE (BMAP2,1,IJ,1)
       3514 |                      ELSE
       3515 |                          CALL SBYTE (BMAP2,0,IJ,1)
       3516 |                      END IF
       3517 |                      IJ  = IJ + 1
       3518 |  150             CONTINUE
       3519 |  200         CONTINUE
       3520 |          END IF
       3521 |      END IF
       3522 |C  ========================================================
       3523 |C     PRINT 99,(BMAP2(J),J=1,110)
       3524 |C99   FORMAT ( 10(1X,Z8.8))
       3525 |C     CALL BINARY (BMAP2,2)
       3526 |C                FOR EACH GRID POINT ENTRY
       3527 |C
       3528 |         SCALE2  = 2.0**KBDS(11)
       3529 |         SCAL10  = 10.0**KPDS(22)
       3530 |C     PRINT *,'SCALE VALUES - ',SCALE2,SCAL10
       3531 |      DO 1000 I = 1, KPTR(10)
       3532 |C                    GET NEXT MASTER BIT MAP BIT POSITION
       3533 |C                    IF NEXT MASTER BIT MAP BIT POSITION IS 'ON' (1)
       3534 |          IF (KBMS(I)) THEN
       3535 |C             WRITE(6,900)I,KBMS(I)
       3536 |C 900         FORMAT (1X,I4,3X,14HMAIN BIT IS ON,3X,L4)
       3537 |              IF (KBDS(14).NE.0) THEN
       3538 |                  CALL GBYTE (MSGA,KBIT,KBDS(6),1)
       3539 |              ELSE
       3540 |                  CALL GBYTE (BMAP2,KBIT,KBDS(6),1)
       3541 |              END IF
       3542 |C             PRINT *,'KBDS(6) =',KBDS(6),' KBIT =',KBIT
       3543 |              KBDS(6)  = KBDS(6) + 1
       3544 |              IF (KBIT.NE.0) THEN
       3545 |C                 PRINT *,'          SOB ON'
       3546 |C                                  GET NEXT FIRST ORDER PACKED VALUE
       3547 |                  CALL GBYTE (MSGA,IFOVAL,KBDS(7),KBDS(13))
       3548 |                  KBDS(7)  = KBDS(7) + KBDS(13)
       3549 |C                 PRINT *,'FOVAL =',IFOVAL
       3550 |C                                   GET SECOND ORDER BIT WIDTH
       3551 |                  CALL GBYTE (MSGA,KBDS(15),KBDS(5),8)
       3552 |                  KBDS(5)  = KBDS(5) + 8
       3553 |C                PRINT *,KBDS(7)-KBDS(13),' FOVAL =',IFOVAL,' KBDS(5)=',
       3554 |C    *                           ,KBDS(5), 'ISOWID =',KBDS(15)
       3555 |              ELSE
       3556 |C                 PRINT *,'          SOB NOT ON'
       3557 |              END IF
       3558 |              ISOVAL  = 0
       3559 |              IF (KBDS(15).EQ.0) THEN
       3560 |C                        IF SECOND ORDER BIT WIDTH = 0
       3561 |C                             THEN SECOND ORDER VALUE IS 0
       3562 |C                            SO CALCULATE DATA VALUE FOR THIS POINT
       3563 |C                 DATA(I) = (REFNCE + (FLOAT(IFOVAL) * SCALE2)) / SCAL10
       3564 |              ELSE
       3565 |                  CALL GBYTE (MSGA,ISOVAL,KBDS(8),KBDS(15))
       3566 |                  KBDS(8)  = KBDS(8) + KBDS(15)
       3567 |              END IF
       3568 |              DATA(I) = (REFNCE + (FLOAT(IFOVAL + ISOVAL) *
       3569 |     *                         SCALE2)) / SCAL10
       3570 |C             PRINT *,I,DATA(I),REFNCE,IFOVAL,ISOVAL,SCALE2,SCAL10
       3571 |          ELSE
       3572 |C             WRITE(6,901) I,KBMS(I)
       3573 |C 901         FORMAT (1X,I4,3X,15HMAIN BIT NOT ON,3X,L4)
       3574 |              DATA(I)  = 0.0
       3575 |          END IF
       3576 |C         PRINT *,I,DATA(I),IFOVAL,ISOVAL,KBDS(5),KBDS(15)
       3577 | 1000 CONTINUE
       3578 |C  **************************************************************
       3579 |C     PRINT *,'EXIT FI636'
       3580 |      RETURN
       3581 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
bmap2                            Automatic, Integer(4) (1:12500), Offset: 0, Alignment: full word
                                 0-3358.25$  0-3489.43  0-3491.43  0-3513.39  0-3515.39  0-3540.31
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-3352.20$  0-3293.25  0-3568.14@  0-3574.14@
 
fi636                            Subroutine
                                 0-3293.18$
 
float                            Pure Intrinsic
                                 0-3568.36
 
gbyte                            External Subroutine
                                 0-3383.12  0-3384.12  0-3390.12  0-3393.12  0-3397.12  0-3401.12  0-3420.12  0-3424.12  0-3428.12
                                 0-3483.28  0-3538.24  0-3540.24  0-3547.24  0-3551.24  0-3565.24
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3359.20$  0-3371.10@  0-3372.14  0-3510.22@  0-3531.15@  0-3534.20  0-3568.20  0-3574.20
 
iand                             Pure Intrinsic
                                 0-3403.11  0-3408.11  0-3413.11  0-3498.19
 
ibds                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3359.22$  0-3375.7@  0-3378.15
 
ifoval                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3360.25$  0-3547.36  0-3568.42
 
ij                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3469.7@  0-3513.47  0-3515.47  0-3517.23@  0-3517.29
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3383.24  0-3385.11
 
isoval                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3360.32$  0-3558.15@  0-3565.36  0-3568.51
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3511.26@  0-3512.27
 
jptr                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3378.7@  0-3380.17  0-3383.30  0-3384.33  0-3390.28  0-3393.32  0-3394.7@  0-3394.15  0-3397.32
                                 0-3399.7@  0-3399.15  0-3401.30  0-3418.7@  0-3418.15  0-3420.32  0-3422.7@  0-3422.15  0-3424.32
                                 0-3426.7@  0-3426.15  0-3428.32  0-3430.7@  0-3430.15  0-3432.7@  0-3432.17  0-3434.17  0-3438.11@
                                 0-3438.21  0-3439.21
 
jq                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3487.31@  0-3488.31
 
jref                             Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-3358.20$  0-3367.21  0-3390.23
 
jt                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3480.19@  0-3489.51  0-3491.51  0-3493.27@  0-3493.33
 
jz                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3481.27@
 
kbds                             Automatic, Integer(4) (1:20), Offset: 0, Alignment: full word
                                 0-3356.20$  0-3372.9@  0-3380.7@  0-3384.24  0-3386.11@  0-3386.25  0-3393.23  0-3397.24  0-3404.9@
                                 0-3406.9@  0-3409.9@  0-3411.9@  0-3414.9@  0-3416.9@  0-3420.24  0-3424.24  0-3428.24  0-3434.7@
                                 0-3436.11  0-3438.29  0-3439.11@  0-3442.11@  0-3445.7@  0-3445.18  0-3445.28  0-3448.7@  0-3448.18
                                 0-3448.28  0-3471.11  0-3528.25  0-3537.19  0-3538.41  0-3540.42  0-3543.15@  0-3543.26  0-3547.43
                                 0-3547.51  0-3548.19@  0-3548.30  0-3548.40  0-3551.36  0-3551.45  0-3552.19@  0-3552.30  0-3559.19
                                 0-3565.43  0-3565.51  0-3566.19@  0-3566.30  0-3566.40
 
kbit                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3360.20$  0-3538.36  0-3540.37  0-3544.19
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-3363.20$  0-3293.35  0-3534.15
 
kflag                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3401.24  0-3403.16  0-3408.16  0-3413.16
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3361.28$  0-3293.57  0-3473.15  0-3474.19  0-3478.51  0-3481.35  0-3498.24  0-3501.27  0-3502.27
                                 0-3506.27  0-3507.27
 
kin                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3502.19@  0-3506.19@  0-3511.33
 
kout                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3501.19@  0-3507.19@  0-3510.29
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3361.20$  0-3293.52  0-3529.26
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3357.20$  0-3293.47  0-3375.15  0-3375.25  0-3375.35  0-3375.45  0-3478.17  0-3478.27  0-3478.39
                                 0-3531.22
 
lp                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3478.11@  0-3483.47  0-3485.23@  0-3485.29
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-3365.20$  0-3293.30  0-3383.19  0-3384.19  0-3390.18  0-3393.18  0-3397.19  0-3401.19  0-3420.19
                                 0-3424.19  0-3428.19  0-3483.35  0-3538.31  0-3547.31  0-3551.31  0-3565.31
 
number                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3483.40  0-3487.39
 
refn                             Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-3353.20$  0-3367.26
 
refnce                           Reference argument, Real(4), Offset: 0, Alignment: full word
                                 0-3354.20$  0-3293.40  0-3568.26
 
sbyte                            External Subroutine
                                 0-3489.36  0-3491.36  0-3513.32  0-3515.32
 
scal10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-3529.10@  0-3569.43
 
scale2                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-3528.10@  0-3569.32
 
** fi636   === End of Compilation 8 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STDFRAMEWORK
         STRICT          SWAPOMP         THREADED        UNWIND
         NOZEROSIZE
  
         ==  Options Of Integer Type ==
         FIXED(72)             MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(548)        STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR5X)           ATTR()                AUTODBL(NONE)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(RNDSNGL,MAF,FOLD,RNGCHK)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR5)            UNROLL(AUTO)
         XREF(FULL)            XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
       3582 |      SUBROUTINE FI637(J,KPDS,KGDS,KRET)
       3583 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       3584 |C                .      .    .                                       .
       3585 |C SUBPROGRAM:    FI637       GRIB GRID/SIZE TEST
       3586 |C   PRGMMR: CAVANAUGH        ORG: W/NMC42    DATE: 91-09-13
       3587 |C
       3588 |C ABSTRACT: TO TEST WHEN GDS IS AVAILABLE TO SEE IF SIZE MISMATCH
       3589 |C   ON EXISTING GRIDS (BY CENTER) IS INDICATED
       3590 |C
       3591 |C PROGRAM HISTORY LOG:
       3592 |C   91-09-13  CAVANAUGH
       3593 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       3594 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
       3595 |C   98-06-17  IREDELL     REMOVED ALTERNATE RETURN
       3596 |C   99-01-20  BALDWIN    MODIFY TO HANDLE GRID 237
       3597 |C
       3598 |C USAGE:    CALL FI637(J,KPDS,KGDS,KRET)
       3599 |C   INPUT ARGUMENT LIST:
       3600 |C     J        - SIZE FOR INDICATED GRID
       3601 |C     KPDS     -
       3602 |C     KGDS     -
       3603 |C
       3604 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       3605 |C     J        - SIZE FOR INDICATED GRID MODIFIED FOR ECMWF-US 2
       3606 |C     KRET     - ERROR RETURN
       3607 |C                (A MISMATCH WAS DETECTED IF KRET IS NOT ZERO)
       3608 |C
       3609 |C REMARKS:
       3610 |C     KRET     -
       3611 |C          = 9 - GDS INDICATES SIZE MISMATCH WITH STD GRID
       3612 |C
       3613 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       3614 |C
       3615 |C ATTRIBUTES:
       3616 |C   LANGUAGE: FORTRAN 77
       3617 |C   MACHINE:  HDS
       3618 |C
       3619 |C$$$
       3620 |      INTEGER       KPDS(*)
       3621 |      INTEGER       KGDS(*)
       3622 |      INTEGER       J
       3623 |      INTEGER       I
       3624 |C  ---------------------------------------
       3625 |C  ---------------------------------------
       3626 |C           IF GDS NOT INDICATED, RETURN
       3627 |C  ----------------------------------------
       3628 |      KRET=0
       3629 |      IF (IAND(KPDS(4),128).EQ.0) RETURN
       3630 |C  ---------------------------------------
       3631 |C            GDS IS INDICATED, PROCEED WITH TESTING
       3632 |C  ---------------------------------------
       3633 |      IF (KGDS(2).EQ.65535) THEN
       3634 |          RETURN
       3635 |      END IF
       3636 |      KRET=1
       3637 |      I     = KGDS(2) * KGDS(3)
       3638 |C  ---------------------------------------
       3639 |C            INTERNATIONAL SET
       3640 |C  ---------------------------------------
       3641 |      IF (KPDS(3).GE.21.AND.KPDS(3).LE.26) THEN
       3642 |          IF (I.NE.J) THEN
       3643 |               RETURN
       3644 |          END IF
       3645 |      ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3646 |          IF (I.NE.J) THEN
       3647 |              RETURN
       3648 |          END IF
       3649 |      ELSE IF (KPDS(3).EQ.50) THEN
       3650 |          IF (I.NE.J) THEN
       3651 |              RETURN
       3652 |          END IF
       3653 |      ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       3654 |          IF (I.NE.J) THEN
       3655 |              RETURN
       3656 |          END IF
       3657 |C  ---------------------------------------
       3658 |C            TEST ECMWF CONTENT
       3659 |C  ---------------------------------------
       3660 |      ELSE IF (KPDS(1).EQ.98) THEN
       3661 |          KRET  = 9
       3662 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.16) THEN
       3663 |              IF (I.NE.J) THEN
       3664 |                IF (KPDS(3) .NE. 2) THEN
       3665 |                  RETURN
       3666 |                ELSEIF (I .NE. 10512) THEN ! Test for US Grid 2
       3667 |                  RETURN
       3668 |                END IF
       3669 |                J  = I   ! Set to US Grid 2, 2.5 Global
       3670 |              END IF
       3671 |          ELSE
       3672 |              KRET  = 5
       3673 |              RETURN
       3674 |          END IF
       3675 |C  ---------------------------------------
       3676 |C           U.K. MET OFFICE, BRACKNELL
       3677 |C  ---------------------------------------
       3678 |      ELSE IF (KPDS(1).EQ.74) THEN
       3679 |          KRET  = 9
       3680 |          IF (KPDS(3).GE.25.AND.KPDS(3).LE.26) THEN
       3681 |              IF (I.NE.J) THEN
       3682 |                  RETURN
       3683 |              END IF
       3684 |          ELSE
       3685 |              KRET  = 5
       3686 |              RETURN
       3687 |          END IF
       3688 |C  ---------------------------------------
       3689 |C           CANADA
       3690 |C  ---------------------------------------
       3691 |      ELSE IF (KPDS(1).EQ.54) THEN
       3692 |C         PRINT *,' NO CURRENT LISTING OF CANADIAN GRIDS'
       3693 |          RETURN
       3694 |C  ---------------------------------------
       3695 |C           JAPAN METEOROLOGICAL AGENCY
       3696 |C  ---------------------------------------
       3697 |      ELSE IF (KPDS(1).EQ.34) THEN
       3698 |C         PRINT *,' NO CURRENT LISTING OF JMA GRIDS'
       3699 |          RETURN
       3700 |C  ---------------------------------------
       3701 |C           NAVY - FNOC
       3702 |C  ---------------------------------------
       3703 |      ELSE IF (KPDS(1).EQ.58) THEN
       3704 |          IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3705 |              IF (I.NE.J) THEN
       3706 |                  RETURN
       3707 |              END IF
       3708 |          ELSE IF (KPDS(3).GE.220.AND.KPDS(3).LE.221) THEN
       3709 |              IF (I.NE.J) THEN
       3710 |                  RETURN
       3711 |              END IF
       3712 |          ELSE IF (KPDS(3).EQ.223) THEN
       3713 |              IF (I.NE.J) THEN
       3714 |                  RETURN
       3715 |              END IF
       3716 |          ELSE
       3717 |              KRET = 5
       3718 |              RETURN
       3719 |          END IF
       3720 |C  ---------------------------------------
       3721 |C                 U.S. GRIDS
       3722 |C  ---------------------------------------
       3723 |      ELSE IF (KPDS(1).EQ.7) THEN
       3724 |          KRET  = 9
       3725 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.6) THEN
       3726 |              IF (I.NE.J) THEN
       3727 |                  RETURN
       3728 |              END IF
       3729 |          ELSE IF (KPDS(3).EQ.8) THEN
       3730 |              IF (I.NE.J) THEN
       3731 |                  RETURN
       3732 |              END IF
       3733 |          ELSE IF (KPDS(3).GE.27.AND.KPDS(3).LE.30) THEN
       3734 |              IF (I.NE.J) THEN
       3735 |                  RETURN
       3736 |              END IF
       3737 |          ELSE IF (KPDS(3).GE.33.AND.KPDS(3).LE.34) THEN
       3738 |              IF (I.NE.J) THEN
       3739 |                  RETURN
       3740 |              END IF
       3741 |          ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3742 |              IF (I.NE.J) THEN
       3743 |                  RETURN
       3744 |              END IF
       3745 |          ELSE IF (KPDS(3).EQ.53) THEN
       3746 |              IF (I.NE.J) THEN
       3747 |                  RETURN
       3748 |              END IF
       3749 |          ELSE IF (KPDS(3).GE.55.AND.KPDS(3).LE.56) THEN
       3750 |              IF (I.NE.J) THEN
       3751 |                  RETURN
       3752 |              END IF
       3753 |          ELSE IF (KPDS(3).GE.67.AND.KPDS(3).LE.77) THEN
       3754 |              IF (I.NE.J) THEN
       3755 |                  RETURN
       3756 |              END IF
       3757 |          ELSE IF (KPDS(3).GE.85.AND.KPDS(3).LE.88) THEN
       3758 |              IF (I.NE.J) THEN
       3759 |                  RETURN
       3760 |              END IF
       3761 |          ELSE IF (KPDS(3).GE.90.AND.KPDS(3).LE.98) THEN
       3762 |              IF (I.NE.J) THEN
       3763 |                  RETURN
       3764 |              END IF
       3765 |          ELSE IF (KPDS(3).EQ.100.OR.KPDS(3).EQ.101) THEN
       3766 |              IF (I.NE.J) THEN
       3767 |                  RETURN
       3768 |              END IF
       3769 |          ELSE IF (KPDS(3).GE.103.AND.KPDS(3).LE.107) THEN
       3770 |              IF (I.NE.J) THEN
       3771 |                  RETURN
       3772 |              END IF
       3773 |          ELSE IF (KPDS(3).EQ.110) THEN
       3774 |              IF (I.NE.J) THEN
       3775 |                  RETURN
       3776 |              END IF
       3777 |          ELSE IF (KPDS(3).EQ.126.OR.KPDS(3).EQ.127) THEN
       3778 |              IF (I.NE.J) THEN
       3779 |                  RETURN
       3780 |              END IF
       3781 |C***PLee 14 Sep 2004 TLO ***start
       3782 |          ELSE IF (KPDS(3).EQ.138.OR.KPDS(3).EQ.255) THEN
       3783 |              IF (I.NE.J) THEN
       3784 |                  RETURN
       3785 |              END IF
       3786 |C***PLee 14 Sep 2004 TLO ***end
       3787 |          ELSE IF (KPDS(3).EQ.145.OR.KPDS(3).EQ.146) THEN
       3788 |              IF (I.NE.J) THEN
       3789 |                  RETURN
       3790 |              END IF
       3791 |          ELSE IF (KPDS(3).GE.170.AND.KPDS(3).LE.172) THEN
       3792 |              IF (I.NE.J) THEN
       3793 |                  RETURN
       3794 |              END IF
       3795 |          ELSE IF (KPDS(3).EQ.175) THEN
       3796 |              IF (I.NE.J) THEN
       3797 |                  RETURN
       3798 |              END IF
       3799 |          ELSE IF (KPDS(3).EQ.190.OR.KPDS(3).EQ.192) THEN
       3800 |              IF (I.NE.J) THEN
       3801 |                  RETURN
       3802 |              END IF
       3803 |          ELSE IF (KPDS(3).EQ.194.OR.KPDS(3).EQ.196) THEN
       3804 |              IF (I.NE.J) THEN
       3805 |                  RETURN
       3806 |              END IF
       3807 |          ELSE IF (KPDS(3).EQ.198) THEN
       3808 |              IF (I.NE.J) THEN
       3809 |                  RETURN
       3810 |              END IF
       3811 |          ELSE IF (KPDS(3).GE.201.AND.KPDS(3).LE.253) THEN
       3812 |              IF (I.NE.J) THEN
       3813 |                  RETURN
       3814 |              END IF
       3815 |          ELSE
       3816 |              KRET  = 5
       3817 |              RETURN
       3818 |          END IF
       3819 |      ELSE
       3820 |          KRET  = 10
       3821 |          RETURN
       3822 |      END IF
       3823 |C  ------------------------------------
       3824 |C                    NORMAL EXIT
       3825 |C  ------------------------------------
       3826 |      KRET  = 0
       3827 |      RETURN
       3828 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi637                            Subroutine
                                 0-3582.18$
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3623.21$  0-3637.7@  0-3642.15  0-3646.15  0-3650.15  0-3654.15  0-3663.19  0-3666.25  0-3669.22
                                 0-3681.19  0-3705.19  0-3709.19  0-3713.19  0-3726.19  0-3730.19  0-3734.19  0-3738.19  0-3742.19
                                 0-3746.19  0-3750.19  0-3754.19  0-3758.19  0-3762.19  0-3766.19  0-3770.19  0-3774.19  0-3778.19
                                 0-3783.19  0-3788.19  0-3792.19  0-3796.19  0-3800.19  0-3804.19  0-3808.19  0-3812.19
 
iand                             Pure Intrinsic
                                 0-3629.11
 
j                                Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-3622.21$  0-3582.24  0-3642.20  0-3646.20  0-3650.20  0-3654.20  0-3663.24  0-3669.17@  0-3681.24
                                 0-3705.24  0-3709.24  0-3713.24  0-3726.24  0-3730.24  0-3734.24  0-3738.24  0-3742.24  0-3746.24
                                 0-3750.24  0-3754.24  0-3758.24  0-3762.24  0-3766.24  0-3770.24  0-3774.24  0-3778.24  0-3783.24
                                 0-3788.24  0-3792.24  0-3796.24  0-3800.24  0-3804.24  0-3808.24  0-3812.24
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3621.21$  0-3582.31  0-3633.11  0-3637.15  0-3637.25
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3620.21$  0-3582.26  0-3629.16  0-3641.11  0-3641.29  0-3645.16  0-3645.34  0-3649.16  0-3653.16
                                 0-3653.34  0-3660.16  0-3662.15  0-3662.32  0-3664.21  0-3678.16  0-3680.15  0-3680.33  0-3691.16
                                 0-3697.16  0-3703.16  0-3704.15  0-3704.33  0-3708.20  0-3708.39  0-3712.20  0-3723.16  0-3725.15
                                 0-3725.32  0-3729.20  0-3733.20  0-3733.38  0-3737.20  0-3737.38  0-3741.20  0-3741.38  0-3745.20
                                 0-3749.20  0-3749.38  0-3753.20  0-3753.38  0-3757.20  0-3757.38  0-3761.20  0-3761.38  0-3765.20
                                 0-3765.38  0-3769.20  0-3769.39  0-3773.20  0-3777.20  0-3777.38  0-3782.20  0-3782.38  0-3787.20
                                 0-3787.38  0-3791.20  0-3791.39  0-3795.20  0-3799.20  0-3799.38  0-3803.20  0-3803.38  0-3807.20
                                 0-3811.20  0-3811.39
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-3582.36  0-3628.7@  0-3636.7@  0-3661.11@  0-3672.15@  0-3679.11@  0-3685.15@  0-3717.15@
                                 0-3724.11@  0-3816.15@  0-3820.11@  0-3826.7@
 
** fi637   === End of Compilation 9 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    w3fi63.f                    11/27/06   09:25:36
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................    3828
1501-510  Compilation successful for file w3fi63.f.
1501-543  Object file created.
